{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","path":"js/third-party/nprogress.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0}],"Cache":[{"_id":"source/robots.txt","hash":"6256855e4e695a2e0771afeeef40fda88d08bd5b","modified":1708761961714},{"_id":"source/_posts/ADB-在你的手機上下指令.md","hash":"380740992101f11a226bde6a469af9982d3bdb49","modified":1708761961523},{"_id":"source/_posts/Android-APP-02-界面設計.md","hash":"c3720ea7339f376d905a1916ca5200689fd3a8d1","modified":1708761961533},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM.md","hash":"6e9dfcd19c89134eda484443bab49c0ae726e280","modified":1708761961531},{"_id":"source/_posts/API-使用-PHP-執行-Python-腳本.md","hash":"e0375b078651db13d9ae81463357e21777cb8218","modified":1708761961525},{"_id":"source/_posts/Android-APP-03-Android-的-STT-與-TTS.md","hash":"deb1e67bb11c109aae7182e834af249252d61e89","modified":1708761961535},{"_id":"source/_posts/Android-APP-04-MVVM-Repository與API串接.md","hash":"f5447901b71efbd067ea857ce55c66c100119b96","modified":1708761961535},{"_id":"source/_posts/Apple-Silicon-晶片不支援-ADB-ARM.md","hash":"663bbbe44cf3593583faf7d787e333cce481d9f2","modified":1708780192226},{"_id":"source/_posts/Android-APP-05-API與物件.md","hash":"4c34e501c39b31c4701ee0c9d52d1bd7eea4e301","modified":1708761961537},{"_id":"source/_posts/Android-APP-06-RecyclerView與資料顯示.md","hash":"0321e349999b4651f7e10ef42e2941d172df7ce5","modified":1708761961537},{"_id":"source/_posts/Android-APP-07-MVVM中的RecyclerView與Adapter.md","hash":"b8a75605564d161eecfe727f94a9b677bd274ddb","modified":1708761961537},{"_id":"source/_posts/CodeIgniter安裝Swagger.md","hash":"4dc8ad1b86ca1d20096613adcf63a4ed6c39e45a","modified":1708761961538},{"_id":"source/_posts/BMI計算器-取得EditText中的字.md","hash":"eab5fade2f3cc93d34d9541b7b46b57090f9c0e8","modified":1708761961538},{"_id":"source/_posts/Workshop記錄-Volley與API.md","hash":"a37402822c54cb6c18215aa6430d2ba548ea4b1a","modified":1708761961541},{"_id":"source/_posts/Word-新增快捷建.md","hash":"4b1aaecd34cdaa4a3ffb547456ff5007fa03fdda","modified":1708761961541},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB.md","hash":"c092e3706bb13beecac4ddbadaab6b995c48e7cc","modified":1708761961540},{"_id":"source/_posts/Zenbo開發系列-01-後蓋打開方式、偵錯USB孔位置.md","hash":"f79bafffa1f344d1f30388869c9fd0eeaf3ce63a","modified":1708761961548},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介.md","hash":"d6a407bf0c8249075fb243c989654b4c295e95ef","modified":1708761961553},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow.md","hash":"b0c24ce0325c1e0bb06c89c2108658a1e3658b83","modified":1708761961551},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計.md","hash":"6b8f7e5913ae07b67ad2236565f6d8761e27625f","modified":1708761961559},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器.md","hash":"b2425d34372ddc71b98fc26602429ef84d14e832","modified":1708761961549},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder.md","hash":"78571b12a74d3dcfffdfc2a4f24f9d75d8109b22","modified":1708761961579},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo.md","hash":"af6869370579cd923d61b22378d989006a975530","modified":1708761961563},{"_id":"source/_posts/按鈕監聽器.md","hash":"1ecb2a57e1ff05ea620ee981d8282b117e24b129","modified":1708761961613},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式.md","hash":"ee061febbd7c8d676e86be653e1a9c1702b70d9a","modified":1708761961619},{"_id":"source/_posts/第一個-Kotlin-專案.md","hash":"bbcc9ce82a2470c3f0020150bd94e20641e74e61","modified":1708761961623},{"_id":"source/_posts/結論-總整理與建議.md","hash":"f8a1e30f7d935a7d9d362ee3421a6c57db6c7c9f","modified":1708761961648},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例.md","hash":"cb074ec4fb78ae8de79d99c1db1361ad0326e508","modified":1708761961613},{"_id":"source/_posts/緒論-長照小幫手的背景與動機.md","hash":"40cd6cdeb00b3d9f9eb8874cb12458e7b2b6eff1","modified":1708761961651},{"_id":"source/_posts/語料庫模型-03-語料讀取-資料格式轉換.md","hash":"501277f2060cdc22d0fae7e95c8ac6c030f01566","modified":1708761961677},{"_id":"source/_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP.md","hash":"ad0fb64de7e6290bdb019b0d7143b1baf7914caa","modified":1708761961677},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性.md","hash":"33e8d3e3c00b45dc653ab585d6929935eed795d8","modified":1708761961658},{"_id":"source/_posts/語料庫模型-05-實體對應.md","hash":"3d1327a24211b3d7406fdc58406b31c1ebac36f0","modified":1708761961682},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF.md","hash":"d66060b8a0cf2cf2739cb413389283fc61b26972","modified":1708761961682},{"_id":"source/_posts/語料庫模型-09-回饋機制.md","hash":"48c2746a37c79a888bd4abb80d40998fb7b3c768","modified":1708761961699},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式.md","hash":"fa61370317bac3200a4937b800c314eaf41f727d","modified":1708761961672},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性.md","hash":"32794156a13d8d4cc2ce42ef58daf05595b58dce","modified":1708761961685},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號.md","hash":"beb9de72b9d029efae650c79cc336b8ec5d5d052","modified":1708761961706},{"_id":"source/_posts/聊天機器人的分類與比較.md","hash":"4f5aa453f809d0f78f0140d9678e373d8f778041","modified":1708761961653},{"_id":"source/_posts/逆向工程-反編譯APK.md","hash":"9c81101df859e3f424fe34e1d70d12994cfd396e","modified":1708761961708},{"_id":"source/_posts/長照小幫手-系統架構簡介.md","hash":"cb58f80d60806136de78784247c1600c42c6648f","modified":1708761961711},{"_id":"source/tags/index.md","hash":"6d28e6b0e2c2044fa8a474bef0aaf2363a085d35","modified":1708761961714},{"_id":"source/_posts/ADB-在你的手機上下指令/image4.png","hash":"d546df34d2a60e881cf6284d0e7e7e259b99a080","modified":1708761961525},{"_id":"source/_posts/ADB-在你的手機上下指令/image5.png","hash":"b612fccf836b70a068d6a9b60cc96afa8211d01b","modified":1708761961525},{"_id":"source/_posts/語料庫模型-08-繪製語料庫模型Heatmap圖.md","hash":"2e8ad2bb9bbca39b35b62052870405fc81f36f69","modified":1708761961699},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/final-architecture.png","hash":"4f6f1b1541f93e62d7f4937f30605a35819bf7e9","modified":1708761961531},{"_id":"source/_posts/Android-APP-05-API與物件/category.png","hash":"402f7277efa3b1253d921a82138ceaf305ba19b3","modified":1708761961537},{"_id":"source/_posts/Android-APP-03-Android-的-STT-與-TTS/對話頁面.png","hash":"34d49790d0f66d9266c525015e05018c97fecfb7","modified":1708761961535},{"_id":"source/_posts/Android-APP-05-API與物件/chat.png","hash":"8e6e99cca7d0a6e707c7d0bbc69130c49a4f9dec","modified":1708761961537},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image1.png","hash":"d8384a68912fe6409567ab037c3562740754cd71","modified":1708761961538},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image3.png","hash":"333b5592ea996d1fe9a097578425cc5cccefa9f5","modified":1708761961538},{"_id":"source/_posts/CodeIgniter安裝Swagger/edit.png","hash":"713220eed1ad64b7d9df89ed8bd453ea2f5a1496","modified":1708761961540},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image2.png","hash":"6147547c520cafb3c434fc4e0d6d2ea7b40a4a3d","modified":1708761961538},{"_id":"source/_posts/CodeIgniter安裝Swagger/dir.png","hash":"770bafe9bb864e645a303a3357138c16a29005d0","modified":1708761961539},{"_id":"source/_posts/CodeIgniter安裝Swagger/show.png","hash":"0577721c1499bd427cc4cf94885eb0644adbb3b2","modified":1708761961540},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/services_msc.png","hash":"0020d162b57ca496d0d145ac3914a8d21849f785","modified":1708761961541},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/mongodb_內容.png","hash":"606cfb9d2a54d8af907bc1120430f5843b3e71be","modified":1708761961540},{"_id":"source/_posts/Word-新增快捷建/自訂鍵盤.png","hash":"22d2867127db6f962a971402c35a4075fbe1f1d5","modified":1708761961541},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/建立新模擬器.jpg","hash":"bcf039a2e2d4f05a751c69c1b159ef2b9d5d38af","modified":1708761961550},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/選擇作業系統版本.jpg","hash":"f0d5531cddce12d0fd8bb8f74cd2f5b739a09509","modified":1708761961551},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/建立新硬體外型.jpg","hash":"40780d9594c25864868a8558258cbedc5007de69","modified":1708761961550},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/硬體規格.jpg","hash":"00eec5d8caf3d4429cbc8ba83f3a6da65899ff52","modified":1708761961550},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/模擬器完成.jpg","hash":"723c32202eba7f177b20992246913a96eafd8e15","modified":1708761961550},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/選擇硬體裝置.jpg","hash":"2a277a2ed9464dde34512812dcdfc32b821ad309","modified":1708761961551},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE1.png","hash":"13ae6bdc49ec47915639a0e5039387247324c75e","modified":1708761961551},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE2.png","hash":"0df62ca2aae53db8ccacea5af1caaf23eb547339","modified":1708761961551},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE3.png","hash":"6cc964e346d9b188d8dceba349da90e18dab6361","modified":1708761961552},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF1.png","hash":"55b1860ac5827aa6968ea24fa6d0d5ccfc269eb0","modified":1708761961552},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF2.png","hash":"deefb17a87679b3c2879ed772040a2bc7f55f9eb","modified":1708761961552},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF_entities.png","hash":"57e639be3c3bc632edb0afa1dc1ffd11ff3853dc","modified":1708761961552},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents1.png","hash":"cb78150e4054e12bfd56884dfe1272ef2eafee11","modified":1708761961559},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents2.png","hash":"794a9d9667988159f6ecd8dab62d073fd76ec9c6","modified":1708761961559},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents3.png","hash":"06ddfadaa4b8ca895953420ae86c99740bec771b","modified":1708761961559},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents5.png","hash":"2d28216cc1b40bc136d625fa3bba8b5852fab532","modified":1708761961560},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents4.png","hash":"65aaa70bf689780e1c31704c32d4dae5c7eb9f42","modified":1708761961559},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Plans2.png","hash":"76860b08afd66d05e2afb6a7c8637dbbbf3d835b","modified":1708761961560},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Plans1.png","hash":"361fca057b4d0dbc13562b62d86efaa664f00753","modified":1708761961560},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Test1.png","hash":"31edc5c66fe18dbdcb5d32d219d7bc51ba61f3c8","modified":1708761961560},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Test2.png","hash":"1b80bfc33bdebe33f3761f4d15fc4551db2789a0","modified":1708761961561},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/concepts1.png","hash":"9b2e868930e6fff207a2d71d2fef35188c9f95dc","modified":1708761961561},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/concepts2.png","hash":"6b4b0513857e4de26427cd1099052b72ce97031e","modified":1708761961561},{"_id":"source/_posts/鐵人賽-完賽心得.md","hash":"1c55a09fff71772ddac54f48a16c161f7c62ed32","modified":1708761961711},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/console_config.png","hash":"cd0ef9371942a330fb5210b9db13ee1e9714a5c1","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/flow.jpg","hash":"8d2d8e643249e023995ab953e9661478d042a20c","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/info.png","hash":"3d45e3e35d7caa32f1d4ddfdfd58aba0f7d18e16","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/input_output_contexts.jpg","hash":"6a1205ef518cbe9ec056f281fd9913b6fc842e70","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/input_output_contexts.xml","hash":"e9dbcc26a08120bd6996cf713fa5ca39f33e8d69","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/plan_graph.png","hash":"7ae86535571e0088e0f10b9153fa7a7e9035cb3d","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/project_info.png","hash":"2ce8cbe93734b68b68144cb5a0a0fdfc791d7292","modified":1708761961563},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/activity_uuid.png","hash":"c8144be937cd63ce39d494ed574465824af50906","modified":1708761961571},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/publish.png","hash":"e958e6f0aef3f114dec283b84e70dc941ac583e7","modified":1708761961563},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/flow.xml","hash":"678d5d66c61a6d5bbf6f7598cae10c59874e518e","modified":1708761961562},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/all_uuid.png","hash":"cf6e47543e66dca0a5d09be615d785d4bf2fa368","modified":1708761961572},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/launch_activity.png","hash":"7aedc39de75519249a4cf49609638b6a62281b59","modified":1708761961579},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/manifest_uuid.png","hash":"616695fd2f34ff62f7d92770a1cb98dbb27ea8cd","modified":1708761961579},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/project_info.png","hash":"2ce8cbe93734b68b68144cb5a0a0fdfc791d7292","modified":1708761961579},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Plans2.png","hash":"aef8a217a6ae366db6b33d9e5523c6df91f067b3","modified":1708761961553},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Plans1.png","hash":"af1d57bc200c90bdd5c7d15a91004ef36910905e","modified":1708761961553},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled2.png","hash":"1ceb216c76b12bc107fba01d7db94220a9aa66da","modified":1708761961555},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled.png","hash":"e009c2295595327f762a70dd976d6148e44e5e2e","modified":1708761961554},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled4.png","hash":"9d3cae68500903114e6b5093440e2ca54a2663ac","modified":1708761961555},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled3.png","hash":"94bbce2a105ee5ab27a6d50ecfddf6756613602f","modified":1708761961555},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled7.png","hash":"18f772dca98626aadd33f93a592f23484d24dfbc","modified":1708761961556},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled8.png","hash":"a23179df53d7127b7a9275a8714a72b675e555f3","modified":1708761961556},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled5.png","hash":"021b95b3f7d62ba2eb590657ac85d7491fc6c967","modified":1708761961556},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled6.png","hash":"f6cdf09aa684da7f5e5b6ee31593b5dd3e0901cb","modified":1708761961556},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/TTS.png","hash":"880d9a28798ac5a415179196e1b228a31ced2051","modified":1708761961560},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/info.png","hash":"616b3bc36662df4aa79a903197f0f8eaaec00def","modified":1708761961607},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB4.png","hash":"b9fe173e816c8a86b6ef27e1d47f03f7fe515f90","modified":1708761961584},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans1.png","hash":"ebcec8b1d4cf03942d6148b46e0f6c60b8a984d2","modified":1708761961607},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans3.png","hash":"72fc1ca8a00e28553eb3998b75ce5e3d6eeae330","modified":1708761961607},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans2.png","hash":"3a0d5c9d05f7f688cdf7bc62ba199c36b31e9c8e","modified":1708761961607},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/next_tag.png","hash":"95322d89c686ed9cd6e96f74b862a258021dd363","modified":1708761961615},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/no_next.png","hash":"d68f19c3ed9fbe0e9cd3b08423c9177e159b6fd7","modified":1708761961615},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/next_page.png","hash":"918788f1f3c551310e5c48e7167a58d2e63ead19","modified":1708761961615},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/get_file.png","hash":"f4cf548499d4398e345c378dbeb418f521352a1b","modified":1708761961623},{"_id":"source/_posts/按鈕監聽器/image.png","hash":"76f887bfb7d12d1770b07f8a3d70e2aa49796094","modified":1708761961613},{"_id":"source/_posts/第一個-Kotlin-專案/image12.png","hash":"ec3cd8dbe2d98ad2a66f6c823b48a27e968efe49","modified":1708761961641},{"_id":"source/_posts/第一個-Kotlin-專案/image6.png","hash":"db379d46e546cfa38322e42b7bf92cc81771ed8b","modified":1708761961647},{"_id":"source/_posts/第一個-Kotlin-專案/image8.png","hash":"829269e66058a48c04e3e61e99946a65457c32e8","modified":1708761961648},{"_id":"source/_posts/第一個-Kotlin-專案/image9.png","hash":"9ff6b64fda1ee2e814f91bce898cb213255ac862","modified":1708761961648},{"_id":"source/_posts/聊天機器人的分類與比較/pepper.png","hash":"6a74ef7bfb643dca6d784c2906a26b6d5a8cb2e1","modified":1708761961653},{"_id":"source/_posts/第一個-Kotlin-專案/image7.png","hash":"e124e958c17bc0cf7960c1e0d689ba52386c899b","modified":1708761961648},{"_id":"source/_posts/結論-總整理與建議/摘要心智圖.png","hash":"3cd31c67bfdc25d565e1177dd11f9a285c98f3c1","modified":1708761961649},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/餘弦相似性二維示意圖.png","hash":"512ea74af1449a9328773c01fa102a12b462d4ce","modified":1708761961671},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/未使用網路原因.png","hash":"7c8391bfbc343a9c7de840b405095856d1a9138b","modified":1708761961652},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/不識字人口.png","hash":"b45ba75df9144a880aca0f1b9f5d12a5c88023cf","modified":1708761961651},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula.png","hash":"ed541df2c45629efdde6ba535ae56a748f5ab7e6","modified":1708761961683},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula1.png","hash":"5a7dc3dfe420463ef8e07b0913a066963e1bd089","modified":1708761961683},{"_id":"source/_posts/語料庫模型-05-實體對應/部分實體對應截圖.png","hash":"7d1fadd043d2e527252689c030482d8650f5d552","modified":1708761961682},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula2.png","hash":"9ae2e0244608cd168ac12bbd4f93ca946a85b2ee","modified":1708761961683},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/df.png","hash":"f1e967a7d5bdc59780d945a02362b71682de8076","modified":1708761961683},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/idf.png","hash":"770f784fd0fac67a0fffc819e55b9023c13f57c9","modified":1708761961684},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/log.png","hash":"7371abc45825066d9f7a490d77aa748f4724f76d","modified":1708761961684},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/示意圖.png","hash":"47a10707dcb1ce16385789137ebe6be5ff896381","modified":1708761961685},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/比較.png","hash":"bd98224a162daffc339cc1d4c97d723dd4dc1828","modified":1708761961696},{"_id":"source/_posts/語料庫模型-08-繪製語料庫模型Heatmap圖/tfidf_matrix.png","hash":"324f1f2ad06aa004736efffe1c2cda3748d59a80","modified":1708761961699},{"_id":"source/_posts/語料庫模型-09-回饋機制/359.png","hash":"4b3413b319600a620aabfc148aad179c36a6bd2b","modified":1708761961700},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/儲存到個人雲端.png","hash":"be3763ed28a1d5f558269b30156330009e20b66a","modified":1708761961706},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/出現這個畫面就算成功了.png","hash":"41a065d4649290d23e31f629217ecf592db4aa62","modified":1708761961707},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/切換帳號.png","hash":"60fdd3028f9082d0126c182f8af17c43741584e3","modified":1708761961707},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/名字改一下.png","hash":"43487c9fc88512e98033c9a377bb2c6010d45d5f","modified":1708761961707},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/匯出筆記本.png","hash":"a61a59ad5a27fe2d6d7b46ce5480eff2323bea93","modified":1708761961707},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/需要兩個帳號.png","hash":"9f4409df0c88150736139299436088966406cf90","modified":1708761961708},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/成功出現在雲端.png","hash":"1c563f51a6bd6df018fa1f54f1c577417431eb27","modified":1708761961708},{"_id":"source/_posts/逆向工程-反編譯APK/classes-dex2jar.png","hash":"1ac85b81269b4f2cc0039b79c286cfa9d62ce92e","modified":1708761961708},{"_id":"source/_posts/逆向工程-反編譯APK/classes.png","hash":"5968d353d6da280deab514d68162b3907495f2cc","modified":1708761961709},{"_id":"source/_posts/長照小幫手-系統架構簡介/系統流程.png","hash":"9f91e8806d18670770507756c7452cd5cbdaf83a","modified":1708761961714},{"_id":"source/_posts/逆向工程-反編譯APK/open-file.png","hash":"a4268fc62b1fd7c7c8cc465e210f6757654d3e95","modified":1708761961709},{"_id":"source/_posts/聊天機器人的分類與比較/zenbo.png","hash":"8310609effe2aacb28cb3f0f09a3f9ec01fdb22b","modified":1708761961653},{"_id":"source/_posts/ADB-在你的手機上下指令/image1.png","hash":"845c2d1dfa37e4536cb35757870631e4287f7a5d","modified":1708761961524},{"_id":"source/_posts/逆向工程-反編譯APK/jd-gui.png","hash":"2e38feab78fbef6b1c7307845236961c1b6e746a","modified":1708761961709},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/架構.png","hash":"6e8fe982f36c0d13d164189c5f4f315e1e7fc533","modified":1708761961533},{"_id":"source/_posts/ADB-在你的手機上下指令/image2.png","hash":"e4f699bf0ae35f9e085609cb475f901d0442261b","modified":1708761961524},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image4.png","hash":"ef6bd196d60ca3c33f0b4e1e88ec9a86368171c2","modified":1708761961538},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/服務.png","hash":"79cb24e37cfa0673c7863fb79b68aa2997c79976","modified":1708761961541},{"_id":"source/_posts/Workshop記錄-Volley與API/KbWN5Kh.png","hash":"557a4ddd3e6123d2fa040e7c0011109da6600cdb","modified":1708761961545},{"_id":"source/_posts/Workshop記錄-Volley與API/DQqIxdO.png","hash":"ee947f39c1ac3660547bef480c850e920d8b8066","modified":1708761961544},{"_id":"source/_posts/Workshop記錄-Volley與API/8azZ7hm.png","hash":"b39fe733683b8b5d748a782d53978dded66b7883","modified":1708761961543},{"_id":"source/_posts/Workshop記錄-Volley與API/Z1s0ujZ.png","hash":"3dc747e6ca5f7caa8f176edc3ab6630363e0af24","modified":1708761961546},{"_id":"source/_posts/Workshop記錄-Volley與API/x4k4a8r.png","hash":"a16aa9e8485d99de0d3516e14a0c5b4c955cb2ed","modified":1708761961548},{"_id":"source/_posts/Workshop記錄-Volley與API/qqFqCG4.png","hash":"2634c12a056887c01adeb07f8aedd1d458656ec9","modified":1708761961547},{"_id":"source/_posts/Zenbo開發系列-01-後蓋打開方式、偵錯USB孔位置/Zenbo頭上有USB孔.jpg","hash":"972bab596399d25c2f4842357f8f1da4c0b70724","modified":1708761961549},{"_id":"source/_posts/Workshop記錄-Volley與API/wUXkrzO.png","hash":"654897d628d4337f6ca7f6c9868814497195b98a","modified":1708761961548},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/就是平板.jpg","hash":"e3a22524b0d1c87e155d1ef861e7a4945cb101fc","modified":1708761961550},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF比較強大.png","hash":"9d8576b3f60fa891101c6da7168b591966a37461","modified":1708761961553},{"_id":"source/_posts/Workshop記錄-Volley與API/K8ldhLr.png","hash":"5c7df021814fb8b829a012b34acc56f1d440052f","modified":1708761961545},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled1.png","hash":"0a88071f4ad05c0d1aa925b34351fee7c659a9c5","modified":1708761961555},{"_id":"source/_posts/Workshop記錄-Volley與API/rwp2EGF.png","hash":"0acb8e37b6539d64ac01af57308c4a1444eaf8b5","modified":1708761961548},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB2.png","hash":"1e718605f6027475b168f42a0d2a17e046e7edb6","modified":1708761961583},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/get_answer.png","hash":"6eadfb801ac0b3b18727acfe6c73af8ce2008c73","modified":1708761961615},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/questions_src.png","hash":"2d8471747081e28a13d24a9b19626e705d1ad1ba","modified":1708761961619},{"_id":"source/_posts/第一個-Kotlin-專案/image1.png","hash":"8e4e979e9c6af0073eae5f74791ae0f88bef55fe","modified":1708761961640},{"_id":"source/_posts/第一個-Kotlin-專案/image11.png","hash":"724e0d96a036c2fa86cd22c7bc49aef5f7d4e009","modified":1708761961641},{"_id":"source/_posts/第一個-Kotlin-專案/image10.png","hash":"0d5bcf99871620f224604949635fdd5e5ca2ff83","modified":1708761961640},{"_id":"source/_posts/第一個-Kotlin-專案/image.png","hash":"968ba191c376b300fd3e3f3330dad2c3d9285983","modified":1708761961635},{"_id":"source/_posts/第一個-Kotlin-專案/image3.png","hash":"03555088953119d88c3dfd2b370e574839db2568","modified":1708761961644},{"_id":"source/_posts/第一個-Kotlin-專案/image13.png","hash":"ce4953f4d5767be0e1240767de4aa0288b413ace","modified":1708761961643},{"_id":"source/_posts/第一個-Kotlin-專案/image5.png","hash":"a1053ac61be8049ff0c6eeab330b3d103158cd07","modified":1708761961647},{"_id":"source/_posts/聊天機器人的分類與比較/平台型聊天機器人.png","hash":"f0bccb989e47e3224ffac3f15de40ffd4da0aad7","modified":1708761961657},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/長者該如何取得長照資訊.png","hash":"198deb041d7827c5005840b73b717ad35fd30300","modified":1708761961652},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/人口老化.png","hash":"ac0709c877a044bf9b0ecafef8b79f99e4bf7e2c","modified":1708761961652},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/why.jpg","hash":"41113ab73d16f332e3cd5bb1dc7204ef67923276","modified":1708761961677},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/tf.png","hash":"ca418a823ac0e8980aa830c93f529c1acad36e5b","modified":1708761961684},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/tf_.png","hash":"909deb8069b0fbcce0b19dbe0ae3a25ea8b142fa","modified":1708761961685},{"_id":"source/_posts/語料庫模型-08-繪製語料庫模型Heatmap圖/category3.png","hash":"eaba583afc4ea5ee96e72821ceae1b3e4d97c906","modified":1708761961699},{"_id":"source/_posts/語料庫模型-09-回饋機制/image26.png","hash":"20f352727cfda562691d51b49f4cec015931552d","modified":1708761961705},{"_id":"source/_posts/語料庫模型-09-回饋機制/回饋機制_log.png","hash":"a02a66756b39e61cb02c2bbba33a4cc32b61c8e0","modified":1708761961705},{"_id":"source/_posts/語料庫模型-09-回饋機制/部分問答集截圖.png","hash":"0654de60d017a80435a90722fadeda081beb8e6b","modified":1708761961705},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/category3.png","hash":"eaba583afc4ea5ee96e72821ceae1b3e4d97c906","modified":1708761961671},{"_id":"source/_posts/ADB-在你的手機上下指令/image3.png","hash":"b9ae8f2144ff8cfae1058cff1cc6ea3e99b91c1a","modified":1708761961525},{"_id":"source/_posts/Android-APP-02-界面設計/img1.png","hash":"e8756a08b28f933f0ef3af90b23230523f47d4e5","modified":1708761961534},{"_id":"source/_posts/Workshop記錄-Volley與API/UeTe6ah.png","hash":"fae24f379e37fa6ca890956a9bc6bb5514920e7f","modified":1708761961546},{"_id":"source/_posts/Android-APP-02-界面設計/img2.png","hash":"fa03573d625c03eb439431b45d8b769263f084a6","modified":1708761961535},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB1.png","hash":"1308befdf7432318f0130afb0bc7cf8373b7e0d0","modified":1708761961582},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/csv_text.png","hash":"fbc1476527675229610e5c9fee03e19c4f86184c","modified":1708761961622},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/source.jpg","hash":"a5add0370eb72d84286a30ad6829b04ad94123e4","modified":1708761961623},{"_id":"source/_posts/第一個-Kotlin-專案/image2.png","hash":"d41882d62b84c9275b58b9ec266438ba3a48292d","modified":1708761961643},{"_id":"source/_posts/第一個-Kotlin-專案/image4.png","hash":"ba4d449ff593c52dcb1f70d0e3b37da57ac1f7c9","modified":1708761961647},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_TFIDF.png","hash":"1dae1053a5870ac35439915539d7d95591d4a8cf","modified":1708761961668},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/chart.jpg","hash":"7cd23d96a489f31b764d4eaf1d811f81f3c97945","modified":1708761961676},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/AzureKmeans與人工分類比較.jpg","hash":"ec42cbaf4f7e81b02773f42acdba4b466c58a1ae","modified":1708761961675},{"_id":"source/_posts/語料庫模型-09-回饋機制/flow.jpg","hash":"e843f836d2127f6d2940d6a5958f548dcb18e42b","modified":1708761961701},{"_id":"source/_posts/逆向工程-反編譯APK/result.png","hash":"9e8175f754c7babca1349cf1747dcbc9096a4513","modified":1708761961710},{"_id":"source/_posts/逆向工程-反編譯APK/unzip.png","hash":"6aa25213c07dbafa02884caed49a2f793a499bc8","modified":1708761961711},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/mvvm.jpg","hash":"c41e6afd26d32615211592bd9737025ef63e977b","modified":1708761961532},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB3.png","hash":"3c6266d71a3d0f2402a151805d92bfaa1f69842a","modified":1708761961584},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/qa_list.png","hash":"305c01437cd54240a789a2eeb1b444a041590d6c","modified":1708761961617},{"_id":"source/_posts/結論-總整理與建議/鐵人賽.jpg","hash":"b23f7a1f5cd689abc2aab2525825ef4f5f9e879f","modified":1708761961650},{"_id":"source/_posts/語料庫模型-09-回饋機制/image25.png","hash":"6dd8d5e8aee6cf7fd487ddd36bd17efbc353a8f2","modified":1708761961703},{"_id":"source/_posts/Workshop記錄-Volley與API/5IqdECc.png","hash":"14fbd1cb74dfc806959005eb0877804e073f0ec6","modified":1708761961543},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled9.png","hash":"09ac8baf4939c2d99af078c47bea357ec403bc8e","modified":1708761961559},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/csv_excel.png","hash":"97de25b9ace6d1a964801c3060bb4960eceacec7","modified":1708761961622},{"_id":"source/_posts/語料庫模型-03-語料讀取-資料格式轉換/csv_excel.png","hash":"97de25b9ace6d1a964801c3060bb4960eceacec7","modified":1708761961677},{"_id":"source/_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/長照斷詞.jpg","hash":"11492d2e00f9e176fa75e137f1cf67d768a5d242","modified":1708761961682},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/questions_src.jpg","hash":"9a39701c0c1f00194dc55661083b31f68d1e862f","modified":1708761961619},{"_id":"source/_posts/API-使用-PHP-執行-Python-腳本/系統架構.png","hash":"bba6c98dc29073bddac27dbff2469bb0cabfb0cb","modified":1708761961530},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB.png","hash":"0bbd393e5a6cfc8c46f3b2d17c02903c1b5dba6b","modified":1708761961581},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/AzureKmeans_統整.png","hash":"24c7366038aa506c7eb82293cdb9fcd863636550","modified":1708761961674},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_WordSet.png","hash":"d13ee4dceb30a2ebf71b1013477f361b17adcf3e","modified":1708761961671},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/餘弦相似度.png","hash":"8852bfd1cd85a2e50dcd2443680b0b9fd79693d8","modified":1708761961699},{"_id":"source/_posts/Android-APP-04-MVVM-Repository與API串接/flow.jpg","hash":"fe20902a1ef5ae231ac5f6387e5cded97a6cfb7f","modified":1708761961537},{"_id":"source/_posts/聊天機器人的分類與比較/實體型聊天機器人.png","hash":"0d2e03f5d5b3f33573c78239d5eb26379ea3ecb6","modified":1708761961657},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"c352385539c77d3599017304a2e0186983ee254e","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"9f18decb2c1220bc4d1c60d06acafdf18fdc4cda","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/package.json","hash":"20e919b83feca9fab323eabc72fe9146de1ea455","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"55b38c7617c24bdc27c9de6cf39f4b191d154fb8","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1708761961236},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1708761961233},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1708761961232},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"ba06ad089d01b45b217249af338145881eab3e25","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"13e7badc036e989307069f65b179deb107012435","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1708761961233},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1708761961235},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1708761961250},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"2ffeac130c5309bc83b1e9b764dd23688c0cd7db","modified":1708761961255},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"99ab10d9aef1ee5ae5e8f3572ac0de25c3cc4416","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"454ed1fac07be972c7ec911092f0995cd925aab3","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1708761961243},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"1084e38df2f05a2f58df7f987e660775e9be1bf2","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1708761961237},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"cc1a11190b1a55ae8d4252d296803bc19db90bc5","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1708761961238},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5994278b3900828fd02d418f99f6c3b4e88e27a9","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"1c3b2ef170226f66fda7aac486ed0027991cc4be","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1708761961239},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1708761961253},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1708761961241},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"13b3301aa9b613975630502d93e6ae82c5293aa8","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1708761961242},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1708761961254},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1708761961254},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"8d7ad58c9086161b05843aa7e44973148be33611","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1708761961240},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1708761961248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1708761961249},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1708761961252},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1708761961252},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1708761961252},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1708761961252},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1708761961253},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1708761961254},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1708761961254},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1708761961254},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1708761961255},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1708761961255},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1708761961255},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1708761961251},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"2ca4dea5e7785c9b77566d95cabf896d20a42741","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1708761961244},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4f482514230c941c9475e1272188e53a54975463","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1708761961246},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1708761961245},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1708761961247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1708761961247},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_DF+IDF.png","hash":"42f5176b13c80230973b36d6440de363f1fead22","modified":1708761961661},{"_id":"source/_posts/長照小幫手-系統架構簡介/系統架構.png","hash":"dedb6ff1b25a2579f73aeba10192cda43e95c3d2","modified":1708761961714},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1708761961240},{"_id":"source/_posts/Apple-Silicon-晶片不支援-ADB-ARM/err_msg.jpeg","hash":"eb8e2f46cce7b494f0322cecb34f0ec34daa3885","modified":1708777674059},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/project_register.jpg","hash":"2739387667b8ef06397837613c4fbaec5a7e3db0","modified":1708761961609},{"_id":"source/_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/斷詞與TFIDF.jpg","hash":"730086c454820339a42219cfd8399ad3386f6fad","modified":1708761961681},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/save.jpg","hash":"4010de90b1fc50bd54a9859963b0c8fa3128a678","modified":1708761961612},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/歐式距離.png","hash":"025b0e66f860afea48aa405dedee4a0fca462c38","modified":1708761961696},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/formula.png","hash":"f8cd3477d32fd881479a5fd1f18295bdfc9f2192","modified":1708761961690},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_TF.png","hash":"c0d9bf1e9b06c3b2c9c4af207f74800d2373f72b","modified":1708761961666},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/Zenbo-Scratch-語句聽不懂問題的解決方式.pdf","hash":"208c546824e9f110c0659620fb2a5aa17d9102dc","modified":1708761961571},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/dstools.png","hash":"54d4f18a508f51e0bef5123b1ec1d4a9e4aac32f","modified":1708761961578},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/Zenbo-App-Builder-加關鍵字輔助按鈕.zba","hash":"bc9a58b0cc55d455b6f404412749ce472bee3bd5","modified":1708761961606}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2021-08-07T07:10:31.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-07 15:10:31\ntype: \"tags\"\n---\n","updated":"2024-02-24T08:06:01.714Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clt03myi80000k0jf71mzb8lq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ADB - 在你的手機上下指令","date":"2017-10-25T17:20:06.000Z","_content":"\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=432](https://blog.cmrdb.cs.pu.edu.tw/?p=432)\n\n相信大家或多或少都知道Android是一個基於Linux開發的作業系統，既然是Linux，你有沒有想過要在你的手機上下指令呢?\n\n# ADB\n\nADB(Android Debug Bridge)是一個可以讓你和裝置(虛擬機或實體手機)溝通的工具，透過這個工具，你可以以指令的方式直接在電腦與手機間傳輸檔案、安裝/移除應用程式、讀取手機的SQLite資料庫…等。\n<!-- more -->\n\n# 開啟偵錯模式 (使用虛擬機可以跳過)\n首先，要開啟**開發人員選項**，手機的開發人員選項預設是關閉的，開啟的方式也因廠牌和型號有些微差異，以 SAMSUNG A5 為例:\n 1. 設定 > 關於裝置 > 版本號碼\n    連續按七下**版本號碼**，就會發現下方跳出提示訊息，說明你已經成功成為開發人員了!!\n    ![image1](image1.png)\n    回到上一頁後，就會發現多了一個選項!!\n    ![image2](image2.png)\n 2. 設定 > 開發人員選項 > USB偵錯 開啟\n     偵錯模式主要是用來研發，它可以用來複製電腦和手機間的數據\n     ![image3](image3.png)\n\n# 開啟ADB工具\n如果已經安裝好Android Studio，ADB的預設路徑在\n``` shell\nC:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools\n```\n特別注意，`AppData`資料夾預設是隱藏的，所以在一般情況下看不到的喔!\n1. 將手機接上電腦 / 開啟虛擬機\n1. 開啟cmd\n2. 移到上面的目錄\n    ```shell\n    cd C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools\n    ```\n3. 查詢可用的指令\n    ```shell\n    adb\n    ```\n4. 查詢已連接的裝置\n    ```shell\n    adb devices\n    ```\n    ![image4](image4.png)\n5. 進入手機\n    ```shell\n    adb shell\n    ```\n    ![image5](image5.png)\n\n接下來你可以在裡面到處逛逛，你會發現當你想對一些較重要的檔案存取時，會顯示Permission denied，這表示你權限不足。一般沒有root過的手機是不會有最高權限的。如果想嘗試，可以試試開一些版本較低的虛擬機，有些預設有root權限。\n\n# ADB指令參考\n\n- 列出目錄/檔案\n    ```shell\n    ls\n    ```\n- 移動\n    ```shell\n    cd [路徑]\n    ```\n- 查看目前所在路徑\n    ```shell\n    pwd\n    ```\n- 查看檔案內容\n    ```shell\n    cat [檔案名稱]\n    ```\n- 新增資料夾\n    ```shell\n    mkdir [資料夾名稱]\n    ```\n- 查看裝置cpu和內存占用情況\n    ```shell\n    top\n    ```\n    \n# 補充\n\n這邊列出幾個大家可能比較有興趣的路徑\n\n- 手機內建的App\n```\n/system/app/\n```\n- 可用的指令\n```\n/system/bin/\n```\n- SDCard\n```\n/sdcard/\n```\n- 使用者的檔案、照片\n```\n/storage/sdcard0/\n```\n","source":"_posts/ADB-在你的手機上下指令.md","raw":"---\ntitle: ADB - 在你的手機上下指令\ndate: 2017-10-26 01:20:06\ntags:\n- Android\n- ADB\n- 資安\n- 行雲部落格\n---\n\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=432](https://blog.cmrdb.cs.pu.edu.tw/?p=432)\n\n相信大家或多或少都知道Android是一個基於Linux開發的作業系統，既然是Linux，你有沒有想過要在你的手機上下指令呢?\n\n# ADB\n\nADB(Android Debug Bridge)是一個可以讓你和裝置(虛擬機或實體手機)溝通的工具，透過這個工具，你可以以指令的方式直接在電腦與手機間傳輸檔案、安裝/移除應用程式、讀取手機的SQLite資料庫…等。\n<!-- more -->\n\n# 開啟偵錯模式 (使用虛擬機可以跳過)\n首先，要開啟**開發人員選項**，手機的開發人員選項預設是關閉的，開啟的方式也因廠牌和型號有些微差異，以 SAMSUNG A5 為例:\n 1. 設定 > 關於裝置 > 版本號碼\n    連續按七下**版本號碼**，就會發現下方跳出提示訊息，說明你已經成功成為開發人員了!!\n    ![image1](image1.png)\n    回到上一頁後，就會發現多了一個選項!!\n    ![image2](image2.png)\n 2. 設定 > 開發人員選項 > USB偵錯 開啟\n     偵錯模式主要是用來研發，它可以用來複製電腦和手機間的數據\n     ![image3](image3.png)\n\n# 開啟ADB工具\n如果已經安裝好Android Studio，ADB的預設路徑在\n``` shell\nC:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools\n```\n特別注意，`AppData`資料夾預設是隱藏的，所以在一般情況下看不到的喔!\n1. 將手機接上電腦 / 開啟虛擬機\n1. 開啟cmd\n2. 移到上面的目錄\n    ```shell\n    cd C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools\n    ```\n3. 查詢可用的指令\n    ```shell\n    adb\n    ```\n4. 查詢已連接的裝置\n    ```shell\n    adb devices\n    ```\n    ![image4](image4.png)\n5. 進入手機\n    ```shell\n    adb shell\n    ```\n    ![image5](image5.png)\n\n接下來你可以在裡面到處逛逛，你會發現當你想對一些較重要的檔案存取時，會顯示Permission denied，這表示你權限不足。一般沒有root過的手機是不會有最高權限的。如果想嘗試，可以試試開一些版本較低的虛擬機，有些預設有root權限。\n\n# ADB指令參考\n\n- 列出目錄/檔案\n    ```shell\n    ls\n    ```\n- 移動\n    ```shell\n    cd [路徑]\n    ```\n- 查看目前所在路徑\n    ```shell\n    pwd\n    ```\n- 查看檔案內容\n    ```shell\n    cat [檔案名稱]\n    ```\n- 新增資料夾\n    ```shell\n    mkdir [資料夾名稱]\n    ```\n- 查看裝置cpu和內存占用情況\n    ```shell\n    top\n    ```\n    \n# 補充\n\n這邊列出幾個大家可能比較有興趣的路徑\n\n- 手機內建的App\n```\n/system/app/\n```\n- 可用的指令\n```\n/system/bin/\n```\n- SDCard\n```\n/sdcard/\n```\n- 使用者的檔案、照片\n```\n/storage/sdcard0/\n```\n","slug":"ADB-在你的手機上下指令","published":1,"updated":"2024-02-24T08:06:01.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myi90001k0jf54q89ino","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=432\">https://blog.cmrdb.cs.pu.edu.tw/?p=432</a></li>\n</ul>\n<p>相信大家或多或少都知道Android是一個基於Linux開發的作業系統，既然是Linux，你有沒有想過要在你的手機上下指令呢?</p>\n<h1 id=\"ADB\"><a href=\"#ADB\" class=\"headerlink\" title=\"ADB\"></a>ADB</h1><p>ADB(Android Debug Bridge)是一個可以讓你和裝置(虛擬機或實體手機)溝通的工具，透過這個工具，你可以以指令的方式直接在電腦與手機間傳輸檔案、安裝/移除應用程式、讀取手機的SQLite資料庫…等。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"開啟偵錯模式-使用虛擬機可以跳過\"><a href=\"#開啟偵錯模式-使用虛擬機可以跳過\" class=\"headerlink\" title=\"開啟偵錯模式 (使用虛擬機可以跳過)\"></a>開啟偵錯模式 (使用虛擬機可以跳過)</h1><p>首先，要開啟<strong>開發人員選項</strong>，手機的開發人員選項預設是關閉的，開啟的方式也因廠牌和型號有些微差異，以 SAMSUNG A5 為例:</p>\n<ol>\n<li>設定 &gt; 關於裝置 &gt; 版本號碼<br>連續按七下<strong>版本號碼</strong>，就會發現下方跳出提示訊息，說明你已經成功成為開發人員了!!<br><img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image1.png\" alt=\"image1\"><br>回到上一頁後，就會發現多了一個選項!!<br><img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image2.png\" alt=\"image2\"></li>\n<li>設定 &gt; 開發人員選項 &gt; USB偵錯 開啟<br> 偵錯模式主要是用來研發，它可以用來複製電腦和手機間的數據<br> <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image3.png\" alt=\"image3\"></li>\n</ol>\n<h1 id=\"開啟ADB工具\"><a href=\"#開啟ADB工具\" class=\"headerlink\" title=\"開啟ADB工具\"></a>開啟ADB工具</h1><p>如果已經安裝好Android Studio，ADB的預設路徑在</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools</span><br></pre></td></tr></table></figure>\n<p>特別注意，<code>AppData</code>資料夾預設是隱藏的，所以在一般情況下看不到的喔!</p>\n<ol>\n<li>將手機接上電腦 / 開啟虛擬機</li>\n<li>開啟cmd</li>\n<li>移到上面的目錄 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools</span><br></pre></td></tr></table></figure></li>\n<li>查詢可用的指令 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb</span><br></pre></td></tr></table></figure></li>\n<li>查詢已連接的裝置 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image4.png\" alt=\"image4\"></li>\n<li>進入手機 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell</span><br></pre></td></tr></table></figure>\n <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image5.png\" alt=\"image5\"></li>\n</ol>\n<p>接下來你可以在裡面到處逛逛，你會發現當你想對一些較重要的檔案存取時，會顯示Permission denied，這表示你權限不足。一般沒有root過的手機是不會有最高權限的。如果想嘗試，可以試試開一些版本較低的虛擬機，有些預設有root權限。</p>\n<h1 id=\"ADB指令參考\"><a href=\"#ADB指令參考\" class=\"headerlink\" title=\"ADB指令參考\"></a>ADB指令參考</h1><ul>\n<li>列出目錄/檔案  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br></pre></td></tr></table></figure></li>\n<li>移動  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [路徑]</span><br></pre></td></tr></table></figure></li>\n<li>查看目前所在路徑  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure></li>\n<li>查看檔案內容  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [檔案名稱]</span><br></pre></td></tr></table></figure></li>\n<li>新增資料夾  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [資料夾名稱]</span><br></pre></td></tr></table></figure></li>\n<li>查看裝置cpu和內存占用情況  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h1><p>這邊列出幾個大家可能比較有興趣的路徑</p>\n<ul>\n<li>手機內建的App<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;system&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>可用的指令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;system&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>SDCard<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;sdcard&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>使用者的檔案、照片<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;storage&#x2F;sdcard0&#x2F;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=432\">https://blog.cmrdb.cs.pu.edu.tw/?p=432</a></li>\n</ul>\n<p>相信大家或多或少都知道Android是一個基於Linux開發的作業系統，既然是Linux，你有沒有想過要在你的手機上下指令呢?</p>\n<h1 id=\"ADB\"><a href=\"#ADB\" class=\"headerlink\" title=\"ADB\"></a>ADB</h1><p>ADB(Android Debug Bridge)是一個可以讓你和裝置(虛擬機或實體手機)溝通的工具，透過這個工具，你可以以指令的方式直接在電腦與手機間傳輸檔案、安裝/移除應用程式、讀取手機的SQLite資料庫…等。</p>","more":"<h1 id=\"開啟偵錯模式-使用虛擬機可以跳過\"><a href=\"#開啟偵錯模式-使用虛擬機可以跳過\" class=\"headerlink\" title=\"開啟偵錯模式 (使用虛擬機可以跳過)\"></a>開啟偵錯模式 (使用虛擬機可以跳過)</h1><p>首先，要開啟<strong>開發人員選項</strong>，手機的開發人員選項預設是關閉的，開啟的方式也因廠牌和型號有些微差異，以 SAMSUNG A5 為例:</p>\n<ol>\n<li>設定 &gt; 關於裝置 &gt; 版本號碼<br>連續按七下<strong>版本號碼</strong>，就會發現下方跳出提示訊息，說明你已經成功成為開發人員了!!<br><img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image1.png\" alt=\"image1\"><br>回到上一頁後，就會發現多了一個選項!!<br><img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image2.png\" alt=\"image2\"></li>\n<li>設定 &gt; 開發人員選項 &gt; USB偵錯 開啟<br> 偵錯模式主要是用來研發，它可以用來複製電腦和手機間的數據<br> <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image3.png\" alt=\"image3\"></li>\n</ol>\n<h1 id=\"開啟ADB工具\"><a href=\"#開啟ADB工具\" class=\"headerlink\" title=\"開啟ADB工具\"></a>開啟ADB工具</h1><p>如果已經安裝好Android Studio，ADB的預設路徑在</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools</span><br></pre></td></tr></table></figure>\n<p>特別注意，<code>AppData</code>資料夾預設是隱藏的，所以在一般情況下看不到的喔!</p>\n<ol>\n<li>將手機接上電腦 / 開啟虛擬機</li>\n<li>開啟cmd</li>\n<li>移到上面的目錄 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\[使用者名稱]\\AppData\\Local\\Android\\sdk\\platform-tools</span><br></pre></td></tr></table></figure></li>\n<li>查詢可用的指令 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb</span><br></pre></td></tr></table></figure></li>\n<li>查詢已連接的裝置 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image4.png\" alt=\"image4\"></li>\n<li>進入手機 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell</span><br></pre></td></tr></table></figure>\n <img src=\"/2017/10/26/ADB-%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%89%8B%E6%A9%9F%E4%B8%8A%E4%B8%8B%E6%8C%87%E4%BB%A4/image5.png\" alt=\"image5\"></li>\n</ol>\n<p>接下來你可以在裡面到處逛逛，你會發現當你想對一些較重要的檔案存取時，會顯示Permission denied，這表示你權限不足。一般沒有root過的手機是不會有最高權限的。如果想嘗試，可以試試開一些版本較低的虛擬機，有些預設有root權限。</p>\n<h1 id=\"ADB指令參考\"><a href=\"#ADB指令參考\" class=\"headerlink\" title=\"ADB指令參考\"></a>ADB指令參考</h1><ul>\n<li>列出目錄/檔案  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br></pre></td></tr></table></figure></li>\n<li>移動  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [路徑]</span><br></pre></td></tr></table></figure></li>\n<li>查看目前所在路徑  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure></li>\n<li>查看檔案內容  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [檔案名稱]</span><br></pre></td></tr></table></figure></li>\n<li>新增資料夾  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [資料夾名稱]</span><br></pre></td></tr></table></figure></li>\n<li>查看裝置cpu和內存占用情況  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h1><p>這邊列出幾個大家可能比較有興趣的路徑</p>\n<ul>\n<li>手機內建的App<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;system&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>可用的指令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;system&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>SDCard<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;sdcard&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>使用者的檔案、照片<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;storage&#x2F;sdcard0&#x2F;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"[API] 使用 PHP 執行 Python 腳本","date":"2021-10-06T13:18:11.000Z","_content":"\n嗨! 昨天終於結束了語料庫模型建置的部分，再來就要建立 API 了。這個系統中我採用了一個比較特別的架構，伺服器是 Ubumtu + Apache + PHP，API 主要使用 PHP 撰寫，並由 PHP 去執行 Python 腳本(也就是前面建置的 TF-IDF 語料庫模型)，再回傳結果。可以參考下圖。\n<!-- more -->\n\n![系統架構](系統架構.png)\n\n其實 Python 也是可以寫後端的，但我缺少建置 Python 伺服器的經驗，期間我嘗試搭配 Python + Apache、用 Python 的框架建置服務，一直沒有成功。哀，這又是另一個走錯路的故事了。\n\n後來聽了朋友建議，採用一個比較像繞過問題的方式，使用 PHP + Apache 作為 API 端服務，PHP 去執行 Python 腳本。換句話說，就是把 PHP 當作是 Android 與 TF-IDF 語料庫之間的橋樑。不過，我覺得這不是一個最好的寫法。\n\n做都做了，還是要記錄一下啊，今天這篇就來介紹使用 PHP 執行 Python 腳本的方法吧。\n\n# 程式碼\n\n以編號 001 這支來說明\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php\n\n```php\n<?php\n/**\n * 001 [POST] /Chatbot/getAnswer.php\n * 以使用者輸入的語句查詢，回傳資料集中與輸入最相似的 3 筆問答組合。\n * \n * q: 使用者輸入的問句\n * category_id: 使用者選擇的類別編號\n */\nheader('Content-Type: application/json; charset=utf-8');\n$q = $_POST['q'];\n$category_id = $_POST['category_id'];\n$output = exec('/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/main.py ' . $q . ' ' . $category_id . ' 2>/home/yr/PycharmProjects/nlp/output/log.txt', $output2);\nprint($output);\n```\n\n首先，會收兩個 Post 參數 `$_POST['q']`、`$_POST['category_id']` 執行 Python 腳本時，再把參數帶進去。\n\n`$output` 會得到 Python 印出的 JSON 內容，再印出來給 Android 端。\n\n簡略一點，就是這個樣子。因為我用的是 Pycharm 的 venv 所以路徑要複雜一點。\n```shell\npython3 main.py \"我想申請長照\" 2 2>log.txt\n```\n> `2>log.txt`: 把標準錯誤寫到檔案中\n\n# API\n\n本系統總共有 3 支 API: getAnswer、addAdjustment、getCategories。\n各自的詳細說明與程式碼在這: https://gitlab.com/graduate_lab415/chatbot-api\n","source":"_posts/API-使用-PHP-執行-Python-腳本.md","raw":"---\ntitle: '[API] 使用 PHP 執行 Python 腳本'\ndate: 2021-10-06 21:18:11\ntags:\n- 13th鐵人賽\n- PHP\n- Python\n- API\n---\n\n嗨! 昨天終於結束了語料庫模型建置的部分，再來就要建立 API 了。這個系統中我採用了一個比較特別的架構，伺服器是 Ubumtu + Apache + PHP，API 主要使用 PHP 撰寫，並由 PHP 去執行 Python 腳本(也就是前面建置的 TF-IDF 語料庫模型)，再回傳結果。可以參考下圖。\n<!-- more -->\n\n![系統架構](系統架構.png)\n\n其實 Python 也是可以寫後端的，但我缺少建置 Python 伺服器的經驗，期間我嘗試搭配 Python + Apache、用 Python 的框架建置服務，一直沒有成功。哀，這又是另一個走錯路的故事了。\n\n後來聽了朋友建議，採用一個比較像繞過問題的方式，使用 PHP + Apache 作為 API 端服務，PHP 去執行 Python 腳本。換句話說，就是把 PHP 當作是 Android 與 TF-IDF 語料庫之間的橋樑。不過，我覺得這不是一個最好的寫法。\n\n做都做了，還是要記錄一下啊，今天這篇就來介紹使用 PHP 執行 Python 腳本的方法吧。\n\n# 程式碼\n\n以編號 001 這支來說明\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php\n\n```php\n<?php\n/**\n * 001 [POST] /Chatbot/getAnswer.php\n * 以使用者輸入的語句查詢，回傳資料集中與輸入最相似的 3 筆問答組合。\n * \n * q: 使用者輸入的問句\n * category_id: 使用者選擇的類別編號\n */\nheader('Content-Type: application/json; charset=utf-8');\n$q = $_POST['q'];\n$category_id = $_POST['category_id'];\n$output = exec('/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/main.py ' . $q . ' ' . $category_id . ' 2>/home/yr/PycharmProjects/nlp/output/log.txt', $output2);\nprint($output);\n```\n\n首先，會收兩個 Post 參數 `$_POST['q']`、`$_POST['category_id']` 執行 Python 腳本時，再把參數帶進去。\n\n`$output` 會得到 Python 印出的 JSON 內容，再印出來給 Android 端。\n\n簡略一點，就是這個樣子。因為我用的是 Pycharm 的 venv 所以路徑要複雜一點。\n```shell\npython3 main.py \"我想申請長照\" 2 2>log.txt\n```\n> `2>log.txt`: 把標準錯誤寫到檔案中\n\n# API\n\n本系統總共有 3 支 API: getAnswer、addAdjustment、getCategories。\n各自的詳細說明與程式碼在這: https://gitlab.com/graduate_lab415/chatbot-api\n","slug":"API-使用-PHP-執行-Python-腳本","published":1,"updated":"2024-02-24T08:06:01.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myia0002k0jfbi0pblwm","content":"<p>嗨! 昨天終於結束了語料庫模型建置的部分，再來就要建立 API 了。這個系統中我採用了一個比較特別的架構，伺服器是 Ubumtu + Apache + PHP，API 主要使用 PHP 撰寫，並由 PHP 去執行 Python 腳本(也就是前面建置的 TF-IDF 語料庫模型)，再回傳結果。可以參考下圖。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/10/06/API-%E4%BD%BF%E7%94%A8-PHP-%E5%9F%B7%E8%A1%8C-Python-%E8%85%B3%E6%9C%AC/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B.png\" alt=\"系統架構\"></p>\n<p>其實 Python 也是可以寫後端的，但我缺少建置 Python 伺服器的經驗，期間我嘗試搭配 Python + Apache、用 Python 的框架建置服務，一直沒有成功。哀，這又是另一個走錯路的故事了。</p>\n<p>後來聽了朋友建議，採用一個比較像繞過問題的方式，使用 PHP + Apache 作為 API 端服務，PHP 去執行 Python 腳本。換句話說，就是把 PHP 當作是 Android 與 TF-IDF 語料庫之間的橋樑。不過，我覺得這不是一個最好的寫法。</p>\n<p>做都做了，還是要記錄一下啊，今天這篇就來介紹使用 PHP 執行 Python 腳本的方法吧。</p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>以編號 001 這支來說明<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php\">https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 001 [POST] /Chatbot/getAnswer.php</span></span><br><span class=\"line\"><span class=\"comment\"> * 以使用者輸入的語句查詢，回傳資料集中與輸入最相似的 3 筆問答組合。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * q: 使用者輸入的問句</span></span><br><span class=\"line\"><span class=\"comment\"> * category_id: 使用者選擇的類別編號</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">header(<span class=\"string\">&#x27;Content-Type: application/json; charset=utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$q</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;q&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$category_id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category_id&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$output</span> = exec(<span class=\"string\">&#x27;/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/main.py &#x27;</span> . <span class=\"variable\">$q</span> . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable\">$category_id</span> . <span class=\"string\">&#x27; 2&gt;/home/yr/PycharmProjects/nlp/output/log.txt&#x27;</span>, <span class=\"variable\">$output2</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"variable\">$output</span>);</span><br></pre></td></tr></table></figure>\n\n<p>首先，會收兩個 Post 參數 <code>$_POST[&#39;q&#39;]</code>、<code>$_POST[&#39;category_id&#39;]</code> 執行 Python 腳本時，再把參數帶進去。</p>\n<p><code>$output</code> 會得到 Python 印出的 JSON 內容，再印出來給 Android 端。</p>\n<p>簡略一點，就是這個樣子。因為我用的是 Pycharm 的 venv 所以路徑要複雜一點。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 main.py &quot;我想申請長照&quot; 2 2&gt;log.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>2&gt;log.txt</code>: 把標準錯誤寫到檔案中</p>\n</blockquote>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>本系統總共有 3 支 API: getAnswer、addAdjustment、getCategories。<br>各自的詳細說明與程式碼在這: <a href=\"https://gitlab.com/graduate_lab415/chatbot-api\">https://gitlab.com/graduate_lab415/chatbot-api</a></p>\n","site":{"data":{}},"excerpt":"<p>嗨! 昨天終於結束了語料庫模型建置的部分，再來就要建立 API 了。這個系統中我採用了一個比較特別的架構，伺服器是 Ubumtu + Apache + PHP，API 主要使用 PHP 撰寫，並由 PHP 去執行 Python 腳本(也就是前面建置的 TF-IDF 語料庫模型)，再回傳結果。可以參考下圖。</p>","more":"<p><img src=\"/2021/10/06/API-%E4%BD%BF%E7%94%A8-PHP-%E5%9F%B7%E8%A1%8C-Python-%E8%85%B3%E6%9C%AC/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B.png\" alt=\"系統架構\"></p>\n<p>其實 Python 也是可以寫後端的，但我缺少建置 Python 伺服器的經驗，期間我嘗試搭配 Python + Apache、用 Python 的框架建置服務，一直沒有成功。哀，這又是另一個走錯路的故事了。</p>\n<p>後來聽了朋友建議，採用一個比較像繞過問題的方式，使用 PHP + Apache 作為 API 端服務，PHP 去執行 Python 腳本。換句話說，就是把 PHP 當作是 Android 與 TF-IDF 語料庫之間的橋樑。不過，我覺得這不是一個最好的寫法。</p>\n<p>做都做了，還是要記錄一下啊，今天這篇就來介紹使用 PHP 執行 Python 腳本的方法吧。</p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>以編號 001 這支來說明<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php\">https://gitlab.com/graduate_lab415/chatbot-api/-/blob/master/getAnswer.php</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 001 [POST] /Chatbot/getAnswer.php</span></span><br><span class=\"line\"><span class=\"comment\"> * 以使用者輸入的語句查詢，回傳資料集中與輸入最相似的 3 筆問答組合。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * q: 使用者輸入的問句</span></span><br><span class=\"line\"><span class=\"comment\"> * category_id: 使用者選擇的類別編號</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">header(<span class=\"string\">&#x27;Content-Type: application/json; charset=utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$q</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;q&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$category_id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category_id&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$output</span> = exec(<span class=\"string\">&#x27;/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/main.py &#x27;</span> . <span class=\"variable\">$q</span> . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable\">$category_id</span> . <span class=\"string\">&#x27; 2&gt;/home/yr/PycharmProjects/nlp/output/log.txt&#x27;</span>, <span class=\"variable\">$output2</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"variable\">$output</span>);</span><br></pre></td></tr></table></figure>\n\n<p>首先，會收兩個 Post 參數 <code>$_POST[&#39;q&#39;]</code>、<code>$_POST[&#39;category_id&#39;]</code> 執行 Python 腳本時，再把參數帶進去。</p>\n<p><code>$output</code> 會得到 Python 印出的 JSON 內容，再印出來給 Android 端。</p>\n<p>簡略一點，就是這個樣子。因為我用的是 Pycharm 的 venv 所以路徑要複雜一點。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 main.py &quot;我想申請長照&quot; 2 2&gt;log.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>2&gt;log.txt</code>: 把標準錯誤寫到檔案中</p>\n</blockquote>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>本系統總共有 3 支 API: getAnswer、addAdjustment、getCategories。<br>各自的詳細說明與程式碼在這: <a href=\"https://gitlab.com/graduate_lab415/chatbot-api\">https://gitlab.com/graduate_lab415/chatbot-api</a></p>"},{"title":"[Android APP] 01-架構介紹-MVVM","date":"2021-10-07T13:40:40.000Z","_content":"\n第 23 天，這幾天庫存真的用完了，所以文章都是最新鮮，當天寫的喔!! 剩下 7 天，一起加油吧!\n\n終於來到了最後一個系列「Android APP 系列」，也就是真正裝在 Zenbo 上的「長照小幫手 APP」。很久沒有認真寫一個 APP 了，就當作順便練習，這次我選用了 MVVM 的架構。這個系列會以「長照小幫手」為例，從 MVVM 架構介紹開始，介紹 MVVM 的各個部分和一些系統中比較特別的功能。\n<!-- more -->\n\n長照小幫手 完整程式碼: https://gitlab.com/graduate_lab415/chatbot\n\n# MVVM 簡介\nAndroid 目前常見的架構有三種 MVC、MVP、MVVM，而官方目前最推的是 MVVM。\nMVVM 官方介紹: [Guide to app architecture](https://developer.android.com/jetpack/guide)\n\n## 轉換架構的心路歷程\n其實我早期寫 APP 沒什麼架構的概念，所有程式碼都放在 Activity 裡，造成系統一複雜，程式碼就很髒、很亂。後來接觸了網頁框架(CodeIgniter)，瞭解了 MVC 架構，便也試著把概念放到 Android APP 裡，用類似 MVC 寫了好一陣子。\n\n再後來，專案越來越複雜，經手的人越來越多，程式一樣越改越髒。而且大家一開加入時都是新手，架構分的也不一定那麼清楚，專案還是那麼髒。終於有一天，我們決定正式這個問題，開了個讀書會，瞭解 3 個架構的差異後，我們決定選用 MVVM。大家一起從頭學，確保理解都一樣。\n\n## 模組間的關係\n\n模組化最重要的用意是每個物件職責分明，修改時只要更動相應的 Class，也方便 Class 重複使用。\n\n![mvvm](mvvm.jpg)\n\n- **View**\n  - 負責顯示 UI、監聽動作\n  - 包含 Layout 的 XML、Activity 類、Fragment 類、Adapter 類\n  - 不處理邏輯，只負責顯示資料，接收到點擊事件就請 ViewModel 處理\n  - View 和 ViewModel 間通常會使用觀察者模式，由 ViewModel 提供 LiveData 給 View 觀察，只要觀察到有資料變動就更新畫面\n- **ViewModel**\n  - 負責提供畫面所需資料、邏輯判斷\n  - 提供 LiveData\n  - 依需求向 Model 存取資料\n- **Model**\n  - 負責提供資料\n  - 通常會叫做 xxxxxRepository\n  - 若是資料有多個資料來源(來自 API、來自 SQLite)，Repository 層可以抽象化，變成一個 interface，就像是官方文件上的那樣\n  - 圖片取自: https://developer.android.com/jetpack/guide\n    ![final-architecture](final-architecture.png)\n\n## 資料夾分類方式\n這個好像沒有一定欸，我查過網路上很多資料，分類方式不盡相同，但主要都是以模組類型來分類。這部分不需要太糾結，自己定義清楚，找的到東西就好。\n\n我的分類方式:\n- controller: 特殊功能的控制\n- repository: 存取 API 相關\n- utils: 資料物件\n- view: Activity、Adapter\n- viewmodel: ViewModel、Callback\n\n# 長照小幫手 程式架構\n![架構](架構.png)\n","source":"_posts/Android-APP-01-架構介紹-MVVM.md","raw":"---\ntitle: '[Android APP] 01-架構介紹-MVVM'\ndate: 2021-10-07 21:40:40\ntags:\n- 13th鐵人賽\n- Android\n- MVVM\n---\n\n第 23 天，這幾天庫存真的用完了，所以文章都是最新鮮，當天寫的喔!! 剩下 7 天，一起加油吧!\n\n終於來到了最後一個系列「Android APP 系列」，也就是真正裝在 Zenbo 上的「長照小幫手 APP」。很久沒有認真寫一個 APP 了，就當作順便練習，這次我選用了 MVVM 的架構。這個系列會以「長照小幫手」為例，從 MVVM 架構介紹開始，介紹 MVVM 的各個部分和一些系統中比較特別的功能。\n<!-- more -->\n\n長照小幫手 完整程式碼: https://gitlab.com/graduate_lab415/chatbot\n\n# MVVM 簡介\nAndroid 目前常見的架構有三種 MVC、MVP、MVVM，而官方目前最推的是 MVVM。\nMVVM 官方介紹: [Guide to app architecture](https://developer.android.com/jetpack/guide)\n\n## 轉換架構的心路歷程\n其實我早期寫 APP 沒什麼架構的概念，所有程式碼都放在 Activity 裡，造成系統一複雜，程式碼就很髒、很亂。後來接觸了網頁框架(CodeIgniter)，瞭解了 MVC 架構，便也試著把概念放到 Android APP 裡，用類似 MVC 寫了好一陣子。\n\n再後來，專案越來越複雜，經手的人越來越多，程式一樣越改越髒。而且大家一開加入時都是新手，架構分的也不一定那麼清楚，專案還是那麼髒。終於有一天，我們決定正式這個問題，開了個讀書會，瞭解 3 個架構的差異後，我們決定選用 MVVM。大家一起從頭學，確保理解都一樣。\n\n## 模組間的關係\n\n模組化最重要的用意是每個物件職責分明，修改時只要更動相應的 Class，也方便 Class 重複使用。\n\n![mvvm](mvvm.jpg)\n\n- **View**\n  - 負責顯示 UI、監聽動作\n  - 包含 Layout 的 XML、Activity 類、Fragment 類、Adapter 類\n  - 不處理邏輯，只負責顯示資料，接收到點擊事件就請 ViewModel 處理\n  - View 和 ViewModel 間通常會使用觀察者模式，由 ViewModel 提供 LiveData 給 View 觀察，只要觀察到有資料變動就更新畫面\n- **ViewModel**\n  - 負責提供畫面所需資料、邏輯判斷\n  - 提供 LiveData\n  - 依需求向 Model 存取資料\n- **Model**\n  - 負責提供資料\n  - 通常會叫做 xxxxxRepository\n  - 若是資料有多個資料來源(來自 API、來自 SQLite)，Repository 層可以抽象化，變成一個 interface，就像是官方文件上的那樣\n  - 圖片取自: https://developer.android.com/jetpack/guide\n    ![final-architecture](final-architecture.png)\n\n## 資料夾分類方式\n這個好像沒有一定欸，我查過網路上很多資料，分類方式不盡相同，但主要都是以模組類型來分類。這部分不需要太糾結，自己定義清楚，找的到東西就好。\n\n我的分類方式:\n- controller: 特殊功能的控制\n- repository: 存取 API 相關\n- utils: 資料物件\n- view: Activity、Adapter\n- viewmodel: ViewModel、Callback\n\n# 長照小幫手 程式架構\n![架構](架構.png)\n","slug":"Android-APP-01-架構介紹-MVVM","published":1,"updated":"2024-02-24T08:06:01.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myib0004k0jfc0367z1z","content":"<p>第 23 天，這幾天庫存真的用完了，所以文章都是最新鮮，當天寫的喔!! 剩下 7 天，一起加油吧!</p>\n<p>終於來到了最後一個系列「Android APP 系列」，也就是真正裝在 Zenbo 上的「長照小幫手 APP」。很久沒有認真寫一個 APP 了，就當作順便練習，這次我選用了 MVVM 的架構。這個系列會以「長照小幫手」為例，從 MVVM 架構介紹開始，介紹 MVVM 的各個部分和一些系統中比較特別的功能。</p>\n<span id=\"more\"></span>\n\n<p>長照小幫手 完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot\">https://gitlab.com/graduate_lab415/chatbot</a></p>\n<h1 id=\"MVVM-簡介\"><a href=\"#MVVM-簡介\" class=\"headerlink\" title=\"MVVM 簡介\"></a>MVVM 簡介</h1><p>Android 目前常見的架構有三種 MVC、MVP、MVVM，而官方目前最推的是 MVVM。<br>MVVM 官方介紹: <a href=\"https://developer.android.com/jetpack/guide\">Guide to app architecture</a></p>\n<h2 id=\"轉換架構的心路歷程\"><a href=\"#轉換架構的心路歷程\" class=\"headerlink\" title=\"轉換架構的心路歷程\"></a>轉換架構的心路歷程</h2><p>其實我早期寫 APP 沒什麼架構的概念，所有程式碼都放在 Activity 裡，造成系統一複雜，程式碼就很髒、很亂。後來接觸了網頁框架(CodeIgniter)，瞭解了 MVC 架構，便也試著把概念放到 Android APP 裡，用類似 MVC 寫了好一陣子。</p>\n<p>再後來，專案越來越複雜，經手的人越來越多，程式一樣越改越髒。而且大家一開加入時都是新手，架構分的也不一定那麼清楚，專案還是那麼髒。終於有一天，我們決定正式這個問題，開了個讀書會，瞭解 3 個架構的差異後，我們決定選用 MVVM。大家一起從頭學，確保理解都一樣。</p>\n<h2 id=\"模組間的關係\"><a href=\"#模組間的關係\" class=\"headerlink\" title=\"模組間的關係\"></a>模組間的關係</h2><p>模組化最重要的用意是每個物件職責分明，修改時只要更動相應的 Class，也方便 Class 重複使用。</p>\n<p><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/mvvm.jpg\" alt=\"mvvm\"></p>\n<ul>\n<li><strong>View</strong><ul>\n<li>負責顯示 UI、監聽動作</li>\n<li>包含 Layout 的 XML、Activity 類、Fragment 類、Adapter 類</li>\n<li>不處理邏輯，只負責顯示資料，接收到點擊事件就請 ViewModel 處理</li>\n<li>View 和 ViewModel 間通常會使用觀察者模式，由 ViewModel 提供 LiveData 給 View 觀察，只要觀察到有資料變動就更新畫面</li>\n</ul>\n</li>\n<li><strong>ViewModel</strong><ul>\n<li>負責提供畫面所需資料、邏輯判斷</li>\n<li>提供 LiveData</li>\n<li>依需求向 Model 存取資料</li>\n</ul>\n</li>\n<li><strong>Model</strong><ul>\n<li>負責提供資料</li>\n<li>通常會叫做 xxxxxRepository</li>\n<li>若是資料有多個資料來源(來自 API、來自 SQLite)，Repository 層可以抽象化，變成一個 interface，就像是官方文件上的那樣</li>\n<li>圖片取自: <a href=\"https://developer.android.com/jetpack/guide\">https://developer.android.com/jetpack/guide</a><br><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/final-architecture.png\" alt=\"final-architecture\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"資料夾分類方式\"><a href=\"#資料夾分類方式\" class=\"headerlink\" title=\"資料夾分類方式\"></a>資料夾分類方式</h2><p>這個好像沒有一定欸，我查過網路上很多資料，分類方式不盡相同，但主要都是以模組類型來分類。這部分不需要太糾結，自己定義清楚，找的到東西就好。</p>\n<p>我的分類方式:</p>\n<ul>\n<li>controller: 特殊功能的控制</li>\n<li>repository: 存取 API 相關</li>\n<li>utils: 資料物件</li>\n<li>view: Activity、Adapter</li>\n<li>viewmodel: ViewModel、Callback</li>\n</ul>\n<h1 id=\"長照小幫手-程式架構\"><a href=\"#長照小幫手-程式架構\" class=\"headerlink\" title=\"長照小幫手 程式架構\"></a>長照小幫手 程式架構</h1><p><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/%E6%9E%B6%E6%A7%8B.png\" alt=\"架構\"></p>\n","site":{"data":{}},"excerpt":"<p>第 23 天，這幾天庫存真的用完了，所以文章都是最新鮮，當天寫的喔!! 剩下 7 天，一起加油吧!</p>\n<p>終於來到了最後一個系列「Android APP 系列」，也就是真正裝在 Zenbo 上的「長照小幫手 APP」。很久沒有認真寫一個 APP 了，就當作順便練習，這次我選用了 MVVM 的架構。這個系列會以「長照小幫手」為例，從 MVVM 架構介紹開始，介紹 MVVM 的各個部分和一些系統中比較特別的功能。</p>","more":"<p>長照小幫手 完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot\">https://gitlab.com/graduate_lab415/chatbot</a></p>\n<h1 id=\"MVVM-簡介\"><a href=\"#MVVM-簡介\" class=\"headerlink\" title=\"MVVM 簡介\"></a>MVVM 簡介</h1><p>Android 目前常見的架構有三種 MVC、MVP、MVVM，而官方目前最推的是 MVVM。<br>MVVM 官方介紹: <a href=\"https://developer.android.com/jetpack/guide\">Guide to app architecture</a></p>\n<h2 id=\"轉換架構的心路歷程\"><a href=\"#轉換架構的心路歷程\" class=\"headerlink\" title=\"轉換架構的心路歷程\"></a>轉換架構的心路歷程</h2><p>其實我早期寫 APP 沒什麼架構的概念，所有程式碼都放在 Activity 裡，造成系統一複雜，程式碼就很髒、很亂。後來接觸了網頁框架(CodeIgniter)，瞭解了 MVC 架構，便也試著把概念放到 Android APP 裡，用類似 MVC 寫了好一陣子。</p>\n<p>再後來，專案越來越複雜，經手的人越來越多，程式一樣越改越髒。而且大家一開加入時都是新手，架構分的也不一定那麼清楚，專案還是那麼髒。終於有一天，我們決定正式這個問題，開了個讀書會，瞭解 3 個架構的差異後，我們決定選用 MVVM。大家一起從頭學，確保理解都一樣。</p>\n<h2 id=\"模組間的關係\"><a href=\"#模組間的關係\" class=\"headerlink\" title=\"模組間的關係\"></a>模組間的關係</h2><p>模組化最重要的用意是每個物件職責分明，修改時只要更動相應的 Class，也方便 Class 重複使用。</p>\n<p><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/mvvm.jpg\" alt=\"mvvm\"></p>\n<ul>\n<li><strong>View</strong><ul>\n<li>負責顯示 UI、監聽動作</li>\n<li>包含 Layout 的 XML、Activity 類、Fragment 類、Adapter 類</li>\n<li>不處理邏輯，只負責顯示資料，接收到點擊事件就請 ViewModel 處理</li>\n<li>View 和 ViewModel 間通常會使用觀察者模式，由 ViewModel 提供 LiveData 給 View 觀察，只要觀察到有資料變動就更新畫面</li>\n</ul>\n</li>\n<li><strong>ViewModel</strong><ul>\n<li>負責提供畫面所需資料、邏輯判斷</li>\n<li>提供 LiveData</li>\n<li>依需求向 Model 存取資料</li>\n</ul>\n</li>\n<li><strong>Model</strong><ul>\n<li>負責提供資料</li>\n<li>通常會叫做 xxxxxRepository</li>\n<li>若是資料有多個資料來源(來自 API、來自 SQLite)，Repository 層可以抽象化，變成一個 interface，就像是官方文件上的那樣</li>\n<li>圖片取自: <a href=\"https://developer.android.com/jetpack/guide\">https://developer.android.com/jetpack/guide</a><br><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/final-architecture.png\" alt=\"final-architecture\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"資料夾分類方式\"><a href=\"#資料夾分類方式\" class=\"headerlink\" title=\"資料夾分類方式\"></a>資料夾分類方式</h2><p>這個好像沒有一定欸，我查過網路上很多資料，分類方式不盡相同，但主要都是以模組類型來分類。這部分不需要太糾結，自己定義清楚，找的到東西就好。</p>\n<p>我的分類方式:</p>\n<ul>\n<li>controller: 特殊功能的控制</li>\n<li>repository: 存取 API 相關</li>\n<li>utils: 資料物件</li>\n<li>view: Activity、Adapter</li>\n<li>viewmodel: ViewModel、Callback</li>\n</ul>\n<h1 id=\"長照小幫手-程式架構\"><a href=\"#長照小幫手-程式架構\" class=\"headerlink\" title=\"長照小幫手 程式架構\"></a>長照小幫手 程式架構</h1><p><img src=\"/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/%E6%9E%B6%E6%A7%8B.png\" alt=\"架構\"></p>"},{"title":"[Android APP] 02-界面設計","date":"2021-10-08T13:33:18.000Z","_content":"\n昨天講完架構面，今天不那麼技術，來講界面設計。\n\n畫面設計上由於介面是設計給長者使用，因此字型較大。\n<!-- more -->\n\n首頁，使用者可以先選擇要問哪類問題。點選後進入對話頁面。 \n\n![img1](img1.png)\n\n接著，就能以文字或語音輸入方式和聊天機器人對話。聊天機器人能根據問句，回覆最相關的回應。因為前面有提到，Zenbo 有個問題是不靈敏，所以本系統提供按鈕（第1點），使用者可以決定要講話時機，按下按鈕聊天機器人便會認真聆聽句子。但如果 Zenbo 真的無法辨識的時候，本系統也保留手動輸入（第2點）的方式。確認問句正確後，即可以點擊送出按鈕（第3點）。Zenbo 會在回覆內容的下方列出兩個備選問句及「以上皆非」（第4點），若使用者覺得備選問句更符合想問的問題，也能點選查看相應的回覆。同時，不管是備選問題或「以上皆非」，本系統都會以 API 回傳到伺服器端做紀錄以供後續優化，使聊天機器更了解使用者語意。簡而言之，本系統的回饋機制，對使用者而言，是查看其他選項的功能。 \n\n![img2](img2.png)\n\n\n","source":"_posts/Android-APP-02-界面設計.md","raw":"---\ntitle: '[Android APP] 02-界面設計'\ndate: 2021-10-08 21:33:18\ntags:\n- 13th鐵人賽\n- Android\n- 介面設計\n---\n\n昨天講完架構面，今天不那麼技術，來講界面設計。\n\n畫面設計上由於介面是設計給長者使用，因此字型較大。\n<!-- more -->\n\n首頁，使用者可以先選擇要問哪類問題。點選後進入對話頁面。 \n\n![img1](img1.png)\n\n接著，就能以文字或語音輸入方式和聊天機器人對話。聊天機器人能根據問句，回覆最相關的回應。因為前面有提到，Zenbo 有個問題是不靈敏，所以本系統提供按鈕（第1點），使用者可以決定要講話時機，按下按鈕聊天機器人便會認真聆聽句子。但如果 Zenbo 真的無法辨識的時候，本系統也保留手動輸入（第2點）的方式。確認問句正確後，即可以點擊送出按鈕（第3點）。Zenbo 會在回覆內容的下方列出兩個備選問句及「以上皆非」（第4點），若使用者覺得備選問句更符合想問的問題，也能點選查看相應的回覆。同時，不管是備選問題或「以上皆非」，本系統都會以 API 回傳到伺服器端做紀錄以供後續優化，使聊天機器更了解使用者語意。簡而言之，本系統的回饋機制，對使用者而言，是查看其他選項的功能。 \n\n![img2](img2.png)\n\n\n","slug":"Android-APP-02-界面設計","published":1,"updated":"2024-02-24T08:06:01.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myib0005k0jfepgxb6nv","content":"<p>昨天講完架構面，今天不那麼技術，來講界面設計。</p>\n<p>畫面設計上由於介面是設計給長者使用，因此字型較大。</p>\n<span id=\"more\"></span>\n\n<p>首頁，使用者可以先選擇要問哪類問題。點選後進入對話頁面。 </p>\n<p><img src=\"/2021/10/08/Android-APP-02-%E7%95%8C%E9%9D%A2%E8%A8%AD%E8%A8%88/img1.png\" alt=\"img1\"></p>\n<p>接著，就能以文字或語音輸入方式和聊天機器人對話。聊天機器人能根據問句，回覆最相關的回應。因為前面有提到，Zenbo 有個問題是不靈敏，所以本系統提供按鈕（第1點），使用者可以決定要講話時機，按下按鈕聊天機器人便會認真聆聽句子。但如果 Zenbo 真的無法辨識的時候，本系統也保留手動輸入（第2點）的方式。確認問句正確後，即可以點擊送出按鈕（第3點）。Zenbo 會在回覆內容的下方列出兩個備選問句及「以上皆非」（第4點），若使用者覺得備選問句更符合想問的問題，也能點選查看相應的回覆。同時，不管是備選問題或「以上皆非」，本系統都會以 API 回傳到伺服器端做紀錄以供後續優化，使聊天機器更了解使用者語意。簡而言之，本系統的回饋機制，對使用者而言，是查看其他選項的功能。 </p>\n<p><img src=\"/2021/10/08/Android-APP-02-%E7%95%8C%E9%9D%A2%E8%A8%AD%E8%A8%88/img2.png\" alt=\"img2\"></p>\n","site":{"data":{}},"excerpt":"<p>昨天講完架構面，今天不那麼技術，來講界面設計。</p>\n<p>畫面設計上由於介面是設計給長者使用，因此字型較大。</p>","more":"<p>首頁，使用者可以先選擇要問哪類問題。點選後進入對話頁面。 </p>\n<p><img src=\"/2021/10/08/Android-APP-02-%E7%95%8C%E9%9D%A2%E8%A8%AD%E8%A8%88/img1.png\" alt=\"img1\"></p>\n<p>接著，就能以文字或語音輸入方式和聊天機器人對話。聊天機器人能根據問句，回覆最相關的回應。因為前面有提到，Zenbo 有個問題是不靈敏，所以本系統提供按鈕（第1點），使用者可以決定要講話時機，按下按鈕聊天機器人便會認真聆聽句子。但如果 Zenbo 真的無法辨識的時候，本系統也保留手動輸入（第2點）的方式。確認問句正確後，即可以點擊送出按鈕（第3點）。Zenbo 會在回覆內容的下方列出兩個備選問句及「以上皆非」（第4點），若使用者覺得備選問句更符合想問的問題，也能點選查看相應的回覆。同時，不管是備選問題或「以上皆非」，本系統都會以 API 回傳到伺服器端做紀錄以供後續優化，使聊天機器更了解使用者語意。簡而言之，本系統的回饋機制，對使用者而言，是查看其他選項的功能。 </p>\n<p><img src=\"/2021/10/08/Android-APP-02-%E7%95%8C%E9%9D%A2%E8%A8%AD%E8%A8%88/img2.png\" alt=\"img2\"></p>"},{"title":"[Android APP] 03-Android 的 STT 與 TTS","date":"2021-10-09T08:46:29.000Z","_content":"\n用鍵盤輸入訊息，對年輕人或許稀鬆平常，但對長者而言，使用語音的方式或許更輕鬆。所以除了畫面字體放大外，我們也使用語音識別與輸出技術，提供長者更友善的工具。\n\n上次的文章 [[Zenbo開發系列] 06-安裝DDE語料到Zenbo](https://dreambo4.github.io/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/) 有講到 DDE 的問題和使用 Android 語音識別與輸出的原因。那麼，今天就要來介紹 Android 這邊的實作囉!\n<!-- more -->\n\n# STT 語音轉文字\n\n> STT (Speach to Text)\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\n\n語音轉文字的功能用在左下的麥克風按鈕，點擊之後會有個對話框請使用者說出問句。\n\n![對話頁面](對話頁面.png)\n\n我們讓麥克風按鈕被點擊後，執行一個 Intent。\n\n```java\nImageButton btnSpeak = findViewById(R.id.speak);\nbtnSpeak.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent sttIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n        sttIntent.putExtra(\n                RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n        );\n        sttIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());\n        sttIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.start_to_speak));\n\n        try {\n            startActivityForResult(sttIntent, REQUEST_CODE_STT);\n        } catch (ActivityNotFoundException e) {\n            Log.d(TAG, \"onClick: \" + e.getLocalizedMessage());\n            Toast.makeText(ChatActivity.this, \"Your device does not support STT.\", Toast.LENGTH_LONG).show();\n        }\n    }\n});\n```\n\n之後我們就能在 `onActivityResult` 取得語音辨識的結果，並把文字顯示到 EditText 上。\n這樣設計的原因是想解決 DDE 常辨識不到文字的狀況，使用者可以確認語音識別的內容是否正確，再點選送出紐。\n\n```java\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == REQUEST_CODE_STT) {\n        if (resultCode == Activity.RESULT_OK && data != null) {\n            ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n            if (result != null) {\n                String recognizedText = result.get(0);\n                mUserInput.setText(recognizedText);\n            }\n        }\n    }\n}\n```\n\n# TTS 文字轉語音\n\n> TTS (Text to Speach)\n\n我是在 ViewModel 的呼叫使用 TTSSpeaker。\n\n## ChatViewModel\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java\n\n這邊參數需要傳兩個 Callback 給 TTSSpeaker。\n- 第一個 `TTSCallback` 是我自己寫的，主要用來確認 TTS 初始化是否成功，`onReady` 才能執行將句子唸出來的動作。\n- 第二個 `UtteranceProgressListener` 是要確認 TTS 目前的狀況，`onStart`(開始)、`onDone`(唸完)、`onError`(錯誤)。\n\n```java\nprivate void speak(String message) {\n    TTSCallback ttsCallback = new TTSCallback() {\n        @Override\n        public void onReady() {\n            mSpeaker.speak(message);\n        }\n\n        @Override\n        public void onFail() {\n            Log.d(TAG, \"ttsCallback onFail\");\n        }\n    };\n    UtteranceProgressListener speakingStatus = new UtteranceProgressListener() {\n        @Override\n        public void onStart(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onStart\");\n        }\n\n        @Override\n        public void onDone(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onDone\");\n            mSpeaker.destroy();\n        }\n\n        @Override\n        public void onError(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onError\");\n            mSpeaker.destroy();\n        }\n    };\n\n    mSpeaker = new TTSSpeaker(mApplication, ttsCallback, speakingStatus);\n}\n```\n\n## TTSSpeaker\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java\n\n```java\npublic class TTSSpeaker {\n    private TextToSpeech mTTS;\n    private TTSCallback mCallback;\n    private Application mApplication;\n\n    public TTSSpeaker(Application application, TTSCallback callback, UtteranceProgressListener utteranceProgressListener) {\n        mApplication = application;\n        mCallback = callback;\n        mTTS = new TextToSpeech(mApplication, new TextToSpeech.OnInitListener() {\n            @Override\n            public void onInit(int status) {\n                if (status == TextToSpeech.SUCCESS) {\n                    int result = mTTS.setLanguage(Locale.TAIWAN);    //設定語言為中文\n                    if (result == TextToSpeech.LANG_MISSING_DATA\n                            || result == TextToSpeech.LANG_NOT_SUPPORTED) {\n                        Log.e(\"TTS\", \"This Language is not supported\");\n                    } else {\n                        mTTS.setPitch(1);    //語調(1為正常語調；0.5比正常語調低一倍；2比正常語調高一倍)\n                        mTTS.setSpeechRate(1);    //速度(1為正常速度；0.5比正常速度慢一倍；2比正常速度快一倍)\n                    }\n                    mTTS.setOnUtteranceProgressListener(utteranceProgressListener);\n                    mCallback.onReady();\n                } else {\n                    Log.e(\"TTS\", \"Initialization Failed!\");\n                    mCallback.onFail();\n                }\n            }\n\n        });\n    }\n\n    public void speak(String message) {\n        mTTS.speak(message, TextToSpeech.QUEUE_FLUSH, null, \"tts1\");\n//        destroy();\n    }\n\n    public void destroy() {\n            mTTS.shutdown();\n    }\n}\n```\n\n# Demo\n\n{% youtube iSneVFi9J0I %}","source":"_posts/Android-APP-03-Android-的-STT-與-TTS.md","raw":"---\ntitle: '[Android APP] 03-Android 的 STT 與 TTS'\ndate: 2021-10-09 16:46:29\ntags:\n- 13th鐵人賽\n- Android\n- STT\n- TTS\n---\n\n用鍵盤輸入訊息，對年輕人或許稀鬆平常，但對長者而言，使用語音的方式或許更輕鬆。所以除了畫面字體放大外，我們也使用語音識別與輸出技術，提供長者更友善的工具。\n\n上次的文章 [[Zenbo開發系列] 06-安裝DDE語料到Zenbo](https://dreambo4.github.io/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/) 有講到 DDE 的問題和使用 Android 語音識別與輸出的原因。那麼，今天就要來介紹 Android 這邊的實作囉!\n<!-- more -->\n\n# STT 語音轉文字\n\n> STT (Speach to Text)\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\n\n語音轉文字的功能用在左下的麥克風按鈕，點擊之後會有個對話框請使用者說出問句。\n\n![對話頁面](對話頁面.png)\n\n我們讓麥克風按鈕被點擊後，執行一個 Intent。\n\n```java\nImageButton btnSpeak = findViewById(R.id.speak);\nbtnSpeak.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent sttIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n        sttIntent.putExtra(\n                RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n        );\n        sttIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());\n        sttIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.start_to_speak));\n\n        try {\n            startActivityForResult(sttIntent, REQUEST_CODE_STT);\n        } catch (ActivityNotFoundException e) {\n            Log.d(TAG, \"onClick: \" + e.getLocalizedMessage());\n            Toast.makeText(ChatActivity.this, \"Your device does not support STT.\", Toast.LENGTH_LONG).show();\n        }\n    }\n});\n```\n\n之後我們就能在 `onActivityResult` 取得語音辨識的結果，並把文字顯示到 EditText 上。\n這樣設計的原因是想解決 DDE 常辨識不到文字的狀況，使用者可以確認語音識別的內容是否正確，再點選送出紐。\n\n```java\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == REQUEST_CODE_STT) {\n        if (resultCode == Activity.RESULT_OK && data != null) {\n            ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n            if (result != null) {\n                String recognizedText = result.get(0);\n                mUserInput.setText(recognizedText);\n            }\n        }\n    }\n}\n```\n\n# TTS 文字轉語音\n\n> TTS (Text to Speach)\n\n我是在 ViewModel 的呼叫使用 TTSSpeaker。\n\n## ChatViewModel\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java\n\n這邊參數需要傳兩個 Callback 給 TTSSpeaker。\n- 第一個 `TTSCallback` 是我自己寫的，主要用來確認 TTS 初始化是否成功，`onReady` 才能執行將句子唸出來的動作。\n- 第二個 `UtteranceProgressListener` 是要確認 TTS 目前的狀況，`onStart`(開始)、`onDone`(唸完)、`onError`(錯誤)。\n\n```java\nprivate void speak(String message) {\n    TTSCallback ttsCallback = new TTSCallback() {\n        @Override\n        public void onReady() {\n            mSpeaker.speak(message);\n        }\n\n        @Override\n        public void onFail() {\n            Log.d(TAG, \"ttsCallback onFail\");\n        }\n    };\n    UtteranceProgressListener speakingStatus = new UtteranceProgressListener() {\n        @Override\n        public void onStart(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onStart\");\n        }\n\n        @Override\n        public void onDone(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onDone\");\n            mSpeaker.destroy();\n        }\n\n        @Override\n        public void onError(String utteranceId) {\n            Log.d(TAG, \"speakingStatus onError\");\n            mSpeaker.destroy();\n        }\n    };\n\n    mSpeaker = new TTSSpeaker(mApplication, ttsCallback, speakingStatus);\n}\n```\n\n## TTSSpeaker\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java\n\n```java\npublic class TTSSpeaker {\n    private TextToSpeech mTTS;\n    private TTSCallback mCallback;\n    private Application mApplication;\n\n    public TTSSpeaker(Application application, TTSCallback callback, UtteranceProgressListener utteranceProgressListener) {\n        mApplication = application;\n        mCallback = callback;\n        mTTS = new TextToSpeech(mApplication, new TextToSpeech.OnInitListener() {\n            @Override\n            public void onInit(int status) {\n                if (status == TextToSpeech.SUCCESS) {\n                    int result = mTTS.setLanguage(Locale.TAIWAN);    //設定語言為中文\n                    if (result == TextToSpeech.LANG_MISSING_DATA\n                            || result == TextToSpeech.LANG_NOT_SUPPORTED) {\n                        Log.e(\"TTS\", \"This Language is not supported\");\n                    } else {\n                        mTTS.setPitch(1);    //語調(1為正常語調；0.5比正常語調低一倍；2比正常語調高一倍)\n                        mTTS.setSpeechRate(1);    //速度(1為正常速度；0.5比正常速度慢一倍；2比正常速度快一倍)\n                    }\n                    mTTS.setOnUtteranceProgressListener(utteranceProgressListener);\n                    mCallback.onReady();\n                } else {\n                    Log.e(\"TTS\", \"Initialization Failed!\");\n                    mCallback.onFail();\n                }\n            }\n\n        });\n    }\n\n    public void speak(String message) {\n        mTTS.speak(message, TextToSpeech.QUEUE_FLUSH, null, \"tts1\");\n//        destroy();\n    }\n\n    public void destroy() {\n            mTTS.shutdown();\n    }\n}\n```\n\n# Demo\n\n{% youtube iSneVFi9J0I %}","slug":"Android-APP-03-Android-的-STT-與-TTS","published":1,"updated":"2024-02-24T08:06:01.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myic0006k0jfafmm2mq1","content":"<p>用鍵盤輸入訊息，對年輕人或許稀鬆平常，但對長者而言，使用語音的方式或許更輕鬆。所以除了畫面字體放大外，我們也使用語音識別與輸出技術，提供長者更友善的工具。</p>\n<p>上次的文章 <a href=\"https://dreambo4.github.io/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/\">[Zenbo開發系列] 06-安裝DDE語料到Zenbo</a> 有講到 DDE 的問題和使用 Android 語音識別與輸出的原因。那麼，今天就要來介紹 Android 這邊的實作囉!</p>\n<span id=\"more\"></span>\n\n<h1 id=\"STT-語音轉文字\"><a href=\"#STT-語音轉文字\" class=\"headerlink\" title=\"STT 語音轉文字\"></a>STT 語音轉文字</h1><blockquote>\n<p>STT (Speach to Text)</p>\n</blockquote>\n<p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java</a></p>\n<p>語音轉文字的功能用在左下的麥克風按鈕，點擊之後會有個對話框請使用者說出問句。</p>\n<p><img src=\"/2021/10/09/Android-APP-03-Android-%E7%9A%84-STT-%E8%88%87-TTS/%E5%B0%8D%E8%A9%B1%E9%A0%81%E9%9D%A2.png\" alt=\"對話頁面\"></p>\n<p>我們讓麥克風按鈕被點擊後，執行一個 Intent。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageButton btnSpeak = findViewById(R.id.speak);</span><br><span class=\"line\">btnSpeak.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        Intent sttIntent = <span class=\"keyword\">new</span> Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);</span><br><span class=\"line\">        sttIntent.putExtra(</span><br><span class=\"line\">                RecognizerIntent.EXTRA_LANGUAGE_MODEL,</span><br><span class=\"line\">                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM</span><br><span class=\"line\">        );</span><br><span class=\"line\">        sttIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());</span><br><span class=\"line\">        sttIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.start_to_speak));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            startActivityForResult(sttIntent, REQUEST_CODE_STT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">            Toast.makeText(ChatActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;Your device does not support STT.&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>之後我們就能在 <code>onActivityResult</code> 取得語音辨識的結果，並把文字顯示到 EditText 上。<br>這樣設計的原因是想解決 DDE 常辨識不到文字的狀況，使用者可以確認語音識別的內容是否正確，再點選送出紐。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE_STT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; data != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ArrayList&lt;String&gt; result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String recognizedText = result.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                mUserInput.setText(recognizedText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"TTS-文字轉語音\"><a href=\"#TTS-文字轉語音\" class=\"headerlink\" title=\"TTS 文字轉語音\"></a>TTS 文字轉語音</h1><blockquote>\n<p>TTS (Text to Speach)</p>\n</blockquote>\n<p>我是在 ViewModel 的呼叫使用 TTSSpeaker。</p>\n<h2 id=\"ChatViewModel\"><a href=\"#ChatViewModel\" class=\"headerlink\" title=\"ChatViewModel\"></a>ChatViewModel</h2><p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java</a></p>\n<p>這邊參數需要傳兩個 Callback 給 TTSSpeaker。</p>\n<ul>\n<li>第一個 <code>TTSCallback</code> 是我自己寫的，主要用來確認 TTS 初始化是否成功，<code>onReady</code> 才能執行將句子唸出來的動作。</li>\n<li>第二個 <code>UtteranceProgressListener</code> 是要確認 TTS 目前的狀況，<code>onStart</code>(開始)、<code>onDone</code>(唸完)、<code>onError</code>(錯誤)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">    TTSCallback ttsCallback = <span class=\"keyword\">new</span> TTSCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mSpeaker.speak(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;ttsCallback onFail&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UtteranceProgressListener speakingStatus = <span class=\"keyword\">new</span> UtteranceProgressListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onStart&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDone</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onDone&quot;</span>);</span><br><span class=\"line\">            mSpeaker.destroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onError&quot;</span>);</span><br><span class=\"line\">            mSpeaker.destroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    mSpeaker = <span class=\"keyword\">new</span> TTSSpeaker(mApplication, ttsCallback, speakingStatus);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TTSSpeaker\"><a href=\"#TTSSpeaker\" class=\"headerlink\" title=\"TTSSpeaker\"></a>TTSSpeaker</h2><p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTSSpeaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextToSpeech mTTS;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TTSCallback mCallback;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Application mApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TTSSpeaker</span><span class=\"params\">(Application application, TTSCallback callback, UtteranceProgressListener utteranceProgressListener)</span> </span>&#123;</span><br><span class=\"line\">        mApplication = application;</span><br><span class=\"line\">        mCallback = callback;</span><br><span class=\"line\">        mTTS = <span class=\"keyword\">new</span> TextToSpeech(mApplication, <span class=\"keyword\">new</span> TextToSpeech.OnInitListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onInit</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status == TextToSpeech.SUCCESS) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> result = mTTS.setLanguage(Locale.TAIWAN);    <span class=\"comment\">//設定語言為中文</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (result == TextToSpeech.LANG_MISSING_DATA</span><br><span class=\"line\">                            || result == TextToSpeech.LANG_NOT_SUPPORTED) &#123;</span><br><span class=\"line\">                        Log.e(<span class=\"string\">&quot;TTS&quot;</span>, <span class=\"string\">&quot;This Language is not supported&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mTTS.setPitch(<span class=\"number\">1</span>);    <span class=\"comment\">//語調(1為正常語調；0.5比正常語調低一倍；2比正常語調高一倍)</span></span><br><span class=\"line\">                        mTTS.setSpeechRate(<span class=\"number\">1</span>);    <span class=\"comment\">//速度(1為正常速度；0.5比正常速度慢一倍；2比正常速度快一倍)</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mTTS.setOnUtteranceProgressListener(utteranceProgressListener);</span><br><span class=\"line\">                    mCallback.onReady();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    Log.e(<span class=\"string\">&quot;TTS&quot;</span>, <span class=\"string\">&quot;Initialization Failed!&quot;</span>);</span><br><span class=\"line\">                    mCallback.onFail();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        mTTS.speak(message, TextToSpeech.QUEUE_FLUSH, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;tts1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        destroy();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mTTS.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/iSneVFi9J0I\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>","site":{"data":{}},"excerpt":"<p>用鍵盤輸入訊息，對年輕人或許稀鬆平常，但對長者而言，使用語音的方式或許更輕鬆。所以除了畫面字體放大外，我們也使用語音識別與輸出技術，提供長者更友善的工具。</p>\n<p>上次的文章 <a href=\"https://dreambo4.github.io/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/\">[Zenbo開發系列] 06-安裝DDE語料到Zenbo</a> 有講到 DDE 的問題和使用 Android 語音識別與輸出的原因。那麼，今天就要來介紹 Android 這邊的實作囉!</p>","more":"<h1 id=\"STT-語音轉文字\"><a href=\"#STT-語音轉文字\" class=\"headerlink\" title=\"STT 語音轉文字\"></a>STT 語音轉文字</h1><blockquote>\n<p>STT (Speach to Text)</p>\n</blockquote>\n<p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java</a></p>\n<p>語音轉文字的功能用在左下的麥克風按鈕，點擊之後會有個對話框請使用者說出問句。</p>\n<p><img src=\"/2021/10/09/Android-APP-03-Android-%E7%9A%84-STT-%E8%88%87-TTS/%E5%B0%8D%E8%A9%B1%E9%A0%81%E9%9D%A2.png\" alt=\"對話頁面\"></p>\n<p>我們讓麥克風按鈕被點擊後，執行一個 Intent。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageButton btnSpeak = findViewById(R.id.speak);</span><br><span class=\"line\">btnSpeak.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        Intent sttIntent = <span class=\"keyword\">new</span> Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);</span><br><span class=\"line\">        sttIntent.putExtra(</span><br><span class=\"line\">                RecognizerIntent.EXTRA_LANGUAGE_MODEL,</span><br><span class=\"line\">                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM</span><br><span class=\"line\">        );</span><br><span class=\"line\">        sttIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());</span><br><span class=\"line\">        sttIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.start_to_speak));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            startActivityForResult(sttIntent, REQUEST_CODE_STT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">            Toast.makeText(ChatActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;Your device does not support STT.&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>之後我們就能在 <code>onActivityResult</code> 取得語音辨識的結果，並把文字顯示到 EditText 上。<br>這樣設計的原因是想解決 DDE 常辨識不到文字的狀況，使用者可以確認語音識別的內容是否正確，再點選送出紐。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE_STT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; data != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ArrayList&lt;String&gt; result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String recognizedText = result.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                mUserInput.setText(recognizedText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"TTS-文字轉語音\"><a href=\"#TTS-文字轉語音\" class=\"headerlink\" title=\"TTS 文字轉語音\"></a>TTS 文字轉語音</h1><blockquote>\n<p>TTS (Text to Speach)</p>\n</blockquote>\n<p>我是在 ViewModel 的呼叫使用 TTSSpeaker。</p>\n<h2 id=\"ChatViewModel\"><a href=\"#ChatViewModel\" class=\"headerlink\" title=\"ChatViewModel\"></a>ChatViewModel</h2><p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/ChatViewModel.java</a></p>\n<p>這邊參數需要傳兩個 Callback 給 TTSSpeaker。</p>\n<ul>\n<li>第一個 <code>TTSCallback</code> 是我自己寫的，主要用來確認 TTS 初始化是否成功，<code>onReady</code> 才能執行將句子唸出來的動作。</li>\n<li>第二個 <code>UtteranceProgressListener</code> 是要確認 TTS 目前的狀況，<code>onStart</code>(開始)、<code>onDone</code>(唸完)、<code>onError</code>(錯誤)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">    TTSCallback ttsCallback = <span class=\"keyword\">new</span> TTSCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mSpeaker.speak(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;ttsCallback onFail&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UtteranceProgressListener speakingStatus = <span class=\"keyword\">new</span> UtteranceProgressListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onStart&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDone</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onDone&quot;</span>);</span><br><span class=\"line\">            mSpeaker.destroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(String utteranceId)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;speakingStatus onError&quot;</span>);</span><br><span class=\"line\">            mSpeaker.destroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    mSpeaker = <span class=\"keyword\">new</span> TTSSpeaker(mApplication, ttsCallback, speakingStatus);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TTSSpeaker\"><a href=\"#TTSSpeaker\" class=\"headerlink\" title=\"TTSSpeaker\"></a>TTSSpeaker</h2><p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/controller/TTSSpeaker.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTSSpeaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextToSpeech mTTS;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TTSCallback mCallback;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Application mApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TTSSpeaker</span><span class=\"params\">(Application application, TTSCallback callback, UtteranceProgressListener utteranceProgressListener)</span> </span>&#123;</span><br><span class=\"line\">        mApplication = application;</span><br><span class=\"line\">        mCallback = callback;</span><br><span class=\"line\">        mTTS = <span class=\"keyword\">new</span> TextToSpeech(mApplication, <span class=\"keyword\">new</span> TextToSpeech.OnInitListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onInit</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status == TextToSpeech.SUCCESS) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> result = mTTS.setLanguage(Locale.TAIWAN);    <span class=\"comment\">//設定語言為中文</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (result == TextToSpeech.LANG_MISSING_DATA</span><br><span class=\"line\">                            || result == TextToSpeech.LANG_NOT_SUPPORTED) &#123;</span><br><span class=\"line\">                        Log.e(<span class=\"string\">&quot;TTS&quot;</span>, <span class=\"string\">&quot;This Language is not supported&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mTTS.setPitch(<span class=\"number\">1</span>);    <span class=\"comment\">//語調(1為正常語調；0.5比正常語調低一倍；2比正常語調高一倍)</span></span><br><span class=\"line\">                        mTTS.setSpeechRate(<span class=\"number\">1</span>);    <span class=\"comment\">//速度(1為正常速度；0.5比正常速度慢一倍；2比正常速度快一倍)</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mTTS.setOnUtteranceProgressListener(utteranceProgressListener);</span><br><span class=\"line\">                    mCallback.onReady();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    Log.e(<span class=\"string\">&quot;TTS&quot;</span>, <span class=\"string\">&quot;Initialization Failed!&quot;</span>);</span><br><span class=\"line\">                    mCallback.onFail();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        mTTS.speak(message, TextToSpeech.QUEUE_FLUSH, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;tts1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        destroy();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mTTS.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/iSneVFi9J0I\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>"},{"title":"[Android APP] 04-MVVM - Repository與API串接","date":"2021-10-10T13:39:42.000Z","_content":"\n前幾天介紹的 MVVM 架構，可以參考這篇 [[[Android APP] 01-架構介紹-MVVM](https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/)]。今天要講的是其中 Repository 的部分，Repository 通常用來提供資料，因為我的資料來源只有 API，就不那麼複雜了，直接在 Repository 串接 API。\n<!-- more -->\n\n本系統中有 2 個 Repository、3 支 API，這次以 JSON 結構比較簡單的 CategoryRepository 來作範例。\n\n# CategoryRepository\n\n我在這邊用的是 Volley，當然你想用 Retrofit 或其他的 http client 也都可以。\n關於 Volley 的使用可以參考我之前的文章: [[Workshop記錄-Volley與API](https://dreambo4.github.io/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/#more)]\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java\n\n```java\npublic void get(CategoryVolleyCallback callback) {\n    StringRequest stringRequest = new StringRequest(Request.Method.GET,\n            \"http://120.110.112.177:83/Chatbot/getCategories.php\",\n            response -> {\n                Log.d(TAG, \"onResponse: \" + response);\n                ArrayList<Category> categoryList = new ArrayList<>();\n                try {\n                    JSONObject json = new JSONObject(response);\n                    JSONArray categories = json.getJSONArray(\"categories\");\n\n                    for (int i = 0; i < categories.length(); i++) {\n                        JSONObject category = categories.getJSONObject(i);\n                        categoryList.add(new Category(\n                                category.getString(\"id\"),\n                                category.getString(\"name\")));\n                    }\n\n                    callback.onSuccess(categoryList);\n                } catch (JSONException e) {\n                    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n                }\n\n            },\n            error -> {\n                Log.e(TAG, \"onErrorResponse: \", error);\n                callback.onFail(\"發生一些錯誤\\n\" + error.toString());\n            });\n    mRQ.add(stringRequest);\n}\n```\n\n因為從 API 取得資料是非同步運行的，所以參數中有個 Callback。Callback 的用意就是，當資料都收到之後，再透過 `callback.onSuccess(categoryList);` 回傳給 ViewModel。如果不是使用 Callback 而是直接 `return categoryList;` 的話，會造成物件回傳了，但物件裡還是空的、ViewModel 沒有拿到資料的狀況。瞭解 Callback 的概念是很重要的哦!!\n\n# 資料提供流程\n\n![flow](flow.jpg)\n","source":"_posts/Android-APP-04-MVVM-Repository與API串接.md","raw":"---\ntitle: '[Android APP] 04-MVVM - Repository與API串接'\ndate: 2021-10-10 21:39:42\ntags:\n- 13th鐵人賽\n- Android\n- Repository\n- MVVM\n- API\n- Callback\n---\n\n前幾天介紹的 MVVM 架構，可以參考這篇 [[[Android APP] 01-架構介紹-MVVM](https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/)]。今天要講的是其中 Repository 的部分，Repository 通常用來提供資料，因為我的資料來源只有 API，就不那麼複雜了，直接在 Repository 串接 API。\n<!-- more -->\n\n本系統中有 2 個 Repository、3 支 API，這次以 JSON 結構比較簡單的 CategoryRepository 來作範例。\n\n# CategoryRepository\n\n我在這邊用的是 Volley，當然你想用 Retrofit 或其他的 http client 也都可以。\n關於 Volley 的使用可以參考我之前的文章: [[Workshop記錄-Volley與API](https://dreambo4.github.io/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/#more)]\n\n完整程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java\n\n```java\npublic void get(CategoryVolleyCallback callback) {\n    StringRequest stringRequest = new StringRequest(Request.Method.GET,\n            \"http://120.110.112.177:83/Chatbot/getCategories.php\",\n            response -> {\n                Log.d(TAG, \"onResponse: \" + response);\n                ArrayList<Category> categoryList = new ArrayList<>();\n                try {\n                    JSONObject json = new JSONObject(response);\n                    JSONArray categories = json.getJSONArray(\"categories\");\n\n                    for (int i = 0; i < categories.length(); i++) {\n                        JSONObject category = categories.getJSONObject(i);\n                        categoryList.add(new Category(\n                                category.getString(\"id\"),\n                                category.getString(\"name\")));\n                    }\n\n                    callback.onSuccess(categoryList);\n                } catch (JSONException e) {\n                    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n                }\n\n            },\n            error -> {\n                Log.e(TAG, \"onErrorResponse: \", error);\n                callback.onFail(\"發生一些錯誤\\n\" + error.toString());\n            });\n    mRQ.add(stringRequest);\n}\n```\n\n因為從 API 取得資料是非同步運行的，所以參數中有個 Callback。Callback 的用意就是，當資料都收到之後，再透過 `callback.onSuccess(categoryList);` 回傳給 ViewModel。如果不是使用 Callback 而是直接 `return categoryList;` 的話，會造成物件回傳了，但物件裡還是空的、ViewModel 沒有拿到資料的狀況。瞭解 Callback 的概念是很重要的哦!!\n\n# 資料提供流程\n\n![flow](flow.jpg)\n","slug":"Android-APP-04-MVVM-Repository與API串接","published":1,"updated":"2024-02-24T08:06:01.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myic0008k0jf233y0w40","content":"<p>前幾天介紹的 MVVM 架構，可以參考這篇 [<a href=\"https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/\">[Android APP] 01-架構介紹-MVVM</a>]。今天要講的是其中 Repository 的部分，Repository 通常用來提供資料，因為我的資料來源只有 API，就不那麼複雜了，直接在 Repository 串接 API。</p>\n<span id=\"more\"></span>\n\n<p>本系統中有 2 個 Repository、3 支 API，這次以 JSON 結構比較簡單的 CategoryRepository 來作範例。</p>\n<h1 id=\"CategoryRepository\"><a href=\"#CategoryRepository\" class=\"headerlink\" title=\"CategoryRepository\"></a>CategoryRepository</h1><p>我在這邊用的是 Volley，當然你想用 Retrofit 或其他的 http client 也都可以。<br>關於 Volley 的使用可以參考我之前的文章: [<a href=\"https://dreambo4.github.io/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/#more\">Workshop記錄-Volley與API</a>]</p>\n<p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(CategoryVolleyCallback callback)</span> </span>&#123;</span><br><span class=\"line\">    StringRequest stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.GET,</span><br><span class=\"line\">            <span class=\"string\">&quot;http://120.110.112.177:83/Chatbot/getCategories.php&quot;</span>,</span><br><span class=\"line\">            response -&gt; &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onResponse: &quot;</span> + response);</span><br><span class=\"line\">                ArrayList&lt;Category&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">                    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">                        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\">                        categoryList.add(<span class=\"keyword\">new</span> Category(</span><br><span class=\"line\">                                category.getString(<span class=\"string\">&quot;id&quot;</span>),</span><br><span class=\"line\">                                category.getString(<span class=\"string\">&quot;name&quot;</span>)));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    callback.onSuccess(categoryList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error -&gt; &#123;</span><br><span class=\"line\">                Log.e(TAG, <span class=\"string\">&quot;onErrorResponse: &quot;</span>, error);</span><br><span class=\"line\">                callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + error.toString());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    mRQ.add(stringRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為從 API 取得資料是非同步運行的，所以參數中有個 Callback。Callback 的用意就是，當資料都收到之後，再透過 <code>callback.onSuccess(categoryList);</code> 回傳給 ViewModel。如果不是使用 Callback 而是直接 <code>return categoryList;</code> 的話，會造成物件回傳了，但物件裡還是空的、ViewModel 沒有拿到資料的狀況。瞭解 Callback 的概念是很重要的哦!!</p>\n<h1 id=\"資料提供流程\"><a href=\"#資料提供流程\" class=\"headerlink\" title=\"資料提供流程\"></a>資料提供流程</h1><p><img src=\"/2021/10/10/Android-APP-04-MVVM-Repository%E8%88%87API%E4%B8%B2%E6%8E%A5/flow.jpg\" alt=\"flow\"></p>\n","site":{"data":{}},"excerpt":"<p>前幾天介紹的 MVVM 架構，可以參考這篇 [<a href=\"https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/\">[Android APP] 01-架構介紹-MVVM</a>]。今天要講的是其中 Repository 的部分，Repository 通常用來提供資料，因為我的資料來源只有 API，就不那麼複雜了，直接在 Repository 串接 API。</p>","more":"<p>本系統中有 2 個 Repository、3 支 API，這次以 JSON 結構比較簡單的 CategoryRepository 來作範例。</p>\n<h1 id=\"CategoryRepository\"><a href=\"#CategoryRepository\" class=\"headerlink\" title=\"CategoryRepository\"></a>CategoryRepository</h1><p>我在這邊用的是 Volley，當然你想用 Retrofit 或其他的 http client 也都可以。<br>關於 Volley 的使用可以參考我之前的文章: [<a href=\"https://dreambo4.github.io/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/#more\">Workshop記錄-Volley與API</a>]</p>\n<p>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/repository/CategoryRepository.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(CategoryVolleyCallback callback)</span> </span>&#123;</span><br><span class=\"line\">    StringRequest stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.GET,</span><br><span class=\"line\">            <span class=\"string\">&quot;http://120.110.112.177:83/Chatbot/getCategories.php&quot;</span>,</span><br><span class=\"line\">            response -&gt; &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onResponse: &quot;</span> + response);</span><br><span class=\"line\">                ArrayList&lt;Category&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">                    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">                        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\">                        categoryList.add(<span class=\"keyword\">new</span> Category(</span><br><span class=\"line\">                                category.getString(<span class=\"string\">&quot;id&quot;</span>),</span><br><span class=\"line\">                                category.getString(<span class=\"string\">&quot;name&quot;</span>)));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    callback.onSuccess(categoryList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error -&gt; &#123;</span><br><span class=\"line\">                Log.e(TAG, <span class=\"string\">&quot;onErrorResponse: &quot;</span>, error);</span><br><span class=\"line\">                callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + error.toString());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    mRQ.add(stringRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為從 API 取得資料是非同步運行的，所以參數中有個 Callback。Callback 的用意就是，當資料都收到之後，再透過 <code>callback.onSuccess(categoryList);</code> 回傳給 ViewModel。如果不是使用 Callback 而是直接 <code>return categoryList;</code> 的話，會造成物件回傳了，但物件裡還是空的、ViewModel 沒有拿到資料的狀況。瞭解 Callback 的概念是很重要的哦!!</p>\n<h1 id=\"資料提供流程\"><a href=\"#資料提供流程\" class=\"headerlink\" title=\"資料提供流程\"></a>資料提供流程</h1><p><img src=\"/2021/10/10/Android-APP-04-MVVM-Repository%E8%88%87API%E4%B8%B2%E6%8E%A5/flow.jpg\" alt=\"flow\"></p>"},{"title":"[Android APP] 05-API與物件","date":"2021-10-11T13:59:31.000Z","_content":"\n昨天講的是 API 傳遞資料的流程，今天就來介紹怎麼把資料包裝成物件，方便傳遞吧。\n<!-- more -->\n\n一樣，會使用 JSON 結構比較簡單的 CategoryRepository 來作範例。\n\n# 寫法演變\n\n在還沒有用物件操作資料以前，我們的專案都是用 `ArrayList<HashMap<String, String>>` 來儲存資料的。\n\n大概會像這樣:\n```java\nArrayList<HashMap<String, String>> categoryList = new ArrayList<>();\ntry {\n    JSONObject json = new JSONObject(response);\n    JSONArray categories = json.getJSONArray(\"categories\");\n\n    for (int i = 0; i < categories.length(); i++) {\n        JSONObject category = categories.getJSONObject(i);\n\n        HashMap<String, String> category = new HashMap<>();\n        category.put(\"id\", category.getString(\"id\"));\n        category.put(\"name\", category.getString(\"name\"));\n\n        categoryList.add(category);\n    }\n    callback.onSuccess(categoryList);\n} catch (JSONException e) {\n    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n}\n```\n\n一開始這是簡單又方便的解決方式，不需要自己建立物件。試想，若是欄位變多了之後呢?\n\n在不同 Class 中傳遞物件時，你需要一直對照、複製貼上，確認兩邊的 key 是一致的、數量是一致的，而且 IDE 不會自動幫你補齊!!若是今天有不同格式的資料，但型態卻都是一樣的 `ArrayList<HashMap<String, String>>`，那又要如分辨呢?\n\n所以後來我才漸漸改成使用物件來包裝傳遞資料，可以為物件設置 Constructor，或是每個欄位的 getter、setter，這樣就能使用 IDE 的全功能囉。而且傳遞物件的時候就能清楚的知道，物件裡面裝的是什麼內容。甚至是 `Chat` 這種比較複雜(裡面還有包一個 `ArrayList`)的資料結構，也能輕鬆存取。\n\n![chat](chat.png)\n\n# 程式碼\n\n好了，那來介紹一下物件的建立吧!!\n\nJSON 格式是這樣的，可以觀察一下，其實每個物件都是由 `id`、`name` 組成的。\n\n```json\n{ \n    \"categories\": [ \n        { \n            \"id\": 0, \n            \"name\": \"全部\" \n        }, \n        { \n            \"id\": 1, \n            \"name\": \"長照據點與機構\" \n        }, \n        { \n            \"id\": 2, \n            \"name\": \"長照服務介紹與申請\" \n        }, \n        { \n            \"id\": 3, \n            \"name\": \"輔具服務\" \n        }, \n        { \n            \"id\": 4, \n            \"name\": \"外籍看護相關規範\" \n        }, \n        { \n            \"id\": 5, \n            \"name\": \"長照服務人員培訓與任用\" \n        } \n    ] \n}\n```\n\n對應到物件上，我設計了兩個字串，分別來儲存 `id` 和 `category`。\n\n```java\npublic class Category {\n    private final String mId;\n    private final String mName;\n\n    public Category(String id, String name) {\n        mId = id;\n        mName = name;\n    }\n\n    public String getId() {\n        return mId;\n    }\n\n    public String getName() {\n        return mName;\n    }\n}\n```\n\n如此一來，在 Repository 就能使用物件的方式來包裝資料了。可以比較一下，和前面的寫法有什麼不一樣哦。\n\n```java\nArrayList<Category> categoryList = new ArrayList<>();\ntry {\n    JSONObject json = new JSONObject(response);\n    JSONArray categories = json.getJSONArray(\"categories\");\n\n    for (int i = 0; i < categories.length(); i++) {\n        JSONObject category = categories.getJSONObject(i);\n        categoryList.add(new Category(\n                category.getString(\"id\"),\n                category.getString(\"name\")));\n    }\n\n    callback.onSuccess(categoryList);\n} catch (JSONException e) {\n    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n}\n```\n\n在 [Activity](https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/CategoryActivity.java) 和 [ViewModel](https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/CategoryViewModel.java) 中，都有使用到這個物件唷。\n","source":"_posts/Android-APP-05-API與物件.md","raw":"---\ntitle: '[Android APP] 05-API與物件'\ndate: 2021-10-11 21:59:31\ntags:\n- 13th鐵人賽\n- Android\n- API\n- 物件\n---\n\n昨天講的是 API 傳遞資料的流程，今天就來介紹怎麼把資料包裝成物件，方便傳遞吧。\n<!-- more -->\n\n一樣，會使用 JSON 結構比較簡單的 CategoryRepository 來作範例。\n\n# 寫法演變\n\n在還沒有用物件操作資料以前，我們的專案都是用 `ArrayList<HashMap<String, String>>` 來儲存資料的。\n\n大概會像這樣:\n```java\nArrayList<HashMap<String, String>> categoryList = new ArrayList<>();\ntry {\n    JSONObject json = new JSONObject(response);\n    JSONArray categories = json.getJSONArray(\"categories\");\n\n    for (int i = 0; i < categories.length(); i++) {\n        JSONObject category = categories.getJSONObject(i);\n\n        HashMap<String, String> category = new HashMap<>();\n        category.put(\"id\", category.getString(\"id\"));\n        category.put(\"name\", category.getString(\"name\"));\n\n        categoryList.add(category);\n    }\n    callback.onSuccess(categoryList);\n} catch (JSONException e) {\n    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n}\n```\n\n一開始這是簡單又方便的解決方式，不需要自己建立物件。試想，若是欄位變多了之後呢?\n\n在不同 Class 中傳遞物件時，你需要一直對照、複製貼上，確認兩邊的 key 是一致的、數量是一致的，而且 IDE 不會自動幫你補齊!!若是今天有不同格式的資料，但型態卻都是一樣的 `ArrayList<HashMap<String, String>>`，那又要如分辨呢?\n\n所以後來我才漸漸改成使用物件來包裝傳遞資料，可以為物件設置 Constructor，或是每個欄位的 getter、setter，這樣就能使用 IDE 的全功能囉。而且傳遞物件的時候就能清楚的知道，物件裡面裝的是什麼內容。甚至是 `Chat` 這種比較複雜(裡面還有包一個 `ArrayList`)的資料結構，也能輕鬆存取。\n\n![chat](chat.png)\n\n# 程式碼\n\n好了，那來介紹一下物件的建立吧!!\n\nJSON 格式是這樣的，可以觀察一下，其實每個物件都是由 `id`、`name` 組成的。\n\n```json\n{ \n    \"categories\": [ \n        { \n            \"id\": 0, \n            \"name\": \"全部\" \n        }, \n        { \n            \"id\": 1, \n            \"name\": \"長照據點與機構\" \n        }, \n        { \n            \"id\": 2, \n            \"name\": \"長照服務介紹與申請\" \n        }, \n        { \n            \"id\": 3, \n            \"name\": \"輔具服務\" \n        }, \n        { \n            \"id\": 4, \n            \"name\": \"外籍看護相關規範\" \n        }, \n        { \n            \"id\": 5, \n            \"name\": \"長照服務人員培訓與任用\" \n        } \n    ] \n}\n```\n\n對應到物件上，我設計了兩個字串，分別來儲存 `id` 和 `category`。\n\n```java\npublic class Category {\n    private final String mId;\n    private final String mName;\n\n    public Category(String id, String name) {\n        mId = id;\n        mName = name;\n    }\n\n    public String getId() {\n        return mId;\n    }\n\n    public String getName() {\n        return mName;\n    }\n}\n```\n\n如此一來，在 Repository 就能使用物件的方式來包裝資料了。可以比較一下，和前面的寫法有什麼不一樣哦。\n\n```java\nArrayList<Category> categoryList = new ArrayList<>();\ntry {\n    JSONObject json = new JSONObject(response);\n    JSONArray categories = json.getJSONArray(\"categories\");\n\n    for (int i = 0; i < categories.length(); i++) {\n        JSONObject category = categories.getJSONObject(i);\n        categoryList.add(new Category(\n                category.getString(\"id\"),\n                category.getString(\"name\")));\n    }\n\n    callback.onSuccess(categoryList);\n} catch (JSONException e) {\n    callback.onFail(\"發生一些錯誤\\n\" + e.getLocalizedMessage());\n}\n```\n\n在 [Activity](https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/CategoryActivity.java) 和 [ViewModel](https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/CategoryViewModel.java) 中，都有使用到這個物件唷。\n","slug":"Android-APP-05-API與物件","published":1,"updated":"2024-02-24T08:06:01.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myic0009k0jfbuszcfw1","content":"<p>昨天講的是 API 傳遞資料的流程，今天就來介紹怎麼把資料包裝成物件，方便傳遞吧。</p>\n<span id=\"more\"></span>\n\n<p>一樣，會使用 JSON 結構比較簡單的 CategoryRepository 來作範例。</p>\n<h1 id=\"寫法演變\"><a href=\"#寫法演變\" class=\"headerlink\" title=\"寫法演變\"></a>寫法演變</h1><p>在還沒有用物件操作資料以前，我們的專案都是用 <code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code> 來儲存資料的。</p>\n<p>大概會像這樣:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;HashMap&lt;String, String&gt;&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;String, String&gt; category = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        category.put(<span class=\"string\">&quot;id&quot;</span>, category.getString(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">        category.put(<span class=\"string\">&quot;name&quot;</span>, category.getString(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        categoryList.add(category);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback.onSuccess(categoryList);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始這是簡單又方便的解決方式，不需要自己建立物件。試想，若是欄位變多了之後呢?</p>\n<p>在不同 Class 中傳遞物件時，你需要一直對照、複製貼上，確認兩邊的 key 是一致的、數量是一致的，而且 IDE 不會自動幫你補齊!!若是今天有不同格式的資料，但型態卻都是一樣的 <code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code>，那又要如分辨呢?</p>\n<p>所以後來我才漸漸改成使用物件來包裝傳遞資料，可以為物件設置 Constructor，或是每個欄位的 getter、setter，這樣就能使用 IDE 的全功能囉。而且傳遞物件的時候就能清楚的知道，物件裡面裝的是什麼內容。甚至是 <code>Chat</code> 這種比較複雜(裡面還有包一個 <code>ArrayList</code>)的資料結構，也能輕鬆存取。</p>\n<p><img src=\"/2021/10/11/Android-APP-05-API%E8%88%87%E7%89%A9%E4%BB%B6/chat.png\" alt=\"chat\"></p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>好了，那來介紹一下物件的建立吧!!</p>\n<p>JSON 格式是這樣的，可以觀察一下，其實每個物件都是由 <code>id</code>、<code>name</code> 組成的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"attr\">&quot;categories&quot;</span>: [ </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;全部&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照據點與機構&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照服務介紹與申請&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;輔具服務&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">4</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;外籍看護相關規範&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">5</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照服務人員培訓與任用&quot;</span> </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>對應到物件上，我設計了兩個字串，分別來儲存 <code>id</code> 和 <code>category</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Category</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Category</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">        mId = id;</span><br><span class=\"line\">        mName = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此一來，在 Repository 就能使用物件的方式來包裝資料了。可以比較一下，和前面的寫法有什麼不一樣哦。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Category&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\">        categoryList.add(<span class=\"keyword\">new</span> Category(</span><br><span class=\"line\">                category.getString(<span class=\"string\">&quot;id&quot;</span>),</span><br><span class=\"line\">                category.getString(<span class=\"string\">&quot;name&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback.onSuccess(categoryList);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/CategoryActivity.java\">Activity</a> 和 <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/CategoryViewModel.java\">ViewModel</a> 中，都有使用到這個物件唷。</p>\n","site":{"data":{}},"excerpt":"<p>昨天講的是 API 傳遞資料的流程，今天就來介紹怎麼把資料包裝成物件，方便傳遞吧。</p>","more":"<p>一樣，會使用 JSON 結構比較簡單的 CategoryRepository 來作範例。</p>\n<h1 id=\"寫法演變\"><a href=\"#寫法演變\" class=\"headerlink\" title=\"寫法演變\"></a>寫法演變</h1><p>在還沒有用物件操作資料以前，我們的專案都是用 <code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code> 來儲存資料的。</p>\n<p>大概會像這樣:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;HashMap&lt;String, String&gt;&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;String, String&gt; category = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        category.put(<span class=\"string\">&quot;id&quot;</span>, category.getString(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">        category.put(<span class=\"string\">&quot;name&quot;</span>, category.getString(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        categoryList.add(category);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback.onSuccess(categoryList);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始這是簡單又方便的解決方式，不需要自己建立物件。試想，若是欄位變多了之後呢?</p>\n<p>在不同 Class 中傳遞物件時，你需要一直對照、複製貼上，確認兩邊的 key 是一致的、數量是一致的，而且 IDE 不會自動幫你補齊!!若是今天有不同格式的資料，但型態卻都是一樣的 <code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code>，那又要如分辨呢?</p>\n<p>所以後來我才漸漸改成使用物件來包裝傳遞資料，可以為物件設置 Constructor，或是每個欄位的 getter、setter，這樣就能使用 IDE 的全功能囉。而且傳遞物件的時候就能清楚的知道，物件裡面裝的是什麼內容。甚至是 <code>Chat</code> 這種比較複雜(裡面還有包一個 <code>ArrayList</code>)的資料結構，也能輕鬆存取。</p>\n<p><img src=\"/2021/10/11/Android-APP-05-API%E8%88%87%E7%89%A9%E4%BB%B6/chat.png\" alt=\"chat\"></p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>好了，那來介紹一下物件的建立吧!!</p>\n<p>JSON 格式是這樣的，可以觀察一下，其實每個物件都是由 <code>id</code>、<code>name</code> 組成的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"attr\">&quot;categories&quot;</span>: [ </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;全部&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照據點與機構&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照服務介紹與申請&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;輔具服務&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">4</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;外籍看護相關規範&quot;</span> </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">5</span>, </span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;長照服務人員培訓與任用&quot;</span> </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>對應到物件上，我設計了兩個字串，分別來儲存 <code>id</code> 和 <code>category</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Category</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Category</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">        mId = id;</span><br><span class=\"line\">        mName = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此一來，在 Repository 就能使用物件的方式來包裝資料了。可以比較一下，和前面的寫法有什麼不一樣哦。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Category&gt; categoryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JSONObject json = <span class=\"keyword\">new</span> JSONObject(response);</span><br><span class=\"line\">    JSONArray categories = json.getJSONArray(<span class=\"string\">&quot;categories&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; categories.length(); i++) &#123;</span><br><span class=\"line\">        JSONObject category = categories.getJSONObject(i);</span><br><span class=\"line\">        categoryList.add(<span class=\"keyword\">new</span> Category(</span><br><span class=\"line\">                category.getString(<span class=\"string\">&quot;id&quot;</span>),</span><br><span class=\"line\">                category.getString(<span class=\"string\">&quot;name&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback.onSuccess(categoryList);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">    callback.onFail(<span class=\"string\">&quot;發生一些錯誤\\n&quot;</span> + e.getLocalizedMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/CategoryActivity.java\">Activity</a> 和 <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/viewmodel/CategoryViewModel.java\">ViewModel</a> 中，都有使用到這個物件唷。</p>"},{"title":"[Android APP] 06-RecyclerView與資料顯示","date":"2021-10-12T14:33:22.000Z","_content":"\n這幾天我們已經從 API 取得資料到包裝成物件，再來就是資料顯示囉。\n\n這兩天的範例會以對話頁面為主，也會用到之前設計的 `Chat` 物件。今天要介紹把對話資料顯示到 RecyclerView 上面。\n<!-- more -->\n\n# View\n\nActivity 和 Adapter 在 MVVM 屬於 View 的範疇，用來顯示資料，不過他們負責的部分還是有點差別。Activiy 負責跟ViewModel 取得資料，把 List 的資料給 Adapter，還有所有點擊的監聽器。Adapter 只負責將接到的資料顯示到 RecyclerView 上。\n\n物件間的關係圖，可以參考 [[[Android APP] 01-架構介紹-MVVM](https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/)]。\n\n## ChatActivity\n\n```java\nOptionClickCallback optionClickCallback = new OptionClickCallback() {\n    @Override\n    public void onOptionClick(Option option) {\n        mViewModel.sendOptionMessage(option, categoryId);\n    }\n\n    @Override\n    public void noneOfAbove(Option option) {\n        mViewModel.sendOptionMessage(option, categoryId);\n    }\n};\nChatAdapter mChatAdapter = new ChatAdapter(ChatActivity.this, chatArrayList,\n        optionClickCallback);\nmRecyclerView.setLayoutManager(new LinearLayoutManager(ChatActivity.this));\nmRecyclerView.setAdapter(mChatAdapter);\nmRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - 1);\n```\n\n`new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);` 這行就是要將整包的資料設置給 Adapter，並且把「回饋按鈕」的監聽器也一起給 Adapter。\n\n## ChatAdapter\n\n```java\nprivate final Context mContext;\nprivate final ArrayList<Chat> mChatList;\nprivate final OptionClickCallback mOptionClickCallback;\n\npublic ChatAdapter(Context context, ArrayList<Chat> chatList, OptionClickCallback optionClickCallback) {\n    this.mContext = context;\n    this.mChatList = chatList;\n    this.mOptionClickCallback = optionClickCallback;\n}\n```\n\n一開始，我們需要一些變數和建構子(Constructor)儲存資料。\n\n\n```java\nprivate static class RecyclerViewViewHolder extends RecyclerView.ViewHolder {\n    ImageView icon;\n    TextView text, option_message;\n    ConstraintLayout constraintLayout;\n    LinearLayout optionsArea, options;\n    Button opt1, opt2, opt3;\n\n    public RecyclerViewViewHolder(@NonNull View itemView) {\n        super(itemView);\n\n        icon = itemView.findViewById(R.id.img);\n        text = itemView.findViewById(R.id.text);\n        option_message = itemView.findViewById(R.id.option_message);\n        constraintLayout = itemView.findViewById(R.id.constraint_layout);\n        optionsArea = itemView.findViewById(R.id.options_area);\n        options = itemView.findViewById(R.id.options);\n        opt1 = itemView.findViewById(R.id.option1);\n        opt2 = itemView.findViewById(R.id.option2);\n        opt3 = itemView.findViewById(R.id.option3);\n    }\n}\n```\n\n還需要一個 ViewHoder 用來 bind RecyclerView item 裡的物件。\n\n```java\n@Override\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n    Chat chat = mChatList.get(position);\n    RecyclerViewViewHolder viewHolder = (RecyclerViewViewHolder) holder;\n\n    viewHolder.icon.setImageResource(chat.getIcon());\n    viewHolder.text.setText(chat.getText());\n\n    // 奇數列，底色改灰色\n    if (position % 2 != 0) {\n        viewHolder.constraintLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.list_background));\n    }\n\n    // 有選項的 Chat，才顯示 Option 區塊\n    if (mChatList.get(position).getOptions().size() < 1) {\n        viewHolder.optionsArea.setVisibility(View.GONE);\n    } else {\n        // 取得所有 Option\n        ArrayList<Option> options = mChatList.get(position).getOptions();\n\n        // 設置選項的文字\n        viewHolder.opt1.setText(options.get(0).getQuestion());\n        viewHolder.opt2.setText(options.get(1).getQuestion());\n        viewHolder.opt3.setText(options.get(2).getQuestion());\n\n        // 設置三個選項的監聽器\n        viewHolder.opt1.setOnClickListener(v -> mOptionClickCallback.onOptionClick(options.get(0)));\n        viewHolder.opt2.setOnClickListener(v -> mOptionClickCallback.onOptionClick(options.get(1)));\n        viewHolder.opt3.setOnClickListener(v -> mOptionClickCallback.noneOfAbove(options.get(2)));\n\n        // 選項顯示的開關，預設 Gone\n        viewHolder.option_message.setOnClickListener(v -> {\n            if (viewHolder.options.getVisibility() == View.GONE) {\n                viewHolder.options.setVisibility(View.VISIBLE);\n            } else {\n                viewHolder.options.setVisibility(View.GONE);\n            }\n        });\n    }\n}\n```\n\n最後把對話訊息的文字、回饋按鈕的內容都設置上去，今天就完工囉!!\n","source":"_posts/Android-APP-06-RecyclerView與資料顯示.md","raw":"---\ntitle: '[Android APP] 06-RecyclerView與資料顯示'\ndate: 2021-10-12 22:33:22\ntags:\n- 13th鐵人賽\n- Android\n- RecyclerView\n---\n\n這幾天我們已經從 API 取得資料到包裝成物件，再來就是資料顯示囉。\n\n這兩天的範例會以對話頁面為主，也會用到之前設計的 `Chat` 物件。今天要介紹把對話資料顯示到 RecyclerView 上面。\n<!-- more -->\n\n# View\n\nActivity 和 Adapter 在 MVVM 屬於 View 的範疇，用來顯示資料，不過他們負責的部分還是有點差別。Activiy 負責跟ViewModel 取得資料，把 List 的資料給 Adapter，還有所有點擊的監聽器。Adapter 只負責將接到的資料顯示到 RecyclerView 上。\n\n物件間的關係圖，可以參考 [[[Android APP] 01-架構介紹-MVVM](https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/)]。\n\n## ChatActivity\n\n```java\nOptionClickCallback optionClickCallback = new OptionClickCallback() {\n    @Override\n    public void onOptionClick(Option option) {\n        mViewModel.sendOptionMessage(option, categoryId);\n    }\n\n    @Override\n    public void noneOfAbove(Option option) {\n        mViewModel.sendOptionMessage(option, categoryId);\n    }\n};\nChatAdapter mChatAdapter = new ChatAdapter(ChatActivity.this, chatArrayList,\n        optionClickCallback);\nmRecyclerView.setLayoutManager(new LinearLayoutManager(ChatActivity.this));\nmRecyclerView.setAdapter(mChatAdapter);\nmRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - 1);\n```\n\n`new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);` 這行就是要將整包的資料設置給 Adapter，並且把「回饋按鈕」的監聽器也一起給 Adapter。\n\n## ChatAdapter\n\n```java\nprivate final Context mContext;\nprivate final ArrayList<Chat> mChatList;\nprivate final OptionClickCallback mOptionClickCallback;\n\npublic ChatAdapter(Context context, ArrayList<Chat> chatList, OptionClickCallback optionClickCallback) {\n    this.mContext = context;\n    this.mChatList = chatList;\n    this.mOptionClickCallback = optionClickCallback;\n}\n```\n\n一開始，我們需要一些變數和建構子(Constructor)儲存資料。\n\n\n```java\nprivate static class RecyclerViewViewHolder extends RecyclerView.ViewHolder {\n    ImageView icon;\n    TextView text, option_message;\n    ConstraintLayout constraintLayout;\n    LinearLayout optionsArea, options;\n    Button opt1, opt2, opt3;\n\n    public RecyclerViewViewHolder(@NonNull View itemView) {\n        super(itemView);\n\n        icon = itemView.findViewById(R.id.img);\n        text = itemView.findViewById(R.id.text);\n        option_message = itemView.findViewById(R.id.option_message);\n        constraintLayout = itemView.findViewById(R.id.constraint_layout);\n        optionsArea = itemView.findViewById(R.id.options_area);\n        options = itemView.findViewById(R.id.options);\n        opt1 = itemView.findViewById(R.id.option1);\n        opt2 = itemView.findViewById(R.id.option2);\n        opt3 = itemView.findViewById(R.id.option3);\n    }\n}\n```\n\n還需要一個 ViewHoder 用來 bind RecyclerView item 裡的物件。\n\n```java\n@Override\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n    Chat chat = mChatList.get(position);\n    RecyclerViewViewHolder viewHolder = (RecyclerViewViewHolder) holder;\n\n    viewHolder.icon.setImageResource(chat.getIcon());\n    viewHolder.text.setText(chat.getText());\n\n    // 奇數列，底色改灰色\n    if (position % 2 != 0) {\n        viewHolder.constraintLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.list_background));\n    }\n\n    // 有選項的 Chat，才顯示 Option 區塊\n    if (mChatList.get(position).getOptions().size() < 1) {\n        viewHolder.optionsArea.setVisibility(View.GONE);\n    } else {\n        // 取得所有 Option\n        ArrayList<Option> options = mChatList.get(position).getOptions();\n\n        // 設置選項的文字\n        viewHolder.opt1.setText(options.get(0).getQuestion());\n        viewHolder.opt2.setText(options.get(1).getQuestion());\n        viewHolder.opt3.setText(options.get(2).getQuestion());\n\n        // 設置三個選項的監聽器\n        viewHolder.opt1.setOnClickListener(v -> mOptionClickCallback.onOptionClick(options.get(0)));\n        viewHolder.opt2.setOnClickListener(v -> mOptionClickCallback.onOptionClick(options.get(1)));\n        viewHolder.opt3.setOnClickListener(v -> mOptionClickCallback.noneOfAbove(options.get(2)));\n\n        // 選項顯示的開關，預設 Gone\n        viewHolder.option_message.setOnClickListener(v -> {\n            if (viewHolder.options.getVisibility() == View.GONE) {\n                viewHolder.options.setVisibility(View.VISIBLE);\n            } else {\n                viewHolder.options.setVisibility(View.GONE);\n            }\n        });\n    }\n}\n```\n\n最後把對話訊息的文字、回饋按鈕的內容都設置上去，今天就完工囉!!\n","slug":"Android-APP-06-RecyclerView與資料顯示","published":1,"updated":"2024-02-24T08:06:01.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myid000bk0jfent416ji","content":"<p>這幾天我們已經從 API 取得資料到包裝成物件，再來就是資料顯示囉。</p>\n<p>這兩天的範例會以對話頁面為主，也會用到之前設計的 <code>Chat</code> 物件。今天要介紹把對話資料顯示到 RecyclerView 上面。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h1><p>Activity 和 Adapter 在 MVVM 屬於 View 的範疇，用來顯示資料，不過他們負責的部分還是有點差別。Activiy 負責跟ViewModel 取得資料，把 List 的資料給 Adapter，還有所有點擊的監聽器。Adapter 只負責將接到的資料顯示到 RecyclerView 上。</p>\n<p>物件間的關係圖，可以參考 [<a href=\"https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/\">[Android APP] 01-架構介紹-MVVM</a>]。</p>\n<h2 id=\"ChatActivity\"><a href=\"#ChatActivity\" class=\"headerlink\" title=\"ChatActivity\"></a>ChatActivity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OptionClickCallback optionClickCallback = <span class=\"keyword\">new</span> OptionClickCallback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOptionClick</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">        mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noneOfAbove</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">        mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ChatAdapter mChatAdapter = <span class=\"keyword\">new</span> ChatAdapter(ChatActivity.<span class=\"keyword\">this</span>, chatArrayList,</span><br><span class=\"line\">        optionClickCallback);</span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(ChatActivity.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">mRecyclerView.setAdapter(mChatAdapter);</span><br><span class=\"line\">mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);</code> 這行就是要將整包的資料設置給 Adapter，並且把「回饋按鈕」的監聽器也一起給 Adapter。</p>\n<h2 id=\"ChatAdapter\"><a href=\"#ChatAdapter\" class=\"headerlink\" title=\"ChatAdapter\"></a>ChatAdapter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;Chat&gt; mChatList;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OptionClickCallback mOptionClickCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChatAdapter</span><span class=\"params\">(Context context, ArrayList&lt;Chat&gt; chatList, OptionClickCallback optionClickCallback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mChatList = chatList;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mOptionClickCallback = optionClickCallback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始，我們需要一些變數和建構子(Constructor)儲存資料。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerViewViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">    ImageView icon;</span><br><span class=\"line\">    TextView text, option_message;</span><br><span class=\"line\">    ConstraintLayout constraintLayout;</span><br><span class=\"line\">    LinearLayout optionsArea, options;</span><br><span class=\"line\">    Button opt1, opt2, opt3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerViewViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\"></span><br><span class=\"line\">        icon = itemView.findViewById(R.id.img);</span><br><span class=\"line\">        text = itemView.findViewById(R.id.text);</span><br><span class=\"line\">        option_message = itemView.findViewById(R.id.option_message);</span><br><span class=\"line\">        constraintLayout = itemView.findViewById(R.id.constraint_layout);</span><br><span class=\"line\">        optionsArea = itemView.findViewById(R.id.options_area);</span><br><span class=\"line\">        options = itemView.findViewById(R.id.options);</span><br><span class=\"line\">        opt1 = itemView.findViewById(R.id.option1);</span><br><span class=\"line\">        opt2 = itemView.findViewById(R.id.option2);</span><br><span class=\"line\">        opt3 = itemView.findViewById(R.id.option3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>還需要一個 ViewHoder 用來 bind RecyclerView item 裡的物件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">    Chat chat = mChatList.get(position);</span><br><span class=\"line\">    RecyclerViewViewHolder viewHolder = (RecyclerViewViewHolder) holder;</span><br><span class=\"line\"></span><br><span class=\"line\">    viewHolder.icon.setImageResource(chat.getIcon());</span><br><span class=\"line\">    viewHolder.text.setText(chat.getText());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 奇數列，底色改灰色</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        viewHolder.constraintLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.list_background));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有選項的 Chat，才顯示 Option 區塊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mChatList.get(position).getOptions().size() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        viewHolder.optionsArea.setVisibility(View.GONE);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取得所有 Option</span></span><br><span class=\"line\">        ArrayList&lt;Option&gt; options = mChatList.get(position).getOptions();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 設置選項的文字</span></span><br><span class=\"line\">        viewHolder.opt1.setText(options.get(<span class=\"number\">0</span>).getQuestion());</span><br><span class=\"line\">        viewHolder.opt2.setText(options.get(<span class=\"number\">1</span>).getQuestion());</span><br><span class=\"line\">        viewHolder.opt3.setText(options.get(<span class=\"number\">2</span>).getQuestion());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 設置三個選項的監聽器</span></span><br><span class=\"line\">        viewHolder.opt1.setOnClickListener(v -&gt; mOptionClickCallback.onOptionClick(options.get(<span class=\"number\">0</span>)));</span><br><span class=\"line\">        viewHolder.opt2.setOnClickListener(v -&gt; mOptionClickCallback.onOptionClick(options.get(<span class=\"number\">1</span>)));</span><br><span class=\"line\">        viewHolder.opt3.setOnClickListener(v -&gt; mOptionClickCallback.noneOfAbove(options.get(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 選項顯示的開關，預設 Gone</span></span><br><span class=\"line\">        viewHolder.option_message.setOnClickListener(v -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewHolder.options.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">                viewHolder.options.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                viewHolder.options.setVisibility(View.GONE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後把對話訊息的文字、回饋按鈕的內容都設置上去，今天就完工囉!!</p>\n","site":{"data":{}},"excerpt":"<p>這幾天我們已經從 API 取得資料到包裝成物件，再來就是資料顯示囉。</p>\n<p>這兩天的範例會以對話頁面為主，也會用到之前設計的 <code>Chat</code> 物件。今天要介紹把對話資料顯示到 RecyclerView 上面。</p>","more":"<h1 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h1><p>Activity 和 Adapter 在 MVVM 屬於 View 的範疇，用來顯示資料，不過他們負責的部分還是有點差別。Activiy 負責跟ViewModel 取得資料，把 List 的資料給 Adapter，還有所有點擊的監聽器。Adapter 只負責將接到的資料顯示到 RecyclerView 上。</p>\n<p>物件間的關係圖，可以參考 [<a href=\"https://dreambo4.github.io/2021/10/07/Android-APP-01-%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-MVVM/\">[Android APP] 01-架構介紹-MVVM</a>]。</p>\n<h2 id=\"ChatActivity\"><a href=\"#ChatActivity\" class=\"headerlink\" title=\"ChatActivity\"></a>ChatActivity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OptionClickCallback optionClickCallback = <span class=\"keyword\">new</span> OptionClickCallback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOptionClick</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">        mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noneOfAbove</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">        mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ChatAdapter mChatAdapter = <span class=\"keyword\">new</span> ChatAdapter(ChatActivity.<span class=\"keyword\">this</span>, chatArrayList,</span><br><span class=\"line\">        optionClickCallback);</span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(ChatActivity.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">mRecyclerView.setAdapter(mChatAdapter);</span><br><span class=\"line\">mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);</code> 這行就是要將整包的資料設置給 Adapter，並且把「回饋按鈕」的監聽器也一起給 Adapter。</p>\n<h2 id=\"ChatAdapter\"><a href=\"#ChatAdapter\" class=\"headerlink\" title=\"ChatAdapter\"></a>ChatAdapter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;Chat&gt; mChatList;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OptionClickCallback mOptionClickCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChatAdapter</span><span class=\"params\">(Context context, ArrayList&lt;Chat&gt; chatList, OptionClickCallback optionClickCallback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mChatList = chatList;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mOptionClickCallback = optionClickCallback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始，我們需要一些變數和建構子(Constructor)儲存資料。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerViewViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">    ImageView icon;</span><br><span class=\"line\">    TextView text, option_message;</span><br><span class=\"line\">    ConstraintLayout constraintLayout;</span><br><span class=\"line\">    LinearLayout optionsArea, options;</span><br><span class=\"line\">    Button opt1, opt2, opt3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerViewViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\"></span><br><span class=\"line\">        icon = itemView.findViewById(R.id.img);</span><br><span class=\"line\">        text = itemView.findViewById(R.id.text);</span><br><span class=\"line\">        option_message = itemView.findViewById(R.id.option_message);</span><br><span class=\"line\">        constraintLayout = itemView.findViewById(R.id.constraint_layout);</span><br><span class=\"line\">        optionsArea = itemView.findViewById(R.id.options_area);</span><br><span class=\"line\">        options = itemView.findViewById(R.id.options);</span><br><span class=\"line\">        opt1 = itemView.findViewById(R.id.option1);</span><br><span class=\"line\">        opt2 = itemView.findViewById(R.id.option2);</span><br><span class=\"line\">        opt3 = itemView.findViewById(R.id.option3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>還需要一個 ViewHoder 用來 bind RecyclerView item 裡的物件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">    Chat chat = mChatList.get(position);</span><br><span class=\"line\">    RecyclerViewViewHolder viewHolder = (RecyclerViewViewHolder) holder;</span><br><span class=\"line\"></span><br><span class=\"line\">    viewHolder.icon.setImageResource(chat.getIcon());</span><br><span class=\"line\">    viewHolder.text.setText(chat.getText());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 奇數列，底色改灰色</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        viewHolder.constraintLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.list_background));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有選項的 Chat，才顯示 Option 區塊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mChatList.get(position).getOptions().size() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        viewHolder.optionsArea.setVisibility(View.GONE);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取得所有 Option</span></span><br><span class=\"line\">        ArrayList&lt;Option&gt; options = mChatList.get(position).getOptions();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 設置選項的文字</span></span><br><span class=\"line\">        viewHolder.opt1.setText(options.get(<span class=\"number\">0</span>).getQuestion());</span><br><span class=\"line\">        viewHolder.opt2.setText(options.get(<span class=\"number\">1</span>).getQuestion());</span><br><span class=\"line\">        viewHolder.opt3.setText(options.get(<span class=\"number\">2</span>).getQuestion());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 設置三個選項的監聽器</span></span><br><span class=\"line\">        viewHolder.opt1.setOnClickListener(v -&gt; mOptionClickCallback.onOptionClick(options.get(<span class=\"number\">0</span>)));</span><br><span class=\"line\">        viewHolder.opt2.setOnClickListener(v -&gt; mOptionClickCallback.onOptionClick(options.get(<span class=\"number\">1</span>)));</span><br><span class=\"line\">        viewHolder.opt3.setOnClickListener(v -&gt; mOptionClickCallback.noneOfAbove(options.get(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 選項顯示的開關，預設 Gone</span></span><br><span class=\"line\">        viewHolder.option_message.setOnClickListener(v -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewHolder.options.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">                viewHolder.options.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                viewHolder.options.setVisibility(View.GONE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後把對話訊息的文字、回饋按鈕的內容都設置上去，今天就完工囉!!</p>"},{"title":"Apple Silicon 晶片不支援 ADB ARM","date":"2022-10-26T17:09:22.000Z","_content":"\n![err_msg](err_msg.jpeg)\n\n<!-- more -->\n\n重點是這句\n```\njava.io.IOException: error=86, Bad CPU tyoe in executable\n```\n\n原因是 ADB 不支援 ARM 架構\n參考 [Stockoverflow](https://stackoverflow.com/questions/56553879/android-studio-cause-error-86-bad-cpu-type-in-executable)\n輸入這行指令就可以解決\n```shell\nsoftwareupdate --install-rosetta\n```","source":"_posts/Apple-Silicon-晶片不支援-ADB-ARM.md","raw":"---\ntitle: Apple Silicon 晶片不支援 ADB ARM\ndate: 2022-10-27 01:09:22\ntags:\n- Android\n- Apple Silicon\n---\n\n![err_msg](err_msg.jpeg)\n\n<!-- more -->\n\n重點是這句\n```\njava.io.IOException: error=86, Bad CPU tyoe in executable\n```\n\n原因是 ADB 不支援 ARM 架構\n參考 [Stockoverflow](https://stackoverflow.com/questions/56553879/android-studio-cause-error-86-bad-cpu-type-in-executable)\n輸入這行指令就可以解決\n```shell\nsoftwareupdate --install-rosetta\n```","slug":"Apple-Silicon-晶片不支援-ADB-ARM","published":1,"updated":"2024-02-24T13:09:52.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myid000ck0jfblw8cswo","content":"<p><img src=\"/2022/10/27/Apple-Silicon-%E6%99%B6%E7%89%87%E4%B8%8D%E6%94%AF%E6%8F%B4-ADB-ARM/err_msg.jpeg\" alt=\"err_msg\"></p>\n<span id=\"more\"></span>\n\n<p>重點是這句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: error&#x3D;86, Bad CPU tyoe in executable</span><br></pre></td></tr></table></figure>\n\n<p>原因是 ADB 不支援 ARM 架構<br>參考 <a href=\"https://stackoverflow.com/questions/56553879/android-studio-cause-error-86-bad-cpu-type-in-executable\">Stockoverflow</a><br>輸入這行指令就可以解決</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">softwareupdate --install-rosetta</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/2022/10/27/Apple-Silicon-%E6%99%B6%E7%89%87%E4%B8%8D%E6%94%AF%E6%8F%B4-ADB-ARM/err_msg.jpeg\" alt=\"err_msg\"></p>","more":"<p>重點是這句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: error&#x3D;86, Bad CPU tyoe in executable</span><br></pre></td></tr></table></figure>\n\n<p>原因是 ADB 不支援 ARM 架構<br>參考 <a href=\"https://stackoverflow.com/questions/56553879/android-studio-cause-error-86-bad-cpu-type-in-executable\">Stockoverflow</a><br>輸入這行指令就可以解決</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">softwareupdate --install-rosetta</span><br></pre></td></tr></table></figure>"},{"title":"[Android APP] 07-MVVM中的RecyclerView與Adapter","date":"2021-10-13T14:22:29.000Z","_content":"\n鐵人賽快到尾聲了，今天想介紹在控制 RecyclerView 中回饋按鈕時，遇到的狀況。想想，這篇好像應該和前一篇順序對調，畢竟是先有這些糾結，才有後面自己歸納出的那些寫法。所以先暫時忘掉昨天的寫法，回到 MVVM 的初學者吧。\n<!-- more -->\n\n**大家覺得 Adapter 應該屬於 View 層或是 ViewModel 層呢?**\n\n第一次寫 MVVM 搭配 RecyclerView，突然不知道要怎麼用，爬了網路上的文章後，卻又更更更混亂了。\n可以先看一下這兩篇:\n- [#請益：MVVM架構中，如何串接Adapter？](https://www.facebook.com/groups/523386591081376/permalink/3896247253795276/)\n- [Android # Best practice Challenge for MVVM x RecyclerView](https://medium.com/gdg-taipei/android-best-practice-challenge-for-mvvm-x-recyclerview-acd9e9ad0dae)\n\n# Adapter 的歸類\n\n取自第一篇的整理，網路上的寫法大致上有三種\n1. VM 持有 Adapter\n2. V持有Adapter，但每次資料更新都重建Adapter\n3. V持有Adapter，但每次都 notifyDataSetChanged()\n\n我後來又爬了多文章和範例，也和朋友討論過，還是覺得 Adapter 負責資料的顯示應該屬於 View，而我實作的方法偏第 2 種。下面附上我的程式碼:\n\n完整版程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\n\n```java\nprivate final Observer<ArrayList<Chat>> mChatListUpdateObserver = new Observer<ArrayList<Chat>>() {\n    @Override\n    public void onChanged(ArrayList<Chat> chatArrayList) {\n        OptionClickCallback optionClickCallback = new OptionClickCallback() {\n            @Override\n            public void onOptionClick(Option option) {\n                mViewModel.sendOptionMessage(option, categoryId);\n            }\n\n            @Override\n            public void noneOfAbove(Option option) {\n                mViewModel.sendOptionMessage(option, categoryId);\n            }\n        };\n        ChatAdapter mChatAdapter = new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(ChatActivity.this));\n        mRecyclerView.setAdapter(mChatAdapter);\n        mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - 1);\n        mProgressLayout.setVisibility(View.GONE);\n    }\n};\n```\n\n我是在聊天紀錄的 Observer 裡，只要聊天紀錄有變動，就重新生成 Adapter 和提供更新後的聊天紀錄。\n\n# Adapter 和 ViewModel 的互動\n\n既然已經決定 Adapter 屬於 View，我遇到的第二個問題是當 **Adapter 要怎麼和 ViewModel 互動?**\n\n我的案例是回饋按鈕被點擊後，需要使用 `ChatViewModel` 中的 `sendOptionMessage()`，要怎麼呼叫呢?\n\n1. Activity 透過 Adapter 的建構子，將 Viewmodel 物件傳入。在 Adapter 中處理監聽事件，並使用傳入的 ViewModel 物件。\n2. 在 Adapter 中建立一個 ViewModel 物件，一切由 Adapter 自己操作 (這作法我沒試過，不確定會不會有什麼問題)\n3. 維持 ViewModel 的物件只有一個，且由 Activity 操作。讓被點擊的事件，回歸到 Activity 處理。\n\n我不確定第一種作法，將 ViewModel 當參數傳來傳去好不好，不過我自己不是很喜歡。所以，後來是選用第 3 種方式。\n\n這個問題，我也不確定作法好不好，如果你有什麼想法歡迎留言討論哦!!\n","source":"_posts/Android-APP-07-MVVM中的RecyclerView與Adapter.md","raw":"---\ntitle: '[Android APP] 07-MVVM中的RecyclerView與Adapter'\ndate: 2021-10-13 22:22:29\ntags:\n- 13th鐵人賽\n- Android\n- RecyclerView\n- MVVM\n---\n\n鐵人賽快到尾聲了，今天想介紹在控制 RecyclerView 中回饋按鈕時，遇到的狀況。想想，這篇好像應該和前一篇順序對調，畢竟是先有這些糾結，才有後面自己歸納出的那些寫法。所以先暫時忘掉昨天的寫法，回到 MVVM 的初學者吧。\n<!-- more -->\n\n**大家覺得 Adapter 應該屬於 View 層或是 ViewModel 層呢?**\n\n第一次寫 MVVM 搭配 RecyclerView，突然不知道要怎麼用，爬了網路上的文章後，卻又更更更混亂了。\n可以先看一下這兩篇:\n- [#請益：MVVM架構中，如何串接Adapter？](https://www.facebook.com/groups/523386591081376/permalink/3896247253795276/)\n- [Android # Best practice Challenge for MVVM x RecyclerView](https://medium.com/gdg-taipei/android-best-practice-challenge-for-mvvm-x-recyclerview-acd9e9ad0dae)\n\n# Adapter 的歸類\n\n取自第一篇的整理，網路上的寫法大致上有三種\n1. VM 持有 Adapter\n2. V持有Adapter，但每次資料更新都重建Adapter\n3. V持有Adapter，但每次都 notifyDataSetChanged()\n\n我後來又爬了多文章和範例，也和朋友討論過，還是覺得 Adapter 負責資料的顯示應該屬於 View，而我實作的方法偏第 2 種。下面附上我的程式碼:\n\n完整版程式碼: https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\n\n```java\nprivate final Observer<ArrayList<Chat>> mChatListUpdateObserver = new Observer<ArrayList<Chat>>() {\n    @Override\n    public void onChanged(ArrayList<Chat> chatArrayList) {\n        OptionClickCallback optionClickCallback = new OptionClickCallback() {\n            @Override\n            public void onOptionClick(Option option) {\n                mViewModel.sendOptionMessage(option, categoryId);\n            }\n\n            @Override\n            public void noneOfAbove(Option option) {\n                mViewModel.sendOptionMessage(option, categoryId);\n            }\n        };\n        ChatAdapter mChatAdapter = new ChatAdapter(ChatActivity.this, chatArrayList, optionClickCallback);\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(ChatActivity.this));\n        mRecyclerView.setAdapter(mChatAdapter);\n        mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - 1);\n        mProgressLayout.setVisibility(View.GONE);\n    }\n};\n```\n\n我是在聊天紀錄的 Observer 裡，只要聊天紀錄有變動，就重新生成 Adapter 和提供更新後的聊天紀錄。\n\n# Adapter 和 ViewModel 的互動\n\n既然已經決定 Adapter 屬於 View，我遇到的第二個問題是當 **Adapter 要怎麼和 ViewModel 互動?**\n\n我的案例是回饋按鈕被點擊後，需要使用 `ChatViewModel` 中的 `sendOptionMessage()`，要怎麼呼叫呢?\n\n1. Activity 透過 Adapter 的建構子，將 Viewmodel 物件傳入。在 Adapter 中處理監聽事件，並使用傳入的 ViewModel 物件。\n2. 在 Adapter 中建立一個 ViewModel 物件，一切由 Adapter 自己操作 (這作法我沒試過，不確定會不會有什麼問題)\n3. 維持 ViewModel 的物件只有一個，且由 Activity 操作。讓被點擊的事件，回歸到 Activity 處理。\n\n我不確定第一種作法，將 ViewModel 當參數傳來傳去好不好，不過我自己不是很喜歡。所以，後來是選用第 3 種方式。\n\n這個問題，我也不確定作法好不好，如果你有什麼想法歡迎留言討論哦!!\n","slug":"Android-APP-07-MVVM中的RecyclerView與Adapter","published":1,"updated":"2024-02-24T08:06:01.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myid000ek0jf50hv69mr","content":"<p>鐵人賽快到尾聲了，今天想介紹在控制 RecyclerView 中回饋按鈕時，遇到的狀況。想想，這篇好像應該和前一篇順序對調，畢竟是先有這些糾結，才有後面自己歸納出的那些寫法。所以先暫時忘掉昨天的寫法，回到 MVVM 的初學者吧。</p>\n<span id=\"more\"></span>\n\n<p><strong>大家覺得 Adapter 應該屬於 View 層或是 ViewModel 層呢?</strong></p>\n<p>第一次寫 MVVM 搭配 RecyclerView，突然不知道要怎麼用，爬了網路上的文章後，卻又更更更混亂了。<br>可以先看一下這兩篇:</p>\n<ul>\n<li><a href=\"https://www.facebook.com/groups/523386591081376/permalink/3896247253795276/\">#請益：MVVM架構中，如何串接Adapter？</a></li>\n<li><a href=\"https://medium.com/gdg-taipei/android-best-practice-challenge-for-mvvm-x-recyclerview-acd9e9ad0dae\">Android # Best practice Challenge for MVVM x RecyclerView</a></li>\n</ul>\n<h1 id=\"Adapter-的歸類\"><a href=\"#Adapter-的歸類\" class=\"headerlink\" title=\"Adapter 的歸類\"></a>Adapter 的歸類</h1><p>取自第一篇的整理，網路上的寫法大致上有三種</p>\n<ol>\n<li>VM 持有 Adapter</li>\n<li>V持有Adapter，但每次資料更新都重建Adapter</li>\n<li>V持有Adapter，但每次都 notifyDataSetChanged()</li>\n</ol>\n<p>我後來又爬了多文章和範例，也和朋友討論過，還是覺得 Adapter 負責資料的顯示應該屬於 View，而我實作的方法偏第 2 種。下面附上我的程式碼:</p>\n<p>完整版程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Observer&lt;ArrayList&lt;Chat&gt;&gt; mChatListUpdateObserver = <span class=\"keyword\">new</span> Observer&lt;ArrayList&lt;Chat&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(ArrayList&lt;Chat&gt; chatArrayList)</span> </span>&#123;</span><br><span class=\"line\">        OptionClickCallback optionClickCallback = <span class=\"keyword\">new</span> OptionClickCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOptionClick</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">                mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noneOfAbove</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">                mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChatAdapter mChatAdapter = <span class=\"keyword\">new</span> ChatAdapter(ChatActivity.<span class=\"keyword\">this</span>, chatArrayList, optionClickCallback);</span><br><span class=\"line\">        mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(ChatActivity.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">        mRecyclerView.setAdapter(mChatAdapter);</span><br><span class=\"line\">        mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        mProgressLayout.setVisibility(View.GONE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我是在聊天紀錄的 Observer 裡，只要聊天紀錄有變動，就重新生成 Adapter 和提供更新後的聊天紀錄。</p>\n<h1 id=\"Adapter-和-ViewModel-的互動\"><a href=\"#Adapter-和-ViewModel-的互動\" class=\"headerlink\" title=\"Adapter 和 ViewModel 的互動\"></a>Adapter 和 ViewModel 的互動</h1><p>既然已經決定 Adapter 屬於 View，我遇到的第二個問題是當 <strong>Adapter 要怎麼和 ViewModel 互動?</strong></p>\n<p>我的案例是回饋按鈕被點擊後，需要使用 <code>ChatViewModel</code> 中的 <code>sendOptionMessage()</code>，要怎麼呼叫呢?</p>\n<ol>\n<li>Activity 透過 Adapter 的建構子，將 Viewmodel 物件傳入。在 Adapter 中處理監聽事件，並使用傳入的 ViewModel 物件。</li>\n<li>在 Adapter 中建立一個 ViewModel 物件，一切由 Adapter 自己操作 (這作法我沒試過，不確定會不會有什麼問題)</li>\n<li>維持 ViewModel 的物件只有一個，且由 Activity 操作。讓被點擊的事件，回歸到 Activity 處理。</li>\n</ol>\n<p>我不確定第一種作法，將 ViewModel 當參數傳來傳去好不好，不過我自己不是很喜歡。所以，後來是選用第 3 種方式。</p>\n<p>這個問題，我也不確定作法好不好，如果你有什麼想法歡迎留言討論哦!!</p>\n","site":{"data":{}},"excerpt":"<p>鐵人賽快到尾聲了，今天想介紹在控制 RecyclerView 中回饋按鈕時，遇到的狀況。想想，這篇好像應該和前一篇順序對調，畢竟是先有這些糾結，才有後面自己歸納出的那些寫法。所以先暫時忘掉昨天的寫法，回到 MVVM 的初學者吧。</p>","more":"<p><strong>大家覺得 Adapter 應該屬於 View 層或是 ViewModel 層呢?</strong></p>\n<p>第一次寫 MVVM 搭配 RecyclerView，突然不知道要怎麼用，爬了網路上的文章後，卻又更更更混亂了。<br>可以先看一下這兩篇:</p>\n<ul>\n<li><a href=\"https://www.facebook.com/groups/523386591081376/permalink/3896247253795276/\">#請益：MVVM架構中，如何串接Adapter？</a></li>\n<li><a href=\"https://medium.com/gdg-taipei/android-best-practice-challenge-for-mvvm-x-recyclerview-acd9e9ad0dae\">Android # Best practice Challenge for MVVM x RecyclerView</a></li>\n</ul>\n<h1 id=\"Adapter-的歸類\"><a href=\"#Adapter-的歸類\" class=\"headerlink\" title=\"Adapter 的歸類\"></a>Adapter 的歸類</h1><p>取自第一篇的整理，網路上的寫法大致上有三種</p>\n<ol>\n<li>VM 持有 Adapter</li>\n<li>V持有Adapter，但每次資料更新都重建Adapter</li>\n<li>V持有Adapter，但每次都 notifyDataSetChanged()</li>\n</ol>\n<p>我後來又爬了多文章和範例，也和朋友討論過，還是覺得 Adapter 負責資料的顯示應該屬於 View，而我實作的方法偏第 2 種。下面附上我的程式碼:</p>\n<p>完整版程式碼: <a href=\"https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java\">https://gitlab.com/graduate_lab415/chatbot/-/blob/master/app/src/main/java/com/cmrdb/app/chatbot/view/ChatActivity.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Observer&lt;ArrayList&lt;Chat&gt;&gt; mChatListUpdateObserver = <span class=\"keyword\">new</span> Observer&lt;ArrayList&lt;Chat&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(ArrayList&lt;Chat&gt; chatArrayList)</span> </span>&#123;</span><br><span class=\"line\">        OptionClickCallback optionClickCallback = <span class=\"keyword\">new</span> OptionClickCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOptionClick</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">                mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noneOfAbove</span><span class=\"params\">(Option option)</span> </span>&#123;</span><br><span class=\"line\">                mViewModel.sendOptionMessage(option, categoryId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChatAdapter mChatAdapter = <span class=\"keyword\">new</span> ChatAdapter(ChatActivity.<span class=\"keyword\">this</span>, chatArrayList, optionClickCallback);</span><br><span class=\"line\">        mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(ChatActivity.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">        mRecyclerView.setAdapter(mChatAdapter);</span><br><span class=\"line\">        mRecyclerView.scrollToPosition(mChatAdapter.getItemCount() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        mProgressLayout.setVisibility(View.GONE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我是在聊天紀錄的 Observer 裡，只要聊天紀錄有變動，就重新生成 Adapter 和提供更新後的聊天紀錄。</p>\n<h1 id=\"Adapter-和-ViewModel-的互動\"><a href=\"#Adapter-和-ViewModel-的互動\" class=\"headerlink\" title=\"Adapter 和 ViewModel 的互動\"></a>Adapter 和 ViewModel 的互動</h1><p>既然已經決定 Adapter 屬於 View，我遇到的第二個問題是當 <strong>Adapter 要怎麼和 ViewModel 互動?</strong></p>\n<p>我的案例是回饋按鈕被點擊後，需要使用 <code>ChatViewModel</code> 中的 <code>sendOptionMessage()</code>，要怎麼呼叫呢?</p>\n<ol>\n<li>Activity 透過 Adapter 的建構子，將 Viewmodel 物件傳入。在 Adapter 中處理監聽事件，並使用傳入的 ViewModel 物件。</li>\n<li>在 Adapter 中建立一個 ViewModel 物件，一切由 Adapter 自己操作 (這作法我沒試過，不確定會不會有什麼問題)</li>\n<li>維持 ViewModel 的物件只有一個，且由 Activity 操作。讓被點擊的事件，回歸到 Activity 處理。</li>\n</ol>\n<p>我不確定第一種作法，將 ViewModel 當參數傳來傳去好不好，不過我自己不是很喜歡。所以，後來是選用第 3 種方式。</p>\n<p>這個問題，我也不確定作法好不好，如果你有什麼想法歡迎留言討論哦!!</p>"},{"title":"BMI計算器-取得EditText中的字","date":"2017-12-13T18:02:40.000Z","_content":"\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=626](https://blog.cmrdb.cs.pu.edu.tw/?p=626)\n\n# 設計畫面\n\n在畫面上拉出2個TextView、2個EditText和1個Button\n<!-- more -->\n\n可以參考畫面:\n![image1](image1.png)\n\nactivity_main.xml:\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"8dp\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.edittextdemo.MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"2\"\n            android:textSize=\"20dp\"\n            android:text=\"請輸入身高 : \" />\n\n        <EditText\n            android:id=\"@+id/etH\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:textSize=\"20dp\"\n            android:hint=\"(公尺)\" />\n    </LinearLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:id=\"@+id/textView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"2\"\n            android:textSize=\"20dp\"\n            android:text=\"請輸入體重 : \" />\n\n        <EditText\n            android:id=\"@+id/etW\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:textSize=\"20dp\"\n            android:hint=\"(公斤)\" />\n    </LinearLayout>\n\n    <Button\n        android:id=\"@+id/btnStart\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginHorizontal=\"20dp\"\n        android:layout_weight=\"1\"\n        android:textSize=\"20dp\"\n        android:text=\"開始計算\" />\n\n</LinearLayout>\n\n```\n\n## 講解\n**android:layout_margin=\"8dp\"**\n可以用這張圖理解:\n![image2](image2.png)\n藍色框框是主要內容，padding是指內容與邊框間的距離，margin是指距離外面的框框多少距離，上下左右都可以調整\n\n**android:layout_weight=\"1\"**\n當使用LinearLayout排版時，可以調整每個物件在畫面上顯示的比重\n![image3](image3.png)\n比重越小，所分配到的範圍就越大\n\n**android:textSize=\"20dp\"**\n設定字型大小\n\n**android:hint=\"(公斤)\"**\n設定提示訊息\n\n# 撰寫程式碼\n\n## 宣告物件\n```android\nEditText etH,etW;\nButton btnStart;\n```\n\n## 取得 View 物件\n```android\netH = findViewById(R.id.etH);\netW = findViewById(R.id.etW);\nbtnStart = findViewById(R.id.btnStart);\n```\n\n## 設置監聽器\n```android\nbtnStart.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n\n    }\n});\n```\n\n## 取得EditText中資料\n```android\ndouble h = Double.parseDouble(etH.getText().toString());\ndouble w = Double.parseDouble(etW.getText().toString());\n```\n\n## 計算BMI\nBMI的公式是 **體重/身高^2** $(\\frac{kg}{m^2})$\n```android\ndouble bmi = w/(Math.pow(h,2));\n```\n\n## 顯示出BMI\n```android\nToast.makeText(getApplicationContext(),String.valueOf(bmi),Toast.LENGTH_LONG).show();\n```\n> Toast可以顯示提示訊息\n\n## 參考程式碼\n```android\npackage com.example.yr.edittextdemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n\n    //宣告物件\n    EditText etH,etW;\n    Button btnStart;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 取得 View 物件\n        etH = findViewById(R.id.etH);\n        etW = findViewById(R.id.etW);\n        btnStart = findViewById(R.id.btnStart);\n\n        // 設置監聽器\n        btnStart.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n                // 取得EditText中資料\n                double h = Double.parseDouble(etH.getText().toString());\n                double w = Double.parseDouble(etW.getText().toString());\n\n                // 計算BMI\n                double bmi = w/(Math.pow(h,2));\n\n                // 顯示出BMI\n                Toast.makeText(MainActivity.this,String.valueOf(bmi),Toast.LENGTH_LONG).show();\n\n            }\n        });\n\n\n    }\n}\n```\n\n# 執行畫面\n![image4](image4.png)\n","source":"_posts/BMI計算器-取得EditText中的字.md","raw":"---\ntitle: BMI計算器-取得EditText中的字\ndate: 2017-12-14 02:02:40\ntags:\n- Android\n- EditText\n- 行雲部落格\n---\n\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=626](https://blog.cmrdb.cs.pu.edu.tw/?p=626)\n\n# 設計畫面\n\n在畫面上拉出2個TextView、2個EditText和1個Button\n<!-- more -->\n\n可以參考畫面:\n![image1](image1.png)\n\nactivity_main.xml:\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"8dp\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.edittextdemo.MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"2\"\n            android:textSize=\"20dp\"\n            android:text=\"請輸入身高 : \" />\n\n        <EditText\n            android:id=\"@+id/etH\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:textSize=\"20dp\"\n            android:hint=\"(公尺)\" />\n    </LinearLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:id=\"@+id/textView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"2\"\n            android:textSize=\"20dp\"\n            android:text=\"請輸入體重 : \" />\n\n        <EditText\n            android:id=\"@+id/etW\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:textSize=\"20dp\"\n            android:hint=\"(公斤)\" />\n    </LinearLayout>\n\n    <Button\n        android:id=\"@+id/btnStart\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginHorizontal=\"20dp\"\n        android:layout_weight=\"1\"\n        android:textSize=\"20dp\"\n        android:text=\"開始計算\" />\n\n</LinearLayout>\n\n```\n\n## 講解\n**android:layout_margin=\"8dp\"**\n可以用這張圖理解:\n![image2](image2.png)\n藍色框框是主要內容，padding是指內容與邊框間的距離，margin是指距離外面的框框多少距離，上下左右都可以調整\n\n**android:layout_weight=\"1\"**\n當使用LinearLayout排版時，可以調整每個物件在畫面上顯示的比重\n![image3](image3.png)\n比重越小，所分配到的範圍就越大\n\n**android:textSize=\"20dp\"**\n設定字型大小\n\n**android:hint=\"(公斤)\"**\n設定提示訊息\n\n# 撰寫程式碼\n\n## 宣告物件\n```android\nEditText etH,etW;\nButton btnStart;\n```\n\n## 取得 View 物件\n```android\netH = findViewById(R.id.etH);\netW = findViewById(R.id.etW);\nbtnStart = findViewById(R.id.btnStart);\n```\n\n## 設置監聽器\n```android\nbtnStart.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n\n    }\n});\n```\n\n## 取得EditText中資料\n```android\ndouble h = Double.parseDouble(etH.getText().toString());\ndouble w = Double.parseDouble(etW.getText().toString());\n```\n\n## 計算BMI\nBMI的公式是 **體重/身高^2** $(\\frac{kg}{m^2})$\n```android\ndouble bmi = w/(Math.pow(h,2));\n```\n\n## 顯示出BMI\n```android\nToast.makeText(getApplicationContext(),String.valueOf(bmi),Toast.LENGTH_LONG).show();\n```\n> Toast可以顯示提示訊息\n\n## 參考程式碼\n```android\npackage com.example.yr.edittextdemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n\n    //宣告物件\n    EditText etH,etW;\n    Button btnStart;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 取得 View 物件\n        etH = findViewById(R.id.etH);\n        etW = findViewById(R.id.etW);\n        btnStart = findViewById(R.id.btnStart);\n\n        // 設置監聽器\n        btnStart.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n                // 取得EditText中資料\n                double h = Double.parseDouble(etH.getText().toString());\n                double w = Double.parseDouble(etW.getText().toString());\n\n                // 計算BMI\n                double bmi = w/(Math.pow(h,2));\n\n                // 顯示出BMI\n                Toast.makeText(MainActivity.this,String.valueOf(bmi),Toast.LENGTH_LONG).show();\n\n            }\n        });\n\n\n    }\n}\n```\n\n# 執行畫面\n![image4](image4.png)\n","slug":"BMI計算器-取得EditText中的字","published":1,"updated":"2024-02-24T08:06:01.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myid000fk0jfgrjw7x2w","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=626\">https://blog.cmrdb.cs.pu.edu.tw/?p=626</a></li>\n</ul>\n<h1 id=\"設計畫面\"><a href=\"#設計畫面\" class=\"headerlink\" title=\"設計畫面\"></a>設計畫面</h1><p>在畫面上拉出2個TextView、2個EditText和1個Button</p>\n<span id=\"more\"></span>\n\n<p>可以參考畫面:<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image1.png\" alt=\"image1\"></p>\n<p>activity_main.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.edittextdemo.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;2&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:text=&quot;請輸入身高 : &quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id=&quot;@+id/etH&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:ems=&quot;10&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:hint=&quot;(公尺)&quot; /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;2&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:text=&quot;請輸入體重 : &quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id=&quot;@+id/etW&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:ems=&quot;10&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:hint=&quot;(公斤)&quot; /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/btnStart&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_marginTop=&quot;20dp&quot;</span><br><span class=\"line\">        android:layout_marginHorizontal=&quot;20dp&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">        android:text=&quot;開始計算&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"講解\"><a href=\"#講解\" class=\"headerlink\" title=\"講解\"></a>講解</h2><p><strong>android:layout_margin=”8dp”</strong><br>可以用這張圖理解:<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image2.png\" alt=\"image2\"><br>藍色框框是主要內容，padding是指內容與邊框間的距離，margin是指距離外面的框框多少距離，上下左右都可以調整</p>\n<p><strong>android:layout_weight=”1”</strong><br>當使用LinearLayout排版時，可以調整每個物件在畫面上顯示的比重<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image3.png\" alt=\"image3\"><br>比重越小，所分配到的範圍就越大</p>\n<p><strong>android:textSize=”20dp”</strong><br>設定字型大小</p>\n<p><strong>android:hint=”(公斤)”</strong><br>設定提示訊息</p>\n<h1 id=\"撰寫程式碼\"><a href=\"#撰寫程式碼\" class=\"headerlink\" title=\"撰寫程式碼\"></a>撰寫程式碼</h1><h2 id=\"宣告物件\"><a href=\"#宣告物件\" class=\"headerlink\" title=\"宣告物件\"></a>宣告物件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EditText etH,etW;</span><br><span class=\"line\">Button btnStart;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得-View-物件\"><a href=\"#取得-View-物件\" class=\"headerlink\" title=\"取得 View 物件\"></a>取得 View 物件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etH &#x3D; findViewById(R.id.etH);</span><br><span class=\"line\">etW &#x3D; findViewById(R.id.etW);</span><br><span class=\"line\">btnStart &#x3D; findViewById(R.id.btnStart);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"設置監聽器\"><a href=\"#設置監聽器\" class=\"headerlink\" title=\"設置監聽器\"></a>設置監聽器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnStart.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View view) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得EditText中資料\"><a href=\"#取得EditText中資料\" class=\"headerlink\" title=\"取得EditText中資料\"></a>取得EditText中資料</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double h &#x3D; Double.parseDouble(etH.getText().toString());</span><br><span class=\"line\">double w &#x3D; Double.parseDouble(etW.getText().toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"計算BMI\"><a href=\"#計算BMI\" class=\"headerlink\" title=\"計算BMI\"></a>計算BMI</h2><p>BMI的公式是 <strong>體重/身高^2</strong> $(\\frac{kg}{m^2})$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double bmi &#x3D; w&#x2F;(Math.pow(h,2));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顯示出BMI\"><a href=\"#顯示出BMI\" class=\"headerlink\" title=\"顯示出BMI\"></a>顯示出BMI</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(getApplicationContext(),String.valueOf(bmi),Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Toast可以顯示提示訊息</p>\n</blockquote>\n<h2 id=\"參考程式碼\"><a href=\"#參考程式碼\" class=\"headerlink\" title=\"參考程式碼\"></a>參考程式碼</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.yr.edittextdemo;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;宣告物件</span><br><span class=\"line\">    EditText etH,etW;</span><br><span class=\"line\">    Button btnStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 取得 View 物件</span><br><span class=\"line\">        etH &#x3D; findViewById(R.id.etH);</span><br><span class=\"line\">        etW &#x3D; findViewById(R.id.etW);</span><br><span class=\"line\">        btnStart &#x3D; findViewById(R.id.btnStart);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 設置監聽器</span><br><span class=\"line\">        btnStart.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 取得EditText中資料</span><br><span class=\"line\">                double h &#x3D; Double.parseDouble(etH.getText().toString());</span><br><span class=\"line\">                double w &#x3D; Double.parseDouble(etW.getText().toString());</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 計算BMI</span><br><span class=\"line\">                double bmi &#x3D; w&#x2F;(Math.pow(h,2));</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 顯示出BMI</span><br><span class=\"line\">                Toast.makeText(MainActivity.this,String.valueOf(bmi),Toast.LENGTH_LONG).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"執行畫面\"><a href=\"#執行畫面\" class=\"headerlink\" title=\"執行畫面\"></a>執行畫面</h1><p><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image4.png\" alt=\"image4\"></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=626\">https://blog.cmrdb.cs.pu.edu.tw/?p=626</a></li>\n</ul>\n<h1 id=\"設計畫面\"><a href=\"#設計畫面\" class=\"headerlink\" title=\"設計畫面\"></a>設計畫面</h1><p>在畫面上拉出2個TextView、2個EditText和1個Button</p>","more":"<p>可以參考畫面:<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image1.png\" alt=\"image1\"></p>\n<p>activity_main.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.edittextdemo.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;2&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:text=&quot;請輸入身高 : &quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id=&quot;@+id/etH&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:ems=&quot;10&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:hint=&quot;(公尺)&quot; /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;2&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:text=&quot;請輸入體重 : &quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id=&quot;@+id/etW&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:ems=&quot;10&quot;</span><br><span class=\"line\">            android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">            android:hint=&quot;(公斤)&quot; /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/btnStart&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_marginTop=&quot;20dp&quot;</span><br><span class=\"line\">        android:layout_marginHorizontal=&quot;20dp&quot;</span><br><span class=\"line\">        android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">        android:textSize=&quot;20dp&quot;</span><br><span class=\"line\">        android:text=&quot;開始計算&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"講解\"><a href=\"#講解\" class=\"headerlink\" title=\"講解\"></a>講解</h2><p><strong>android:layout_margin=”8dp”</strong><br>可以用這張圖理解:<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image2.png\" alt=\"image2\"><br>藍色框框是主要內容，padding是指內容與邊框間的距離，margin是指距離外面的框框多少距離，上下左右都可以調整</p>\n<p><strong>android:layout_weight=”1”</strong><br>當使用LinearLayout排版時，可以調整每個物件在畫面上顯示的比重<br><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image3.png\" alt=\"image3\"><br>比重越小，所分配到的範圍就越大</p>\n<p><strong>android:textSize=”20dp”</strong><br>設定字型大小</p>\n<p><strong>android:hint=”(公斤)”</strong><br>設定提示訊息</p>\n<h1 id=\"撰寫程式碼\"><a href=\"#撰寫程式碼\" class=\"headerlink\" title=\"撰寫程式碼\"></a>撰寫程式碼</h1><h2 id=\"宣告物件\"><a href=\"#宣告物件\" class=\"headerlink\" title=\"宣告物件\"></a>宣告物件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EditText etH,etW;</span><br><span class=\"line\">Button btnStart;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得-View-物件\"><a href=\"#取得-View-物件\" class=\"headerlink\" title=\"取得 View 物件\"></a>取得 View 物件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etH &#x3D; findViewById(R.id.etH);</span><br><span class=\"line\">etW &#x3D; findViewById(R.id.etW);</span><br><span class=\"line\">btnStart &#x3D; findViewById(R.id.btnStart);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"設置監聽器\"><a href=\"#設置監聽器\" class=\"headerlink\" title=\"設置監聽器\"></a>設置監聽器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnStart.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View view) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得EditText中資料\"><a href=\"#取得EditText中資料\" class=\"headerlink\" title=\"取得EditText中資料\"></a>取得EditText中資料</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double h &#x3D; Double.parseDouble(etH.getText().toString());</span><br><span class=\"line\">double w &#x3D; Double.parseDouble(etW.getText().toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"計算BMI\"><a href=\"#計算BMI\" class=\"headerlink\" title=\"計算BMI\"></a>計算BMI</h2><p>BMI的公式是 <strong>體重/身高^2</strong> $(\\frac{kg}{m^2})$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double bmi &#x3D; w&#x2F;(Math.pow(h,2));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顯示出BMI\"><a href=\"#顯示出BMI\" class=\"headerlink\" title=\"顯示出BMI\"></a>顯示出BMI</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(getApplicationContext(),String.valueOf(bmi),Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Toast可以顯示提示訊息</p>\n</blockquote>\n<h2 id=\"參考程式碼\"><a href=\"#參考程式碼\" class=\"headerlink\" title=\"參考程式碼\"></a>參考程式碼</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.yr.edittextdemo;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;宣告物件</span><br><span class=\"line\">    EditText etH,etW;</span><br><span class=\"line\">    Button btnStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 取得 View 物件</span><br><span class=\"line\">        etH &#x3D; findViewById(R.id.etH);</span><br><span class=\"line\">        etW &#x3D; findViewById(R.id.etW);</span><br><span class=\"line\">        btnStart &#x3D; findViewById(R.id.btnStart);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 設置監聽器</span><br><span class=\"line\">        btnStart.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 取得EditText中資料</span><br><span class=\"line\">                double h &#x3D; Double.parseDouble(etH.getText().toString());</span><br><span class=\"line\">                double w &#x3D; Double.parseDouble(etW.getText().toString());</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 計算BMI</span><br><span class=\"line\">                double bmi &#x3D; w&#x2F;(Math.pow(h,2));</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 顯示出BMI</span><br><span class=\"line\">                Toast.makeText(MainActivity.this,String.valueOf(bmi),Toast.LENGTH_LONG).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"執行畫面\"><a href=\"#執行畫面\" class=\"headerlink\" title=\"執行畫面\"></a>執行畫面</h1><p><img src=\"/2017/12/14/BMI%E8%A8%88%E7%AE%97%E5%99%A8-%E5%8F%96%E5%BE%97EditText%E4%B8%AD%E7%9A%84%E5%AD%97/image4.png\" alt=\"image4\"></p>"},{"title":"CodeIgniter安裝Swagger","date":"2019-08-19T17:19:26.000Z","_content":"\n* 本文曾發佈在 [https://hackmd.io/@yrw/S1TdomtNS](https://hackmd.io/@yrw/S1TdomtNS)\n\n> 環境: Windows、XAMPP\n\n1. 下載CodeIgniter\n<!-- more -->\n2. 建資料夾`YourProject/swagger/`\n3. 下載[Swagger UI](https://github.com/swagger-api/swagger-ui)，解壓縮，將`dist/`資料夾裡的檔案全搬到`YourProject/swagger/`\n\t![dir](dir.png)\n4. 安裝\n\t```shell\n\tcomposer require zircote/swagger-php:2.*\n\t```\n5. 有需要的話，安裝\n\t```shell\n\tcomposer require darkaonline/l5-swagger\n\t```\n6. 建立Controller(Member)\n7. 加上一些註解 swg annotation\n一份專案裡至少需要一個`@SWG\\Info`的註解\n\t```php\n\t/**\n\t * 这里需要一个主`Swagger`定义：\n\t * @SWG\\Swagger(\n\t *     @SWG\\Info(\n\t *         title=\"我的`Swagger`API文檔\",\n\t *         version=\"1.0.0\"\n\t *     )\n\t * )\n\t */\n\t```\n\n8. 加上一些方法和註解\n\t```php\n\t/**\n\t * @SWG\\Post(\n\t *     path=\"/YourProject/index.php/Member/login\",\n\t *     tags={\"會員功能\"},\n\t *     summary=\"登入\",\n\t *     @SWG\\Parameter(\n\t *         in=\"query\",\n\t *         name=\"account\",\n\t *         type=\"string\",\n\t *         description=\"帳號\",\n\t *         required=true,\n\t *     ),\n\t *     @SWG\\Parameter(\n\t *         in=\"query\",\n\t *         name=\"password\",\n\t *         type=\"string\",\n\t *         description=\"密碼\",\n\t *         required=true,\n\t *     ),\n\t *     @SWG\\Response(response=\"default\", description=\"操作成功\")\n\t * )\n\t *\n\t */\n\tpublic   function   login()\n\t{\n\t\techo '{\"msg\":\"hello world\"}';\n\t}\n\t```\n\n9. 下指令生成API 文件檔(json格式)\n路徑和檔名可以自行調整\n\n\t> php [swagger程式位置] [Controller資料夾(需要掃描的資料夾)] -o [api文件生成位置]\n\n\t```shell\n\tphp /xampp/htdocs/YourProject/vendor/zircote/swagger-php/bin/swagger /xampp/htdocs/YourProject/application/controllers -o \\xampp\\htdocs\\YourProject\\api_doc.json\n\t```\n\t\n10. 修改`YourProject/swagger/index.html`\n    改成你的api文件位置\n    http://127.0.0.1/YourProject/api_doc.json\n    ![edit](edit.png)\n\n11. 瀏覽 http://127.0.0.1/Swagger_CodeIgniter/swagger/\n    **沒更新的話，用無痕瀏覽**\n    ![show](show.png)\n\n","source":"_posts/CodeIgniter安裝Swagger.md","raw":"---\ntitle: CodeIgniter安裝Swagger\ndate: 2019-08-20 01:19:26\ntags:\n- CodeIgniter\n- Swagger\n- API\n---\n\n* 本文曾發佈在 [https://hackmd.io/@yrw/S1TdomtNS](https://hackmd.io/@yrw/S1TdomtNS)\n\n> 環境: Windows、XAMPP\n\n1. 下載CodeIgniter\n<!-- more -->\n2. 建資料夾`YourProject/swagger/`\n3. 下載[Swagger UI](https://github.com/swagger-api/swagger-ui)，解壓縮，將`dist/`資料夾裡的檔案全搬到`YourProject/swagger/`\n\t![dir](dir.png)\n4. 安裝\n\t```shell\n\tcomposer require zircote/swagger-php:2.*\n\t```\n5. 有需要的話，安裝\n\t```shell\n\tcomposer require darkaonline/l5-swagger\n\t```\n6. 建立Controller(Member)\n7. 加上一些註解 swg annotation\n一份專案裡至少需要一個`@SWG\\Info`的註解\n\t```php\n\t/**\n\t * 这里需要一个主`Swagger`定义：\n\t * @SWG\\Swagger(\n\t *     @SWG\\Info(\n\t *         title=\"我的`Swagger`API文檔\",\n\t *         version=\"1.0.0\"\n\t *     )\n\t * )\n\t */\n\t```\n\n8. 加上一些方法和註解\n\t```php\n\t/**\n\t * @SWG\\Post(\n\t *     path=\"/YourProject/index.php/Member/login\",\n\t *     tags={\"會員功能\"},\n\t *     summary=\"登入\",\n\t *     @SWG\\Parameter(\n\t *         in=\"query\",\n\t *         name=\"account\",\n\t *         type=\"string\",\n\t *         description=\"帳號\",\n\t *         required=true,\n\t *     ),\n\t *     @SWG\\Parameter(\n\t *         in=\"query\",\n\t *         name=\"password\",\n\t *         type=\"string\",\n\t *         description=\"密碼\",\n\t *         required=true,\n\t *     ),\n\t *     @SWG\\Response(response=\"default\", description=\"操作成功\")\n\t * )\n\t *\n\t */\n\tpublic   function   login()\n\t{\n\t\techo '{\"msg\":\"hello world\"}';\n\t}\n\t```\n\n9. 下指令生成API 文件檔(json格式)\n路徑和檔名可以自行調整\n\n\t> php [swagger程式位置] [Controller資料夾(需要掃描的資料夾)] -o [api文件生成位置]\n\n\t```shell\n\tphp /xampp/htdocs/YourProject/vendor/zircote/swagger-php/bin/swagger /xampp/htdocs/YourProject/application/controllers -o \\xampp\\htdocs\\YourProject\\api_doc.json\n\t```\n\t\n10. 修改`YourProject/swagger/index.html`\n    改成你的api文件位置\n    http://127.0.0.1/YourProject/api_doc.json\n    ![edit](edit.png)\n\n11. 瀏覽 http://127.0.0.1/Swagger_CodeIgniter/swagger/\n    **沒更新的話，用無痕瀏覽**\n    ![show](show.png)\n\n","slug":"CodeIgniter安裝Swagger","published":1,"updated":"2024-02-24T08:06:01.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myie000hk0jfctnues1f","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://hackmd.io/@yrw/S1TdomtNS\">https://hackmd.io/@yrw/S1TdomtNS</a></li>\n</ul>\n<blockquote>\n<p>環境: Windows、XAMPP</p>\n</blockquote>\n<ol>\n<li><p>下載CodeIgniter</p>\n<span id=\"more\"></span></li>\n<li><p>建資料夾<code>YourProject/swagger/</code></p>\n</li>\n<li><p>下載<a href=\"https://github.com/swagger-api/swagger-ui\">Swagger UI</a>，解壓縮，將<code>dist/</code>資料夾裡的檔案全搬到<code>YourProject/swagger/</code><br> <img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/dir.png\" alt=\"dir\"></p>\n</li>\n<li><p>安裝</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require zircote/swagger-php:2.*</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要的話，安裝</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require darkaonline/l5-swagger</span><br></pre></td></tr></table></figure></li>\n<li><p>建立Controller(Member)</p>\n</li>\n<li><p>加上一些註解 swg annotation<br>一份專案裡至少需要一個<code>@SWG\\Info</code>的註解</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里需要一个主`Swagger`定义：</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SWG</span>\\Swagger(</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Info(</span></span><br><span class=\"line\"><span class=\"comment\"> *         title=&quot;我的`Swagger`API文檔&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         version=&quot;1.0.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *     )</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n<li><p>加上一些方法和註解</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SWG</span>\\Post(</span></span><br><span class=\"line\"><span class=\"comment\"> *     path=&quot;/YourProject/index.php/Member/login&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     tags=&#123;&quot;會員功能&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     summary=&quot;登入&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *         in=&quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         name=&quot;account&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         type=&quot;string&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=&quot;帳號&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *         in=&quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         name=&quot;password&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         type=&quot;string&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=&quot;密碼&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Response(response=&quot;default&quot;, description=&quot;操作成功&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>   <span class=\"function\"><span class=\"keyword\">function</span>   <span class=\"title\">login</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&#123;&quot;msg&quot;:&quot;hello world&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>下指令生成API 文件檔(json格式)<br>路徑和檔名可以自行調整</p>\n<blockquote>\n<p>php [swagger程式位置] [Controller資料夾(需要掃描的資料夾)] -o [api文件生成位置]</p>\n</blockquote>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php /xampp/htdocs/YourProject/vendor/zircote/swagger-php/bin/swagger /xampp/htdocs/YourProject/application/controllers -o \\xampp\\htdocs\\YourProject\\api_doc.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>YourProject/swagger/index.html</code><br>改成你的api文件位置<br><a href=\"http://127.0.0.1/YourProject/api_doc.json\">http://127.0.0.1/YourProject/api_doc.json</a><br><img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/edit.png\" alt=\"edit\"></p>\n</li>\n<li><p>瀏覽 <a href=\"http://127.0.0.1/Swagger_CodeIgniter/swagger/\">http://127.0.0.1/Swagger_CodeIgniter/swagger/</a><br><strong>沒更新的話，用無痕瀏覽</strong><br><img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/show.png\" alt=\"show\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://hackmd.io/@yrw/S1TdomtNS\">https://hackmd.io/@yrw/S1TdomtNS</a></li>\n</ul>\n<blockquote>\n<p>環境: Windows、XAMPP</p>\n</blockquote>\n<ol>\n<li><p>下載CodeIgniter</p>","more":"</li>\n<li><p>建資料夾<code>YourProject/swagger/</code></p>\n</li>\n<li><p>下載<a href=\"https://github.com/swagger-api/swagger-ui\">Swagger UI</a>，解壓縮，將<code>dist/</code>資料夾裡的檔案全搬到<code>YourProject/swagger/</code><br> <img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/dir.png\" alt=\"dir\"></p>\n</li>\n<li><p>安裝</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require zircote/swagger-php:2.*</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要的話，安裝</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require darkaonline/l5-swagger</span><br></pre></td></tr></table></figure></li>\n<li><p>建立Controller(Member)</p>\n</li>\n<li><p>加上一些註解 swg annotation<br>一份專案裡至少需要一個<code>@SWG\\Info</code>的註解</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里需要一个主`Swagger`定义：</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SWG</span>\\Swagger(</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Info(</span></span><br><span class=\"line\"><span class=\"comment\"> *         title=&quot;我的`Swagger`API文檔&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         version=&quot;1.0.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *     )</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n<li><p>加上一些方法和註解</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SWG</span>\\Post(</span></span><br><span class=\"line\"><span class=\"comment\"> *     path=&quot;/YourProject/index.php/Member/login&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     tags=&#123;&quot;會員功能&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     summary=&quot;登入&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *         in=&quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         name=&quot;account&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         type=&quot;string&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=&quot;帳號&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *         in=&quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         name=&quot;password&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         type=&quot;string&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=&quot;密碼&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *         required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@SWG</span>\\Response(response=&quot;default&quot;, description=&quot;操作成功&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>   <span class=\"function\"><span class=\"keyword\">function</span>   <span class=\"title\">login</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&#123;&quot;msg&quot;:&quot;hello world&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>下指令生成API 文件檔(json格式)<br>路徑和檔名可以自行調整</p>\n<blockquote>\n<p>php [swagger程式位置] [Controller資料夾(需要掃描的資料夾)] -o [api文件生成位置]</p>\n</blockquote>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php /xampp/htdocs/YourProject/vendor/zircote/swagger-php/bin/swagger /xampp/htdocs/YourProject/application/controllers -o \\xampp\\htdocs\\YourProject\\api_doc.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>YourProject/swagger/index.html</code><br>改成你的api文件位置<br><a href=\"http://127.0.0.1/YourProject/api_doc.json\">http://127.0.0.1/YourProject/api_doc.json</a><br><img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/edit.png\" alt=\"edit\"></p>\n</li>\n<li><p>瀏覽 <a href=\"http://127.0.0.1/Swagger_CodeIgniter/swagger/\">http://127.0.0.1/Swagger_CodeIgniter/swagger/</a><br><strong>沒更新的話，用無痕瀏覽</strong><br><img src=\"/2019/08/20/CodeIgniter%E5%AE%89%E8%A3%9DSwagger/show.png\" alt=\"show\"></p>\n</li>\n</ol>"},{"title":"Word 新增快捷建","date":"2021-05-11T03:04:45.000Z","_content":"\n按下 `ctl + alt + 加號`\n\n滑鼠就會變成一個小花的圖案，然後對著你想添加快捷建的 icon 按下後，就能進入設定頁面，輸入想要的快捷建組合。\n<!-- more -->\n![自訂鍵盤](自訂鍵盤.png)\n\n換新電腦就要設定一次，紀錄一下新增自訂快捷建的方法。\n因為很常遇到再表格中要使用項目符號排版時，Tab鍵會跳到下一格而不是將項目符號縮排，所以我習慣把 `減少縮排` 設定成 `Alt + Ctrl + Num 4`、`增加縮排` 設定成 `Alt + Ctrl + Num 6`。","source":"_posts/Word-新增快捷建.md","raw":"---\ntitle: Word 新增快捷建\ndate: 2021-05-11 11:04:45\ntags:\n- Word\n- hotkey\n---\n\n按下 `ctl + alt + 加號`\n\n滑鼠就會變成一個小花的圖案，然後對著你想添加快捷建的 icon 按下後，就能進入設定頁面，輸入想要的快捷建組合。\n<!-- more -->\n![自訂鍵盤](自訂鍵盤.png)\n\n換新電腦就要設定一次，紀錄一下新增自訂快捷建的方法。\n因為很常遇到再表格中要使用項目符號排版時，Tab鍵會跳到下一格而不是將項目符號縮排，所以我習慣把 `減少縮排` 設定成 `Alt + Ctrl + Num 4`、`增加縮排` 設定成 `Alt + Ctrl + Num 6`。","slug":"Word-新增快捷建","published":1,"updated":"2024-02-24T08:06:01.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myie000jk0jfffmaa3id","content":"<p>按下 <code>ctl + alt + 加號</code></p>\n<p>滑鼠就會變成一個小花的圖案，然後對著你想添加快捷建的 icon 按下後，就能進入設定頁面，輸入想要的快捷建組合。</p>\n<span id=\"more\"></span>\n<p><img src=\"/2021/05/11/Word-%E6%96%B0%E5%A2%9E%E5%BF%AB%E6%8D%B7%E5%BB%BA/%E8%87%AA%E8%A8%82%E9%8D%B5%E7%9B%A4.png\" alt=\"自訂鍵盤\"></p>\n<p>換新電腦就要設定一次，紀錄一下新增自訂快捷建的方法。<br>因為很常遇到再表格中要使用項目符號排版時，Tab鍵會跳到下一格而不是將項目符號縮排，所以我習慣把 <code>減少縮排</code> 設定成 <code>Alt + Ctrl + Num 4</code>、<code>增加縮排</code> 設定成 <code>Alt + Ctrl + Num 6</code>。</p>\n","site":{"data":{}},"excerpt":"<p>按下 <code>ctl + alt + 加號</code></p>\n<p>滑鼠就會變成一個小花的圖案，然後對著你想添加快捷建的 icon 按下後，就能進入設定頁面，輸入想要的快捷建組合。</p>","more":"<p><img src=\"/2021/05/11/Word-%E6%96%B0%E5%A2%9E%E5%BF%AB%E6%8D%B7%E5%BB%BA/%E8%87%AA%E8%A8%82%E9%8D%B5%E7%9B%A4.png\" alt=\"自訂鍵盤\"></p>\n<p>換新電腦就要設定一次，紀錄一下新增自訂快捷建的方法。<br>因為很常遇到再表格中要使用項目符號排版時，Tab鍵會跳到下一格而不是將項目符號縮排，所以我習慣把 <code>減少縮排</code> 設定成 <code>Alt + Ctrl + Num 4</code>、<code>增加縮排</code> 設定成 <code>Alt + Ctrl + Num 6</code>。</p>"},{"title":"Windows 停用開機即啟動 MongoDB","date":"2021-04-22T06:21:32.000Z","_content":"\n最近發現之前裝的 MongoDB，會在電腦開機時執行，還找不到地方關掉開機啟動的設定，只能手動關閉。網路上大家問的都是如何在 Windows 上開機執行 MongoDB，沒有人跟我一樣，有如何關閉的問題嗎？Google 了好久，才找到這篇 [How to stop mongodb server on Windows startup?](https://stackoverflow.com/questions/45011195/how-to-stop-mongodb-server-on-windows-startup)\n<!-- more -->\n## 手動開啟/關閉\n\n以管理員身份執行 cmd\n```shell\nnet start MongoDB\nnet stop MongoDB\n```\n\n## 停用開機執行\n\n### 打開 services.msc\n\n按下 `win+R` 顯示執行視窗，輸入 `services.msc`\n\n![執行](services_msc.png)\n\n![服務](服務.png)\n\n### 修改啟動類型\n\n將啟動類型更改為 **手動**\n\n![mongodb_內容](mongodb_內容.png)\n\n### 完成\n以後電腦重啟，就不會再看到 MongoDB 被默默啟動囉！\n","source":"_posts/Windows-停用開機即啟動-MongoDB.md","raw":"---\ntitle: Windows 停用開機即啟動 MongoDB\ndate: 2021-04-22 14:21:32\ntags:\n- MongoDB\n---\n\n最近發現之前裝的 MongoDB，會在電腦開機時執行，還找不到地方關掉開機啟動的設定，只能手動關閉。網路上大家問的都是如何在 Windows 上開機執行 MongoDB，沒有人跟我一樣，有如何關閉的問題嗎？Google 了好久，才找到這篇 [How to stop mongodb server on Windows startup?](https://stackoverflow.com/questions/45011195/how-to-stop-mongodb-server-on-windows-startup)\n<!-- more -->\n## 手動開啟/關閉\n\n以管理員身份執行 cmd\n```shell\nnet start MongoDB\nnet stop MongoDB\n```\n\n## 停用開機執行\n\n### 打開 services.msc\n\n按下 `win+R` 顯示執行視窗，輸入 `services.msc`\n\n![執行](services_msc.png)\n\n![服務](服務.png)\n\n### 修改啟動類型\n\n將啟動類型更改為 **手動**\n\n![mongodb_內容](mongodb_內容.png)\n\n### 完成\n以後電腦重啟，就不會再看到 MongoDB 被默默啟動囉！\n","slug":"Windows-停用開機即啟動-MongoDB","published":1,"updated":"2024-02-24T08:06:01.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myie000lk0jf8x9u7vqb","content":"<p>最近發現之前裝的 MongoDB，會在電腦開機時執行，還找不到地方關掉開機啟動的設定，只能手動關閉。網路上大家問的都是如何在 Windows 上開機執行 MongoDB，沒有人跟我一樣，有如何關閉的問題嗎？Google 了好久，才找到這篇 <a href=\"https://stackoverflow.com/questions/45011195/how-to-stop-mongodb-server-on-windows-startup\">How to stop mongodb server on Windows startup?</a></p>\n<span id=\"more\"></span>\n<h2 id=\"手動開啟-關閉\"><a href=\"#手動開啟-關閉\" class=\"headerlink\" title=\"手動開啟/關閉\"></a>手動開啟/關閉</h2><p>以管理員身份執行 cmd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br><span class=\"line\">net stop MongoDB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停用開機執行\"><a href=\"#停用開機執行\" class=\"headerlink\" title=\"停用開機執行\"></a>停用開機執行</h2><h3 id=\"打開-services-msc\"><a href=\"#打開-services-msc\" class=\"headerlink\" title=\"打開 services.msc\"></a>打開 services.msc</h3><p>按下 <code>win+R</code> 顯示執行視窗，輸入 <code>services.msc</code></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/services_msc.png\" alt=\"執行\"></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/%E6%9C%8D%E5%8B%99.png\" alt=\"服務\"></p>\n<h3 id=\"修改啟動類型\"><a href=\"#修改啟動類型\" class=\"headerlink\" title=\"修改啟動類型\"></a>修改啟動類型</h3><p>將啟動類型更改為 <strong>手動</strong></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/mongodb_%E5%85%A7%E5%AE%B9.png\" alt=\"mongodb_內容\"></p>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>以後電腦重啟，就不會再看到 MongoDB 被默默啟動囉！</p>\n","site":{"data":{}},"excerpt":"<p>最近發現之前裝的 MongoDB，會在電腦開機時執行，還找不到地方關掉開機啟動的設定，只能手動關閉。網路上大家問的都是如何在 Windows 上開機執行 MongoDB，沒有人跟我一樣，有如何關閉的問題嗎？Google 了好久，才找到這篇 <a href=\"https://stackoverflow.com/questions/45011195/how-to-stop-mongodb-server-on-windows-startup\">How to stop mongodb server on Windows startup?</a></p>","more":"<h2 id=\"手動開啟-關閉\"><a href=\"#手動開啟-關閉\" class=\"headerlink\" title=\"手動開啟/關閉\"></a>手動開啟/關閉</h2><p>以管理員身份執行 cmd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br><span class=\"line\">net stop MongoDB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停用開機執行\"><a href=\"#停用開機執行\" class=\"headerlink\" title=\"停用開機執行\"></a>停用開機執行</h2><h3 id=\"打開-services-msc\"><a href=\"#打開-services-msc\" class=\"headerlink\" title=\"打開 services.msc\"></a>打開 services.msc</h3><p>按下 <code>win+R</code> 顯示執行視窗，輸入 <code>services.msc</code></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/services_msc.png\" alt=\"執行\"></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/%E6%9C%8D%E5%8B%99.png\" alt=\"服務\"></p>\n<h3 id=\"修改啟動類型\"><a href=\"#修改啟動類型\" class=\"headerlink\" title=\"修改啟動類型\"></a>修改啟動類型</h3><p>將啟動類型更改為 <strong>手動</strong></p>\n<p><img src=\"/2021/04/22/Windows-%E5%81%9C%E7%94%A8%E9%96%8B%E6%A9%9F%E5%8D%B3%E5%95%9F%E5%8B%95-MongoDB/mongodb_%E5%85%A7%E5%AE%B9.png\" alt=\"mongodb_內容\"></p>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>以後電腦重啟，就不會再看到 MongoDB 被默默啟動囉！</p>"},{"title":"Workshop記錄-Volley與API","date":"2019-07-13T04:39:12.000Z","_content":"\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=981](https://blog.cmrdb.cs.pu.edu.tw/?p=981)\n\n對於Volley，我一直以來都只是會用，不曾深入了解。2019/05/18-19，我們規劃了一場Workshop，希望能讓新進的夥伴了解，API怎麼開？怎麼接？讓未來各組在專案的合作上可以更了解彼此的想法。\n\n沒想到在事前準備教材的過程中，我也收穫了不少，雖然有點可惜，Workshop那天沒有講完。這篇文章主要記錄我學到的Volley用法，與整理Workshop當天的教材，也包括來不及講到的部分。\n<!-- more -->\n\n# 簡介\nVolley是Google於2013年推出的網路連線框架，讓連線可以更簡單、快速。簡化了HTTP程式處理邏輯與提高執行效率。由於Volley快取的特性，適合頻繁、資料量小的傳輸。如果是較大流量傳輸，可以考慮HttpURLConnection、HttpClient等其他方式。\n\n![](8azZ7hm.png)\n(Life of a request. 節自 [Android開發指南](https://developer.android.com/training/volley/simple.html))\n\n當一個Request被加到Queue之後，會先檢查Cache中有沒資料，如果有，就會直接從Cache中回傳；如果沒有，再到網路上存取。\n\n# Volley和API可以做什麼\n\n- 搭配網路連線的APP，能做的應用更多\n- 行雲者近期的APP專案常用Volley串接API\n- 透過API，可以傳資料到伺服器，或從伺服器取得資料\n\n其實我有找到一個套件可以讓手機可以直接和資料庫連線，JDBC。\n但是不知道各位有想過，為什麼我們不用APP，直接存取伺服器資料庫的內容嗎？\n\n這個其實我還沒有確切的答案，以下是我的想法：\n- 透過API我們可以統一取得的內容與格式，我們可以統一API的格式，例如JSON。不管是Android、iOS或網頁，都可以透過同一支API拿到一樣的資料。\n- 另外，是安全性問題。當APK被反編譯，可能可以取的程式碼裡面，資料庫的IP、帳號、密碼等資訊。\n\n# 實作\n\n1. 載入套件\n在`build.gradle(Module: app)`中載入volley的套件\n```\ncompile 'com.android.volley:volley:1.1.1\n```\n![](x4k4a8r.png)\n\n2. 網路權限\n在`AndroidMenifest.xml`加網路權限\n\t```xml\n\t<uses-permission android:name=\"android.permission.INTERNET\" />\n\t```\n\n3. *程式碼中的用到的API都放在文章最後的附錄* \n\n## StringRequest(Get)\n\n1. 宣告變數\nTextView是等下要用來顯示回傳內容的\n![](K8ldhLr.png)\n\n2. Volley\n![](qqFqCG4.png)\n\n3. 顯示內容\n![](KbWN5Kh.png)\n\n## JsonObjectRequest\n\nJSON Object 最外層的的括號是 { }\n![](rwp2EGF.png)\n\n## JsonArrayRequest\n\nJSON Object 最外層的的括號是 [ ]\n![](Z1s0ujZ.png)\n\n## StringRequest(Post)\n在大括號內按 Ctrl-O 搜尋 getParams() 可以補齊\n下面Map<String,String> params的內容就是要傳給API的Key和Value\n![](5IqdECc.png)\n\n## ImageRequest\n1. 先加個ImageView\n![](UeTe6ah.png)\n\n2. 宣告變數\n![](wUXkrzO.png)\n\n3. Volley\n圖片可以自己找網路上的\n![](DQqIxdO.png)\n\n# 附錄\n這邊有些簡單測試資料，如果沒有自己的Web Server，可以試試[JSON Generator](https://next.json-generator.com/NJd7BqW-P)。\n\n- string.txt\n```=\nThis is a string!!\n```\n\n- jsonArr.php\n```php=\n<?php \n\techo '[ \"Ford\", \"BMW\", \"Fiat\" ]';\n?>\n```\n\n- jsonObj.php\n```php=\n<?php \n\techo '{ \"name\":\"John\", \"age\":30, \"car\":null }';\n?>\n```\n\n- jsonPost.php\n```php=\n<?php \n\t$id = $_POST['id'];\n\t$pwd = $_POST['pwd'];\n\n\tif($id != \"\" && $pwd != \"\"){\n\t\techo json_encode(array('id' => $id, 'pwd' => $pwd));\n\t}else{\n\t\techo json_encode(array('msg' => \"Please enter ID and password !\"));\n\t}\n\t\n?>\n```\n\n- login.php\n```php=\n<?php \n\t$id = $_POST['account'];\n\t$pwd = $_POST['passwd'];\n\n\tif($id == \"\" || $pwd == \"\"){\n\t\techo json_encode(array('success' => \"0\", 'message' => \"Please enter ID and password !\"));\n\t}else if($pwd == \"2019workshop\"){\n\t\techo json_encode(array('success' => \"1\", 'message' => \"Login Success!\", 'data' => $id));\n\t}else{\n\t\techo json_encode(array('success' => \"0\", \"message\" => \"Login Failed !\"));\n\t}\t\n\t\n?>\n```\n","source":"_posts/Workshop記錄-Volley與API.md","raw":"---\ntitle: Workshop記錄-Volley與API\ndate: 2019-07-13 12:39:12\ntags:\n- Android\n- 行雲部落格\n- 行雲者 Workshop\n- Volley\n- API\n---\n\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=981](https://blog.cmrdb.cs.pu.edu.tw/?p=981)\n\n對於Volley，我一直以來都只是會用，不曾深入了解。2019/05/18-19，我們規劃了一場Workshop，希望能讓新進的夥伴了解，API怎麼開？怎麼接？讓未來各組在專案的合作上可以更了解彼此的想法。\n\n沒想到在事前準備教材的過程中，我也收穫了不少，雖然有點可惜，Workshop那天沒有講完。這篇文章主要記錄我學到的Volley用法，與整理Workshop當天的教材，也包括來不及講到的部分。\n<!-- more -->\n\n# 簡介\nVolley是Google於2013年推出的網路連線框架，讓連線可以更簡單、快速。簡化了HTTP程式處理邏輯與提高執行效率。由於Volley快取的特性，適合頻繁、資料量小的傳輸。如果是較大流量傳輸，可以考慮HttpURLConnection、HttpClient等其他方式。\n\n![](8azZ7hm.png)\n(Life of a request. 節自 [Android開發指南](https://developer.android.com/training/volley/simple.html))\n\n當一個Request被加到Queue之後，會先檢查Cache中有沒資料，如果有，就會直接從Cache中回傳；如果沒有，再到網路上存取。\n\n# Volley和API可以做什麼\n\n- 搭配網路連線的APP，能做的應用更多\n- 行雲者近期的APP專案常用Volley串接API\n- 透過API，可以傳資料到伺服器，或從伺服器取得資料\n\n其實我有找到一個套件可以讓手機可以直接和資料庫連線，JDBC。\n但是不知道各位有想過，為什麼我們不用APP，直接存取伺服器資料庫的內容嗎？\n\n這個其實我還沒有確切的答案，以下是我的想法：\n- 透過API我們可以統一取得的內容與格式，我們可以統一API的格式，例如JSON。不管是Android、iOS或網頁，都可以透過同一支API拿到一樣的資料。\n- 另外，是安全性問題。當APK被反編譯，可能可以取的程式碼裡面，資料庫的IP、帳號、密碼等資訊。\n\n# 實作\n\n1. 載入套件\n在`build.gradle(Module: app)`中載入volley的套件\n```\ncompile 'com.android.volley:volley:1.1.1\n```\n![](x4k4a8r.png)\n\n2. 網路權限\n在`AndroidMenifest.xml`加網路權限\n\t```xml\n\t<uses-permission android:name=\"android.permission.INTERNET\" />\n\t```\n\n3. *程式碼中的用到的API都放在文章最後的附錄* \n\n## StringRequest(Get)\n\n1. 宣告變數\nTextView是等下要用來顯示回傳內容的\n![](K8ldhLr.png)\n\n2. Volley\n![](qqFqCG4.png)\n\n3. 顯示內容\n![](KbWN5Kh.png)\n\n## JsonObjectRequest\n\nJSON Object 最外層的的括號是 { }\n![](rwp2EGF.png)\n\n## JsonArrayRequest\n\nJSON Object 最外層的的括號是 [ ]\n![](Z1s0ujZ.png)\n\n## StringRequest(Post)\n在大括號內按 Ctrl-O 搜尋 getParams() 可以補齊\n下面Map<String,String> params的內容就是要傳給API的Key和Value\n![](5IqdECc.png)\n\n## ImageRequest\n1. 先加個ImageView\n![](UeTe6ah.png)\n\n2. 宣告變數\n![](wUXkrzO.png)\n\n3. Volley\n圖片可以自己找網路上的\n![](DQqIxdO.png)\n\n# 附錄\n這邊有些簡單測試資料，如果沒有自己的Web Server，可以試試[JSON Generator](https://next.json-generator.com/NJd7BqW-P)。\n\n- string.txt\n```=\nThis is a string!!\n```\n\n- jsonArr.php\n```php=\n<?php \n\techo '[ \"Ford\", \"BMW\", \"Fiat\" ]';\n?>\n```\n\n- jsonObj.php\n```php=\n<?php \n\techo '{ \"name\":\"John\", \"age\":30, \"car\":null }';\n?>\n```\n\n- jsonPost.php\n```php=\n<?php \n\t$id = $_POST['id'];\n\t$pwd = $_POST['pwd'];\n\n\tif($id != \"\" && $pwd != \"\"){\n\t\techo json_encode(array('id' => $id, 'pwd' => $pwd));\n\t}else{\n\t\techo json_encode(array('msg' => \"Please enter ID and password !\"));\n\t}\n\t\n?>\n```\n\n- login.php\n```php=\n<?php \n\t$id = $_POST['account'];\n\t$pwd = $_POST['passwd'];\n\n\tif($id == \"\" || $pwd == \"\"){\n\t\techo json_encode(array('success' => \"0\", 'message' => \"Please enter ID and password !\"));\n\t}else if($pwd == \"2019workshop\"){\n\t\techo json_encode(array('success' => \"1\", 'message' => \"Login Success!\", 'data' => $id));\n\t}else{\n\t\techo json_encode(array('success' => \"0\", \"message\" => \"Login Failed !\"));\n\t}\t\n\t\n?>\n```\n","slug":"Workshop記錄-Volley與API","published":1,"updated":"2024-02-24T08:06:01.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myie000ok0jf26ta511h","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=981\">https://blog.cmrdb.cs.pu.edu.tw/?p=981</a></li>\n</ul>\n<p>對於Volley，我一直以來都只是會用，不曾深入了解。2019/05/18-19，我們規劃了一場Workshop，希望能讓新進的夥伴了解，API怎麼開？怎麼接？讓未來各組在專案的合作上可以更了解彼此的想法。</p>\n<p>沒想到在事前準備教材的過程中，我也收穫了不少，雖然有點可惜，Workshop那天沒有講完。這篇文章主要記錄我學到的Volley用法，與整理Workshop當天的教材，也包括來不及講到的部分。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>Volley是Google於2013年推出的網路連線框架，讓連線可以更簡單、快速。簡化了HTTP程式處理邏輯與提高執行效率。由於Volley快取的特性，適合頻繁、資料量小的傳輸。如果是較大流量傳輸，可以考慮HttpURLConnection、HttpClient等其他方式。</p>\n<p><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/8azZ7hm.png\"><br>(Life of a request. 節自 <a href=\"https://developer.android.com/training/volley/simple.html\">Android開發指南</a>)</p>\n<p>當一個Request被加到Queue之後，會先檢查Cache中有沒資料，如果有，就會直接從Cache中回傳；如果沒有，再到網路上存取。</p>\n<h1 id=\"Volley和API可以做什麼\"><a href=\"#Volley和API可以做什麼\" class=\"headerlink\" title=\"Volley和API可以做什麼\"></a>Volley和API可以做什麼</h1><ul>\n<li>搭配網路連線的APP，能做的應用更多</li>\n<li>行雲者近期的APP專案常用Volley串接API</li>\n<li>透過API，可以傳資料到伺服器，或從伺服器取得資料</li>\n</ul>\n<p>其實我有找到一個套件可以讓手機可以直接和資料庫連線，JDBC。<br>但是不知道各位有想過，為什麼我們不用APP，直接存取伺服器資料庫的內容嗎？</p>\n<p>這個其實我還沒有確切的答案，以下是我的想法：</p>\n<ul>\n<li>透過API我們可以統一取得的內容與格式，我們可以統一API的格式，例如JSON。不管是Android、iOS或網頁，都可以透過同一支API拿到一樣的資料。</li>\n<li>另外，是安全性問題。當APK被反編譯，可能可以取的程式碼裡面，資料庫的IP、帳號、密碼等資訊。</li>\n</ul>\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><ol>\n<li><p>載入套件<br>在<code>build.gradle(Module: app)</code>中載入volley的套件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.volley:volley:1.1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/x4k4a8r.png\"></p>\n</li>\n<li><p>網路權限<br>在<code>AndroidMenifest.xml</code>加網路權限</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><em>程式碼中的用到的API都放在文章最後的附錄</em> </p>\n</li>\n</ol>\n<h2 id=\"StringRequest-Get\"><a href=\"#StringRequest-Get\" class=\"headerlink\" title=\"StringRequest(Get)\"></a>StringRequest(Get)</h2><ol>\n<li><p>宣告變數<br>TextView是等下要用來顯示回傳內容的<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/K8ldhLr.png\"></p>\n</li>\n<li><p>Volley<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/qqFqCG4.png\"></p>\n</li>\n<li><p>顯示內容<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/KbWN5Kh.png\"></p>\n</li>\n</ol>\n<h2 id=\"JsonObjectRequest\"><a href=\"#JsonObjectRequest\" class=\"headerlink\" title=\"JsonObjectRequest\"></a>JsonObjectRequest</h2><p>JSON Object 最外層的的括號是 { }<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/rwp2EGF.png\"></p>\n<h2 id=\"JsonArrayRequest\"><a href=\"#JsonArrayRequest\" class=\"headerlink\" title=\"JsonArrayRequest\"></a>JsonArrayRequest</h2><p>JSON Object 最外層的的括號是 [ ]<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/Z1s0ujZ.png\"></p>\n<h2 id=\"StringRequest-Post\"><a href=\"#StringRequest-Post\" class=\"headerlink\" title=\"StringRequest(Post)\"></a>StringRequest(Post)</h2><p>在大括號內按 Ctrl-O 搜尋 getParams() 可以補齊<br>下面Map&lt;String,String&gt; params的內容就是要傳給API的Key和Value<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/5IqdECc.png\"></p>\n<h2 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h2><ol>\n<li><p>先加個ImageView<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/UeTe6ah.png\"></p>\n</li>\n<li><p>宣告變數<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/wUXkrzO.png\"></p>\n</li>\n<li><p>Volley<br>圖片可以自己找網路上的<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/DQqIxdO.png\"></p>\n</li>\n</ol>\n<h1 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h1><p>這邊有些簡單測試資料，如果沒有自己的Web Server，可以試試<a href=\"https://next.json-generator.com/NJd7BqW-P\">JSON Generator</a>。</p>\n<ul>\n<li><p>string.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is a string!!</span><br></pre></td></tr></table></figure></li>\n<li><p>jsonArr.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;[ &quot;Ford&quot;, &quot;BMW&quot;, &quot;Fiat&quot; ]&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>jsonObj.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&#123; &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;car&quot;:null &#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>jsonPost.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"variable\">$id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"variable\">$pwd</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pwd&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"variable\">$id</span> != <span class=\"string\">&quot;&quot;</span> &amp;&amp; <span class=\"variable\">$pwd</span> != <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;id&#x27;</span> =&gt; <span class=\"variable\">$id</span>, <span class=\"string\">&#x27;pwd&#x27;</span> =&gt; <span class=\"variable\">$pwd</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&quot;Please enter ID and password !&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>login.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"variable\">$id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;account&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"variable\">$pwd</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"variable\">$id</span> == <span class=\"string\">&quot;&quot;</span> || <span class=\"variable\">$pwd</span> == <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&quot;Please enter ID and password !&quot;</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable\">$pwd</span> == <span class=\"string\">&quot;2019workshop&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&quot;Login Success!&quot;</span>, <span class=\"string\">&#x27;data&#x27;</span> =&gt; <span class=\"variable\">$id</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;message&quot;</span> =&gt; <span class=\"string\">&quot;Login Failed !&quot;</span>));</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=981\">https://blog.cmrdb.cs.pu.edu.tw/?p=981</a></li>\n</ul>\n<p>對於Volley，我一直以來都只是會用，不曾深入了解。2019/05/18-19，我們規劃了一場Workshop，希望能讓新進的夥伴了解，API怎麼開？怎麼接？讓未來各組在專案的合作上可以更了解彼此的想法。</p>\n<p>沒想到在事前準備教材的過程中，我也收穫了不少，雖然有點可惜，Workshop那天沒有講完。這篇文章主要記錄我學到的Volley用法，與整理Workshop當天的教材，也包括來不及講到的部分。</p>","more":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>Volley是Google於2013年推出的網路連線框架，讓連線可以更簡單、快速。簡化了HTTP程式處理邏輯與提高執行效率。由於Volley快取的特性，適合頻繁、資料量小的傳輸。如果是較大流量傳輸，可以考慮HttpURLConnection、HttpClient等其他方式。</p>\n<p><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/8azZ7hm.png\"><br>(Life of a request. 節自 <a href=\"https://developer.android.com/training/volley/simple.html\">Android開發指南</a>)</p>\n<p>當一個Request被加到Queue之後，會先檢查Cache中有沒資料，如果有，就會直接從Cache中回傳；如果沒有，再到網路上存取。</p>\n<h1 id=\"Volley和API可以做什麼\"><a href=\"#Volley和API可以做什麼\" class=\"headerlink\" title=\"Volley和API可以做什麼\"></a>Volley和API可以做什麼</h1><ul>\n<li>搭配網路連線的APP，能做的應用更多</li>\n<li>行雲者近期的APP專案常用Volley串接API</li>\n<li>透過API，可以傳資料到伺服器，或從伺服器取得資料</li>\n</ul>\n<p>其實我有找到一個套件可以讓手機可以直接和資料庫連線，JDBC。<br>但是不知道各位有想過，為什麼我們不用APP，直接存取伺服器資料庫的內容嗎？</p>\n<p>這個其實我還沒有確切的答案，以下是我的想法：</p>\n<ul>\n<li>透過API我們可以統一取得的內容與格式，我們可以統一API的格式，例如JSON。不管是Android、iOS或網頁，都可以透過同一支API拿到一樣的資料。</li>\n<li>另外，是安全性問題。當APK被反編譯，可能可以取的程式碼裡面，資料庫的IP、帳號、密碼等資訊。</li>\n</ul>\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><ol>\n<li><p>載入套件<br>在<code>build.gradle(Module: app)</code>中載入volley的套件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.volley:volley:1.1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/x4k4a8r.png\"></p>\n</li>\n<li><p>網路權限<br>在<code>AndroidMenifest.xml</code>加網路權限</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><em>程式碼中的用到的API都放在文章最後的附錄</em> </p>\n</li>\n</ol>\n<h2 id=\"StringRequest-Get\"><a href=\"#StringRequest-Get\" class=\"headerlink\" title=\"StringRequest(Get)\"></a>StringRequest(Get)</h2><ol>\n<li><p>宣告變數<br>TextView是等下要用來顯示回傳內容的<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/K8ldhLr.png\"></p>\n</li>\n<li><p>Volley<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/qqFqCG4.png\"></p>\n</li>\n<li><p>顯示內容<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/KbWN5Kh.png\"></p>\n</li>\n</ol>\n<h2 id=\"JsonObjectRequest\"><a href=\"#JsonObjectRequest\" class=\"headerlink\" title=\"JsonObjectRequest\"></a>JsonObjectRequest</h2><p>JSON Object 最外層的的括號是 { }<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/rwp2EGF.png\"></p>\n<h2 id=\"JsonArrayRequest\"><a href=\"#JsonArrayRequest\" class=\"headerlink\" title=\"JsonArrayRequest\"></a>JsonArrayRequest</h2><p>JSON Object 最外層的的括號是 [ ]<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/Z1s0ujZ.png\"></p>\n<h2 id=\"StringRequest-Post\"><a href=\"#StringRequest-Post\" class=\"headerlink\" title=\"StringRequest(Post)\"></a>StringRequest(Post)</h2><p>在大括號內按 Ctrl-O 搜尋 getParams() 可以補齊<br>下面Map&lt;String,String&gt; params的內容就是要傳給API的Key和Value<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/5IqdECc.png\"></p>\n<h2 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h2><ol>\n<li><p>先加個ImageView<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/UeTe6ah.png\"></p>\n</li>\n<li><p>宣告變數<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/wUXkrzO.png\"></p>\n</li>\n<li><p>Volley<br>圖片可以自己找網路上的<br><img src=\"/2019/07/13/Workshop%E8%A8%98%E9%8C%84-Volley%E8%88%87API/DQqIxdO.png\"></p>\n</li>\n</ol>\n<h1 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h1><p>這邊有些簡單測試資料，如果沒有自己的Web Server，可以試試<a href=\"https://next.json-generator.com/NJd7BqW-P\">JSON Generator</a>。</p>\n<ul>\n<li><p>string.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is a string!!</span><br></pre></td></tr></table></figure></li>\n<li><p>jsonArr.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;[ &quot;Ford&quot;, &quot;BMW&quot;, &quot;Fiat&quot; ]&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>jsonObj.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&#123; &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;car&quot;:null &#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>jsonPost.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"variable\">$id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"variable\">$pwd</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pwd&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"variable\">$id</span> != <span class=\"string\">&quot;&quot;</span> &amp;&amp; <span class=\"variable\">$pwd</span> != <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;id&#x27;</span> =&gt; <span class=\"variable\">$id</span>, <span class=\"string\">&#x27;pwd&#x27;</span> =&gt; <span class=\"variable\">$pwd</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&quot;Please enter ID and password !&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>login.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"variable\">$id</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;account&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"variable\">$pwd</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"variable\">$id</span> == <span class=\"string\">&quot;&quot;</span> || <span class=\"variable\">$pwd</span> == <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&quot;Please enter ID and password !&quot;</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable\">$pwd</span> == <span class=\"string\">&quot;2019workshop&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&quot;Login Success!&quot;</span>, <span class=\"string\">&#x27;data&#x27;</span> =&gt; <span class=\"variable\">$id</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;message&quot;</span> =&gt; <span class=\"string\">&quot;Login Failed !&quot;</span>));</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"[Zenbo開發系列] 01-後蓋打開方式、偵錯USB孔位置","date":"2021-08-04T08:58:04.000Z","_content":"\n就在今天終於把論文送印了，我的論文是有關聊天機器人與 ASUS Zenbo 的主題，其實還有很多開發過程遇到的各種狀況時沒辦法寫進論文。開發過程中常常參考網路資料，但發現 Zenbo 相關的資料實在太少了。實驗室的電腦預計在一個月內會洗掉，在這之前我想盡量把之前的筆記整理成部落格，希望哪天也能幫助到其他人。\n\n這系列文章會以我遇到的卡關問題為主，不會太詳細介紹 Android 的開發方式，那就開始吧。\n<!--more-->\n\n# 打開後腦杓\n這篇是最重要的部份，真的！我完全沒想過他的連接孔藏在那裡，沒有插傳輸線是要怎麼 debug...\n\n一般來說，我們開發 Android 程式用實體機測試，就是把傳輸線接上電腦，但是我把 Zenbo 翻了一圈看起來能插線的就只有頭上那個 USB 孔了，還專程去買了一條 Type-A 對 Type-A 的線。後來到 Zenbo 開發群組發問才知道原來後腦杓可以開阿，而且連接孔就藏在裡面。\n\nZenbo 的後腦杓是用磁鐵吸住的，只要從後方脖子兩邊往後拉，就會開了。連接孔是跟舊型 Android 一樣的 microUSB。\n\n{% youtube bNx20Eu_kfw %}\n","source":"_posts/Zenbo開發系列-01-後蓋打開方式、偵錯USB孔位置.md","raw":"---\ntitle: '[Zenbo開發系列] 01-後蓋打開方式、偵錯USB孔位置'\ndate: 2021-08-04 16:58:04\ntags:\n- Zenbo\n- 偵錯\n- 13th鐵人賽\n---\n\n就在今天終於把論文送印了，我的論文是有關聊天機器人與 ASUS Zenbo 的主題，其實還有很多開發過程遇到的各種狀況時沒辦法寫進論文。開發過程中常常參考網路資料，但發現 Zenbo 相關的資料實在太少了。實驗室的電腦預計在一個月內會洗掉，在這之前我想盡量把之前的筆記整理成部落格，希望哪天也能幫助到其他人。\n\n這系列文章會以我遇到的卡關問題為主，不會太詳細介紹 Android 的開發方式，那就開始吧。\n<!--more-->\n\n# 打開後腦杓\n這篇是最重要的部份，真的！我完全沒想過他的連接孔藏在那裡，沒有插傳輸線是要怎麼 debug...\n\n一般來說，我們開發 Android 程式用實體機測試，就是把傳輸線接上電腦，但是我把 Zenbo 翻了一圈看起來能插線的就只有頭上那個 USB 孔了，還專程去買了一條 Type-A 對 Type-A 的線。後來到 Zenbo 開發群組發問才知道原來後腦杓可以開阿，而且連接孔就藏在裡面。\n\nZenbo 的後腦杓是用磁鐵吸住的，只要從後方脖子兩邊往後拉，就會開了。連接孔是跟舊型 Android 一樣的 microUSB。\n\n{% youtube bNx20Eu_kfw %}\n","slug":"Zenbo開發系列-01-後蓋打開方式、偵錯USB孔位置","published":1,"updated":"2024-02-24T08:06:01.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myie000qk0jfhtnf9uhe","content":"<p>就在今天終於把論文送印了，我的論文是有關聊天機器人與 ASUS Zenbo 的主題，其實還有很多開發過程遇到的各種狀況時沒辦法寫進論文。開發過程中常常參考網路資料，但發現 Zenbo 相關的資料實在太少了。實驗室的電腦預計在一個月內會洗掉，在這之前我想盡量把之前的筆記整理成部落格，希望哪天也能幫助到其他人。</p>\n<p>這系列文章會以我遇到的卡關問題為主，不會太詳細介紹 Android 的開發方式，那就開始吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"打開後腦杓\"><a href=\"#打開後腦杓\" class=\"headerlink\" title=\"打開後腦杓\"></a>打開後腦杓</h1><p>這篇是最重要的部份，真的！我完全沒想過他的連接孔藏在那裡，沒有插傳輸線是要怎麼 debug…</p>\n<p>一般來說，我們開發 Android 程式用實體機測試，就是把傳輸線接上電腦，但是我把 Zenbo 翻了一圈看起來能插線的就只有頭上那個 USB 孔了，還專程去買了一條 Type-A 對 Type-A 的線。後來到 Zenbo 開發群組發問才知道原來後腦杓可以開阿，而且連接孔就藏在裡面。</p>\n<p>Zenbo 的後腦杓是用磁鐵吸住的，只要從後方脖子兩邊往後拉，就會開了。連接孔是跟舊型 Android 一樣的 microUSB。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/bNx20Eu_kfw\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n","site":{"data":{}},"excerpt":"<p>就在今天終於把論文送印了，我的論文是有關聊天機器人與 ASUS Zenbo 的主題，其實還有很多開發過程遇到的各種狀況時沒辦法寫進論文。開發過程中常常參考網路資料，但發現 Zenbo 相關的資料實在太少了。實驗室的電腦預計在一個月內會洗掉，在這之前我想盡量把之前的筆記整理成部落格，希望哪天也能幫助到其他人。</p>\n<p>這系列文章會以我遇到的卡關問題為主，不會太詳細介紹 Android 的開發方式，那就開始吧。</p>","more":"<h1 id=\"打開後腦杓\"><a href=\"#打開後腦杓\" class=\"headerlink\" title=\"打開後腦杓\"></a>打開後腦杓</h1><p>這篇是最重要的部份，真的！我完全沒想過他的連接孔藏在那裡，沒有插傳輸線是要怎麼 debug…</p>\n<p>一般來說，我們開發 Android 程式用實體機測試，就是把傳輸線接上電腦，但是我把 Zenbo 翻了一圈看起來能插線的就只有頭上那個 USB 孔了，還專程去買了一條 Type-A 對 Type-A 的線。後來到 Zenbo 開發群組發問才知道原來後腦杓可以開阿，而且連接孔就藏在裡面。</p>\n<p>Zenbo 的後腦杓是用磁鐵吸住的，只要從後方脖子兩邊往後拉，就會開了。連接孔是跟舊型 Android 一樣的 microUSB。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/bNx20Eu_kfw\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>"},{"title":"[Zenbo開發系列] 02-建置與Zenbo規格相同的模擬器","date":"2021-08-05T09:32:20.000Z","_content":"\n時逢疫情來襲，三級警戒讓我也不敢回學校，但又不可能把 Zenbo 搬回家，還好之前有照 Zenbo 的規格開了一台模擬器，雖然沒辦法所有的畫面都和在 Zenbo 一樣 (ASUS 應該有自己客製一些東西)，但至少在沒有使用 Zenbo SDK 的狀況下，執行 Android 程式和測試有沒有跑版都OK，這樣我就能在本機測試了。\n\n這篇會簡單紀錄一下我開的模擬器規格，Zenbo 的作業系統是 Android，基本上可以把他當作是一台會走路的平板啦。\n<!--more-->\n\n# 模擬器規格\n螢幕解析度: 1028*752 (10.1 吋)\n螢幕方向: 橫向\nAndroid 版本: 6.0 (API 23)\n\n# 開始建置\n\n首先開一個新的模擬器\n![建立新模擬器](建立新模擬器.jpg)\n\n## 建立硬體外型\n建立新裝置外型\n![建立新硬體外型](建立新硬體外型.jpg)\n\n可以照著設定\n![硬體規格](硬體規格.jpg)\n\n或是把下面這個我做好的直接 import\n<script src=\"https://gist.github.com/dreambo4/44f9a782e079964da0a46fa4757e673e.js\"></script>\n\n## 建立模擬器\n\n選擇我們剛建好的硬體外型\n![選擇硬體裝置](選擇硬體裝置.jpg)\n\n作業系統版本，因為要跟 Zenbo 一樣，所以選 6.0\n![選擇作業系統版本](選擇作業系統版本.jpg)\n\n確認一下是否都正確，按下Finish，執行一下，模擬器就建好囉！\n![模擬器完成](模擬器完成.jpg)\n\n最後，你會獲得一台 Android 6 的平板 😅\n![就是平板](就是平板.jpg)","source":"_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器.md","raw":"---\ntitle: '[Zenbo開發系列] 02-建置與Zenbo規格相同的模擬器'\ndate: 2021-08-05 17:32:20\ntags:\n- Zenbo\n- 模擬器\n- 13th鐵人賽\n---\n\n時逢疫情來襲，三級警戒讓我也不敢回學校，但又不可能把 Zenbo 搬回家，還好之前有照 Zenbo 的規格開了一台模擬器，雖然沒辦法所有的畫面都和在 Zenbo 一樣 (ASUS 應該有自己客製一些東西)，但至少在沒有使用 Zenbo SDK 的狀況下，執行 Android 程式和測試有沒有跑版都OK，這樣我就能在本機測試了。\n\n這篇會簡單紀錄一下我開的模擬器規格，Zenbo 的作業系統是 Android，基本上可以把他當作是一台會走路的平板啦。\n<!--more-->\n\n# 模擬器規格\n螢幕解析度: 1028*752 (10.1 吋)\n螢幕方向: 橫向\nAndroid 版本: 6.0 (API 23)\n\n# 開始建置\n\n首先開一個新的模擬器\n![建立新模擬器](建立新模擬器.jpg)\n\n## 建立硬體外型\n建立新裝置外型\n![建立新硬體外型](建立新硬體外型.jpg)\n\n可以照著設定\n![硬體規格](硬體規格.jpg)\n\n或是把下面這個我做好的直接 import\n<script src=\"https://gist.github.com/dreambo4/44f9a782e079964da0a46fa4757e673e.js\"></script>\n\n## 建立模擬器\n\n選擇我們剛建好的硬體外型\n![選擇硬體裝置](選擇硬體裝置.jpg)\n\n作業系統版本，因為要跟 Zenbo 一樣，所以選 6.0\n![選擇作業系統版本](選擇作業系統版本.jpg)\n\n確認一下是否都正確，按下Finish，執行一下，模擬器就建好囉！\n![模擬器完成](模擬器完成.jpg)\n\n最後，你會獲得一台 Android 6 的平板 😅\n![就是平板](就是平板.jpg)","slug":"Zenbo開發系列-02-建置與Zenbo規格相同的模擬器","published":1,"updated":"2024-02-24T08:06:01.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myif000sk0jfh7g5b25d","content":"<p>時逢疫情來襲，三級警戒讓我也不敢回學校，但又不可能把 Zenbo 搬回家，還好之前有照 Zenbo 的規格開了一台模擬器，雖然沒辦法所有的畫面都和在 Zenbo 一樣 (ASUS 應該有自己客製一些東西)，但至少在沒有使用 Zenbo SDK 的狀況下，執行 Android 程式和測試有沒有跑版都OK，這樣我就能在本機測試了。</p>\n<p>這篇會簡單紀錄一下我開的模擬器規格，Zenbo 的作業系統是 Android，基本上可以把他當作是一台會走路的平板啦。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"模擬器規格\"><a href=\"#模擬器規格\" class=\"headerlink\" title=\"模擬器規格\"></a>模擬器規格</h1><p>螢幕解析度: 1028*752 (10.1 吋)<br>螢幕方向: 橫向<br>Android 版本: 6.0 (API 23)</p>\n<h1 id=\"開始建置\"><a href=\"#開始建置\" class=\"headerlink\" title=\"開始建置\"></a>開始建置</h1><p>首先開一個新的模擬器<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%A8%A1%E6%93%AC%E5%99%A8.jpg\" alt=\"建立新模擬器\"></p>\n<h2 id=\"建立硬體外型\"><a href=\"#建立硬體外型\" class=\"headerlink\" title=\"建立硬體外型\"></a>建立硬體外型</h2><p>建立新裝置外型<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%BB%BA%E7%AB%8B%E6%96%B0%E7%A1%AC%E9%AB%94%E5%A4%96%E5%9E%8B.jpg\" alt=\"建立新硬體外型\"></p>\n<p>可以照著設定<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E7%A1%AC%E9%AB%94%E8%A6%8F%E6%A0%BC.jpg\" alt=\"硬體規格\"></p>\n<p>或是把下面這個我做好的直接 import</p>\n<script src=\"https://gist.github.com/dreambo4/44f9a782e079964da0a46fa4757e673e.js\"></script>\n\n<h2 id=\"建立模擬器\"><a href=\"#建立模擬器\" class=\"headerlink\" title=\"建立模擬器\"></a>建立模擬器</h2><p>選擇我們剛建好的硬體外型<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E9%81%B8%E6%93%87%E7%A1%AC%E9%AB%94%E8%A3%9D%E7%BD%AE.jpg\" alt=\"選擇硬體裝置\"></p>\n<p>作業系統版本，因為要跟 Zenbo 一樣，所以選 6.0<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E9%81%B8%E6%93%87%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%89%88%E6%9C%AC.jpg\" alt=\"選擇作業系統版本\"></p>\n<p>確認一下是否都正確，按下Finish，執行一下，模擬器就建好囉！<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E6%A8%A1%E6%93%AC%E5%99%A8%E5%AE%8C%E6%88%90.jpg\" alt=\"模擬器完成\"></p>\n<p>最後，你會獲得一台 Android 6 的平板 😅<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%B0%B1%E6%98%AF%E5%B9%B3%E6%9D%BF.jpg\" alt=\"就是平板\"></p>\n","site":{"data":{}},"excerpt":"<p>時逢疫情來襲，三級警戒讓我也不敢回學校，但又不可能把 Zenbo 搬回家，還好之前有照 Zenbo 的規格開了一台模擬器，雖然沒辦法所有的畫面都和在 Zenbo 一樣 (ASUS 應該有自己客製一些東西)，但至少在沒有使用 Zenbo SDK 的狀況下，執行 Android 程式和測試有沒有跑版都OK，這樣我就能在本機測試了。</p>\n<p>這篇會簡單紀錄一下我開的模擬器規格，Zenbo 的作業系統是 Android，基本上可以把他當作是一台會走路的平板啦。</p>","more":"<h1 id=\"模擬器規格\"><a href=\"#模擬器規格\" class=\"headerlink\" title=\"模擬器規格\"></a>模擬器規格</h1><p>螢幕解析度: 1028*752 (10.1 吋)<br>螢幕方向: 橫向<br>Android 版本: 6.0 (API 23)</p>\n<h1 id=\"開始建置\"><a href=\"#開始建置\" class=\"headerlink\" title=\"開始建置\"></a>開始建置</h1><p>首先開一個新的模擬器<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%A8%A1%E6%93%AC%E5%99%A8.jpg\" alt=\"建立新模擬器\"></p>\n<h2 id=\"建立硬體外型\"><a href=\"#建立硬體外型\" class=\"headerlink\" title=\"建立硬體外型\"></a>建立硬體外型</h2><p>建立新裝置外型<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%BB%BA%E7%AB%8B%E6%96%B0%E7%A1%AC%E9%AB%94%E5%A4%96%E5%9E%8B.jpg\" alt=\"建立新硬體外型\"></p>\n<p>可以照著設定<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E7%A1%AC%E9%AB%94%E8%A6%8F%E6%A0%BC.jpg\" alt=\"硬體規格\"></p>\n<p>或是把下面這個我做好的直接 import</p>\n<script src=\"https://gist.github.com/dreambo4/44f9a782e079964da0a46fa4757e673e.js\"></script>\n\n<h2 id=\"建立模擬器\"><a href=\"#建立模擬器\" class=\"headerlink\" title=\"建立模擬器\"></a>建立模擬器</h2><p>選擇我們剛建好的硬體外型<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E9%81%B8%E6%93%87%E7%A1%AC%E9%AB%94%E8%A3%9D%E7%BD%AE.jpg\" alt=\"選擇硬體裝置\"></p>\n<p>作業系統版本，因為要跟 Zenbo 一樣，所以選 6.0<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E9%81%B8%E6%93%87%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%89%88%E6%9C%AC.jpg\" alt=\"選擇作業系統版本\"></p>\n<p>確認一下是否都正確，按下Finish，執行一下，模擬器就建好囉！<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E6%A8%A1%E6%93%AC%E5%99%A8%E5%AE%8C%E6%88%90.jpg\" alt=\"模擬器完成\"></p>\n<p>最後，你會獲得一台 Android 6 的平板 😅<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-02-%E5%BB%BA%E7%BD%AE%E8%88%87Zenbo%E8%A6%8F%E6%A0%BC%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/%E5%B0%B1%E6%98%AF%E5%B9%B3%E6%9D%BF.jpg\" alt=\"就是平板\"></p>"},{"title":"[Zenbo開發系列] 03-DDE Editor vs Dialogflow","date":"2021-08-05T13:44:20.000Z","_content":"\nDDE(dialogue development environment) Editor [[官方文件](https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Welcome)] 是由 ASUS 提供，可以設計自己的回覆規則的工具，製作好之後可以把語料安裝到 Zenbo。\n\n以我有用到的功能來說，Dialogflow 和 DDE 都是 Rule-base 的方式，但我覺得相比 Dialogflow，DDE 就比較「工人智慧」一點😂。\n<!--more-->\n\n對了，DDE **建議搭配 Chrome**。使用 Firefox 的話，右側的對話測試區會沒有反應 ~~(被雷到💣)~~\n\n# Dialogflow 比較強大\n舉例來說，Dialogflow 可以做到這樣\n\n我先在 Entities 定義了台中「區」的名稱\n![DF_entities](DF_entities.png)\n\n然後設計對話語句\n![DF比較強大](DF比較強大.png)\n\n## 測試對話\nDialogflow 應該有支援**模糊比對**句子之類的功能，像是「我要找長照站」、「哪裡有據點」都沒有完全符合前面設計的句子規則。而且句中如果沒提到地點，Dialogflow 可以再補問「你要找哪裡的長照站?」。相較之下，DDE 就要把句子規則定好定滿，沒有符合就不會回覆相應的句子。\n\n![DF1](DF1.png)\n![DF2](DF2.png)\n> \"...\" 是我還沒把真正的地址加上去，先暫代的，應該是要跟 Fulfillment 串接，但我沒有做完這部份\n\n# DDE 工人智慧\nDDE 雖然是 ASUS 做的，但官方文件卻是以英文為主，中文的版本相對沒那麼齊全。然後建議，文件看過最好順手存下來，他們網站不知道在搞什麼，有一陣子上去找資料發現文字都變成亂碼，還好之前有先用 Notion 存起來。\n\n不過還是有一些優點的，開發遇到問題的時候，寫信給客服信箱，會有他們的工程師回答你，這部分 Dialogflow 應該就無法了。\n> 他也只回我一兩次而已，後面我再接著問的部分，就沒再回了。不過我那時候的主要問題有解決，就不跟他計較啦~\n\nDialogflow 可以模糊比對句子，DDE 話就沒那麼方便，相關的句子規則都要訂清楚，如果設計不好，句子間有可能撞關鍵字。\n\n![DDE1](DDE1.png)\n![DDE2](DDE2.png)\n![DDE3](DDE3.png)\n\n## 和 Zenbo 的搭配\n\n和 Zenbo 的配合方面，DDE 還是要比 Dialogflow 好一點。DDE 做好的語料庫，可以發布到伺服器，在 Zenbo 就可以透過官方提供的 APP 來更新/下載語料。這些語料會跟其他原先就存在的語料放在一起，等於是裝在 Zenbo 腦袋裡。Dialogflow 比較像腦袋在雲端上，只把 Zenbo 當作是一個介面，回傳什麼句子給 Zenbo 他就照唸。\n\n另外，如果要做到「Hey, Zenbo 我要用`APP名稱`」的話，要到 Zenbo 開發者平台註冊 [Developer Console](https://zenbo.asus.com/developer/console/)。\n\n# 結語\n最後，如果沒有真的一定要用 DDE 的話，我會比較建議 Dialogflow。因為 Dialogflow 支援比較多平台，常見的平台都可以串接，如果想裝在 Zenbo 上也可以用 API(不過這部份我沒有實作)，走跟一般 Android 的路線。\n\n好了，比較完了，那你說我最後是用那一個？我只能說都沒有🤦‍♂️\n論文中，我的語料庫模型是用 TF-IDF 自己建的，之後再補這部份的文章吧！\n","source":"_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow.md","raw":"---\ntitle: '[Zenbo開發系列] 03-DDE Editor vs Dialogflow'\ndate: 2021-08-05 21:44:20\ntags:\n- Zenbo\n- DDE\n- Dialogflow\n- 聊天機器人\n- 13th鐵人賽\n---\n\nDDE(dialogue development environment) Editor [[官方文件](https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Welcome)] 是由 ASUS 提供，可以設計自己的回覆規則的工具，製作好之後可以把語料安裝到 Zenbo。\n\n以我有用到的功能來說，Dialogflow 和 DDE 都是 Rule-base 的方式，但我覺得相比 Dialogflow，DDE 就比較「工人智慧」一點😂。\n<!--more-->\n\n對了，DDE **建議搭配 Chrome**。使用 Firefox 的話，右側的對話測試區會沒有反應 ~~(被雷到💣)~~\n\n# Dialogflow 比較強大\n舉例來說，Dialogflow 可以做到這樣\n\n我先在 Entities 定義了台中「區」的名稱\n![DF_entities](DF_entities.png)\n\n然後設計對話語句\n![DF比較強大](DF比較強大.png)\n\n## 測試對話\nDialogflow 應該有支援**模糊比對**句子之類的功能，像是「我要找長照站」、「哪裡有據點」都沒有完全符合前面設計的句子規則。而且句中如果沒提到地點，Dialogflow 可以再補問「你要找哪裡的長照站?」。相較之下，DDE 就要把句子規則定好定滿，沒有符合就不會回覆相應的句子。\n\n![DF1](DF1.png)\n![DF2](DF2.png)\n> \"...\" 是我還沒把真正的地址加上去，先暫代的，應該是要跟 Fulfillment 串接，但我沒有做完這部份\n\n# DDE 工人智慧\nDDE 雖然是 ASUS 做的，但官方文件卻是以英文為主，中文的版本相對沒那麼齊全。然後建議，文件看過最好順手存下來，他們網站不知道在搞什麼，有一陣子上去找資料發現文字都變成亂碼，還好之前有先用 Notion 存起來。\n\n不過還是有一些優點的，開發遇到問題的時候，寫信給客服信箱，會有他們的工程師回答你，這部分 Dialogflow 應該就無法了。\n> 他也只回我一兩次而已，後面我再接著問的部分，就沒再回了。不過我那時候的主要問題有解決，就不跟他計較啦~\n\nDialogflow 可以模糊比對句子，DDE 話就沒那麼方便，相關的句子規則都要訂清楚，如果設計不好，句子間有可能撞關鍵字。\n\n![DDE1](DDE1.png)\n![DDE2](DDE2.png)\n![DDE3](DDE3.png)\n\n## 和 Zenbo 的搭配\n\n和 Zenbo 的配合方面，DDE 還是要比 Dialogflow 好一點。DDE 做好的語料庫，可以發布到伺服器，在 Zenbo 就可以透過官方提供的 APP 來更新/下載語料。這些語料會跟其他原先就存在的語料放在一起，等於是裝在 Zenbo 腦袋裡。Dialogflow 比較像腦袋在雲端上，只把 Zenbo 當作是一個介面，回傳什麼句子給 Zenbo 他就照唸。\n\n另外，如果要做到「Hey, Zenbo 我要用`APP名稱`」的話，要到 Zenbo 開發者平台註冊 [Developer Console](https://zenbo.asus.com/developer/console/)。\n\n# 結語\n最後，如果沒有真的一定要用 DDE 的話，我會比較建議 Dialogflow。因為 Dialogflow 支援比較多平台，常見的平台都可以串接，如果想裝在 Zenbo 上也可以用 API(不過這部份我沒有實作)，走跟一般 Android 的路線。\n\n好了，比較完了，那你說我最後是用那一個？我只能說都沒有🤦‍♂️\n論文中，我的語料庫模型是用 TF-IDF 自己建的，之後再補這部份的文章吧！\n","slug":"Zenbo開發系列-03-DDE-Editor-vs-Dialogflow","published":1,"updated":"2024-02-24T08:06:01.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myif000tk0jf9q7tgn5y","content":"<p>DDE(dialogue development environment) Editor [<a href=\"https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Welcome\">官方文件</a>] 是由 ASUS 提供，可以設計自己的回覆規則的工具，製作好之後可以把語料安裝到 Zenbo。</p>\n<p>以我有用到的功能來說，Dialogflow 和 DDE 都是 Rule-base 的方式，但我覺得相比 Dialogflow，DDE 就比較「工人智慧」一點😂。</p>\n<span id=\"more\"></span>\n\n<p>對了，DDE <strong>建議搭配 Chrome</strong>。使用 Firefox 的話，右側的對話測試區會沒有反應 <del>(被雷到💣)</del></p>\n<h1 id=\"Dialogflow-比較強大\"><a href=\"#Dialogflow-比較強大\" class=\"headerlink\" title=\"Dialogflow 比較強大\"></a>Dialogflow 比較強大</h1><p>舉例來說，Dialogflow 可以做到這樣</p>\n<p>我先在 Entities 定義了台中「區」的名稱<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF_entities.png\" alt=\"DF_entities\"></p>\n<p>然後設計對話語句<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF%E6%AF%94%E8%BC%83%E5%BC%B7%E5%A4%A7.png\" alt=\"DF比較強大\"></p>\n<h2 id=\"測試對話\"><a href=\"#測試對話\" class=\"headerlink\" title=\"測試對話\"></a>測試對話</h2><p>Dialogflow 應該有支援<strong>模糊比對</strong>句子之類的功能，像是「我要找長照站」、「哪裡有據點」都沒有完全符合前面設計的句子規則。而且句中如果沒提到地點，Dialogflow 可以再補問「你要找哪裡的長照站?」。相較之下，DDE 就要把句子規則定好定滿，沒有符合就不會回覆相應的句子。</p>\n<p><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF1.png\" alt=\"DF1\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF2.png\" alt=\"DF2\"></p>\n<blockquote>\n<p>“…” 是我還沒把真正的地址加上去，先暫代的，應該是要跟 Fulfillment 串接，但我沒有做完這部份</p>\n</blockquote>\n<h1 id=\"DDE-工人智慧\"><a href=\"#DDE-工人智慧\" class=\"headerlink\" title=\"DDE 工人智慧\"></a>DDE 工人智慧</h1><p>DDE 雖然是 ASUS 做的，但官方文件卻是以英文為主，中文的版本相對沒那麼齊全。然後建議，文件看過最好順手存下來，他們網站不知道在搞什麼，有一陣子上去找資料發現文字都變成亂碼，還好之前有先用 Notion 存起來。</p>\n<p>不過還是有一些優點的，開發遇到問題的時候，寫信給客服信箱，會有他們的工程師回答你，這部分 Dialogflow 應該就無法了。</p>\n<blockquote>\n<p>他也只回我一兩次而已，後面我再接著問的部分，就沒再回了。不過我那時候的主要問題有解決，就不跟他計較啦~</p>\n</blockquote>\n<p>Dialogflow 可以模糊比對句子，DDE 話就沒那麼方便，相關的句子規則都要訂清楚，如果設計不好，句子間有可能撞關鍵字。</p>\n<p><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE1.png\" alt=\"DDE1\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE2.png\" alt=\"DDE2\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE3.png\" alt=\"DDE3\"></p>\n<h2 id=\"和-Zenbo-的搭配\"><a href=\"#和-Zenbo-的搭配\" class=\"headerlink\" title=\"和 Zenbo 的搭配\"></a>和 Zenbo 的搭配</h2><p>和 Zenbo 的配合方面，DDE 還是要比 Dialogflow 好一點。DDE 做好的語料庫，可以發布到伺服器，在 Zenbo 就可以透過官方提供的 APP 來更新/下載語料。這些語料會跟其他原先就存在的語料放在一起，等於是裝在 Zenbo 腦袋裡。Dialogflow 比較像腦袋在雲端上，只把 Zenbo 當作是一個介面，回傳什麼句子給 Zenbo 他就照唸。</p>\n<p>另外，如果要做到「Hey, Zenbo 我要用<code>APP名稱</code>」的話，要到 Zenbo 開發者平台註冊 <a href=\"https://zenbo.asus.com/developer/console/\">Developer Console</a>。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>最後，如果沒有真的一定要用 DDE 的話，我會比較建議 Dialogflow。因為 Dialogflow 支援比較多平台，常見的平台都可以串接，如果想裝在 Zenbo 上也可以用 API(不過這部份我沒有實作)，走跟一般 Android 的路線。</p>\n<p>好了，比較完了，那你說我最後是用那一個？我只能說都沒有🤦‍♂️<br>論文中，我的語料庫模型是用 TF-IDF 自己建的，之後再補這部份的文章吧！</p>\n","site":{"data":{}},"excerpt":"<p>DDE(dialogue development environment) Editor [<a href=\"https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Welcome\">官方文件</a>] 是由 ASUS 提供，可以設計自己的回覆規則的工具，製作好之後可以把語料安裝到 Zenbo。</p>\n<p>以我有用到的功能來說，Dialogflow 和 DDE 都是 Rule-base 的方式，但我覺得相比 Dialogflow，DDE 就比較「工人智慧」一點😂。</p>","more":"<p>對了，DDE <strong>建議搭配 Chrome</strong>。使用 Firefox 的話，右側的對話測試區會沒有反應 <del>(被雷到💣)</del></p>\n<h1 id=\"Dialogflow-比較強大\"><a href=\"#Dialogflow-比較強大\" class=\"headerlink\" title=\"Dialogflow 比較強大\"></a>Dialogflow 比較強大</h1><p>舉例來說，Dialogflow 可以做到這樣</p>\n<p>我先在 Entities 定義了台中「區」的名稱<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF_entities.png\" alt=\"DF_entities\"></p>\n<p>然後設計對話語句<br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF%E6%AF%94%E8%BC%83%E5%BC%B7%E5%A4%A7.png\" alt=\"DF比較強大\"></p>\n<h2 id=\"測試對話\"><a href=\"#測試對話\" class=\"headerlink\" title=\"測試對話\"></a>測試對話</h2><p>Dialogflow 應該有支援<strong>模糊比對</strong>句子之類的功能，像是「我要找長照站」、「哪裡有據點」都沒有完全符合前面設計的句子規則。而且句中如果沒提到地點，Dialogflow 可以再補問「你要找哪裡的長照站?」。相較之下，DDE 就要把句子規則定好定滿，沒有符合就不會回覆相應的句子。</p>\n<p><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF1.png\" alt=\"DF1\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DF2.png\" alt=\"DF2\"></p>\n<blockquote>\n<p>“…” 是我還沒把真正的地址加上去，先暫代的，應該是要跟 Fulfillment 串接，但我沒有做完這部份</p>\n</blockquote>\n<h1 id=\"DDE-工人智慧\"><a href=\"#DDE-工人智慧\" class=\"headerlink\" title=\"DDE 工人智慧\"></a>DDE 工人智慧</h1><p>DDE 雖然是 ASUS 做的，但官方文件卻是以英文為主，中文的版本相對沒那麼齊全。然後建議，文件看過最好順手存下來，他們網站不知道在搞什麼，有一陣子上去找資料發現文字都變成亂碼，還好之前有先用 Notion 存起來。</p>\n<p>不過還是有一些優點的，開發遇到問題的時候，寫信給客服信箱，會有他們的工程師回答你，這部分 Dialogflow 應該就無法了。</p>\n<blockquote>\n<p>他也只回我一兩次而已，後面我再接著問的部分，就沒再回了。不過我那時候的主要問題有解決，就不跟他計較啦~</p>\n</blockquote>\n<p>Dialogflow 可以模糊比對句子，DDE 話就沒那麼方便，相關的句子規則都要訂清楚，如果設計不好，句子間有可能撞關鍵字。</p>\n<p><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE1.png\" alt=\"DDE1\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE2.png\" alt=\"DDE2\"><br><img src=\"/2021/08/05/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-03-DDE-Editor-vs-Dialogflow/DDE3.png\" alt=\"DDE3\"></p>\n<h2 id=\"和-Zenbo-的搭配\"><a href=\"#和-Zenbo-的搭配\" class=\"headerlink\" title=\"和 Zenbo 的搭配\"></a>和 Zenbo 的搭配</h2><p>和 Zenbo 的配合方面，DDE 還是要比 Dialogflow 好一點。DDE 做好的語料庫，可以發布到伺服器，在 Zenbo 就可以透過官方提供的 APP 來更新/下載語料。這些語料會跟其他原先就存在的語料放在一起，等於是裝在 Zenbo 腦袋裡。Dialogflow 比較像腦袋在雲端上，只把 Zenbo 當作是一個介面，回傳什麼句子給 Zenbo 他就照唸。</p>\n<p>另外，如果要做到「Hey, Zenbo 我要用<code>APP名稱</code>」的話，要到 Zenbo 開發者平台註冊 <a href=\"https://zenbo.asus.com/developer/console/\">Developer Console</a>。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>最後，如果沒有真的一定要用 DDE 的話，我會比較建議 Dialogflow。因為 Dialogflow 支援比較多平台，常見的平台都可以串接，如果想裝在 Zenbo 上也可以用 API(不過這部份我沒有實作)，走跟一般 Android 的路線。</p>\n<p>好了，比較完了，那你說我最後是用那一個？我只能說都沒有🤦‍♂️<br>論文中，我的語料庫模型是用 TF-IDF 自己建的，之後再補這部份的文章吧！</p>"},{"title":"[Zenbo開發系列] 07-DDE與App Builder","date":"2021-08-10T08:42:53.000Z","_content":"\n研究過程中，要把 DDE 安裝到 Zenbo 的時候，卡關超久...🙃\n試過好多方法，當然也包括 App Builder (下面簡稱 AB)。AB 就是像 App Inventor 或 Scrach 的積木程式，可以讓小朋友玩，訓練邏輯。可能是身為 Android 工程師的堅持(?)，本來很抗拒使用積木程式的，但實在卡關太久了，隨便啦，就試試看吧!\n<!-- more -->\n\n先說結論，AB 不適合我的使用情境，因為我題庫很多，一個個建積木太累，也很占版面，不好維護。但如果你的對話不多或有比較複雜的槽狀判斷，我會覺得用積木會比在 DDE Input/Output Context 設計，看起來更清楚。\n\n# 註冊專案\nDeveloper > Console > App Management\n要選 App Builder 哦！\n得到的 APP ID，等下要用。\n![project_register](project_register.jpg)\n\n# DDE 語料建置\n\n這部份請參考前面的文章，就不再多說明了。\n\nConcepts 和 Intents 的內容都跟前面要搭配 Zenbo SDK 裝到 Zenbo 的時候一樣，只有 Plans 有點不同。\n除了 `ThisPlanLaunchingThisApp` 不用 Input Context 以外，每個 Plan 的 Input Context 都要是不同的字串。Action 不用填，用不到，要回覆的內容寫在 AB 那邊。\n\n## 設定參考\n\n### Info\n設定方式參考前面的文章。建立一個新的 Domain UUID。Domain UUID 等下要用。\n![info](info.png)\n\n### Plans\n![plans1](plans1.png)\n![plans2](plans2.png)\n![plans3](plans3.png)\n\n# App Builder 專案建置\n打開 [App Builder](https://zenbo.asus.com/developer/tools/app-builder.jsp) 建立一個新專案。\n彈個手指！就好啦～\n\n![AB](AB.png)\n\n放大圖:\n![AB1](AB1.png)\n![AB2](AB2.png)\n![AB3](AB3.png)\n> 因為沒辦法只放圖片，它一定要搭配 Music Sorce，所以就隨便挑一個音樂，音量填 0 就好。\n![AB4](AB4.png)\n\n## 專案儲存\n![save](save.jpg)\nAPP ID 和 Domain UUID 在上面註冊專案和 Info 的時候都建好了，複製貼上。\n\n# 安裝\n專案儲存後，會得到 ZBA 檔，可以想成是 APK，就是 App 的安裝檔。\n可以使用任何方式，只要你能把 ZBA 傳到 Zenbo，影片中我使用的是雲端硬碟。\n\n{% youtube 5J5_-64-Foo %}\n\n## 更新語料(DS Tools)\n安裝的時候就會更新一次了，如果 DDE 有修改可以再來這邊更新一次。\n\n{% youtube Qko4bVNGnl4 %}\n","source":"_posts/Zenbo開發系列-07-DDE與App-Builder.md","raw":"---\ntitle: '[Zenbo開發系列] 07-DDE與App Builder'\ndate: 2021-08-10 16:42:53\ntags:\n- Zenbo\n- DDE\n- 聊天機器人\n- 13th鐵人賽\n---\n\n研究過程中，要把 DDE 安裝到 Zenbo 的時候，卡關超久...🙃\n試過好多方法，當然也包括 App Builder (下面簡稱 AB)。AB 就是像 App Inventor 或 Scrach 的積木程式，可以讓小朋友玩，訓練邏輯。可能是身為 Android 工程師的堅持(?)，本來很抗拒使用積木程式的，但實在卡關太久了，隨便啦，就試試看吧!\n<!-- more -->\n\n先說結論，AB 不適合我的使用情境，因為我題庫很多，一個個建積木太累，也很占版面，不好維護。但如果你的對話不多或有比較複雜的槽狀判斷，我會覺得用積木會比在 DDE Input/Output Context 設計，看起來更清楚。\n\n# 註冊專案\nDeveloper > Console > App Management\n要選 App Builder 哦！\n得到的 APP ID，等下要用。\n![project_register](project_register.jpg)\n\n# DDE 語料建置\n\n這部份請參考前面的文章，就不再多說明了。\n\nConcepts 和 Intents 的內容都跟前面要搭配 Zenbo SDK 裝到 Zenbo 的時候一樣，只有 Plans 有點不同。\n除了 `ThisPlanLaunchingThisApp` 不用 Input Context 以外，每個 Plan 的 Input Context 都要是不同的字串。Action 不用填，用不到，要回覆的內容寫在 AB 那邊。\n\n## 設定參考\n\n### Info\n設定方式參考前面的文章。建立一個新的 Domain UUID。Domain UUID 等下要用。\n![info](info.png)\n\n### Plans\n![plans1](plans1.png)\n![plans2](plans2.png)\n![plans3](plans3.png)\n\n# App Builder 專案建置\n打開 [App Builder](https://zenbo.asus.com/developer/tools/app-builder.jsp) 建立一個新專案。\n彈個手指！就好啦～\n\n![AB](AB.png)\n\n放大圖:\n![AB1](AB1.png)\n![AB2](AB2.png)\n![AB3](AB3.png)\n> 因為沒辦法只放圖片，它一定要搭配 Music Sorce，所以就隨便挑一個音樂，音量填 0 就好。\n![AB4](AB4.png)\n\n## 專案儲存\n![save](save.jpg)\nAPP ID 和 Domain UUID 在上面註冊專案和 Info 的時候都建好了，複製貼上。\n\n# 安裝\n專案儲存後，會得到 ZBA 檔，可以想成是 APK，就是 App 的安裝檔。\n可以使用任何方式，只要你能把 ZBA 傳到 Zenbo，影片中我使用的是雲端硬碟。\n\n{% youtube 5J5_-64-Foo %}\n\n## 更新語料(DS Tools)\n安裝的時候就會更新一次了，如果 DDE 有修改可以再來這邊更新一次。\n\n{% youtube Qko4bVNGnl4 %}\n","slug":"Zenbo開發系列-07-DDE與App-Builder","published":1,"updated":"2024-02-24T08:06:01.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myif000vk0jf9gzq453h","content":"<p>研究過程中，要把 DDE 安裝到 Zenbo 的時候，卡關超久…🙃<br>試過好多方法，當然也包括 App Builder (下面簡稱 AB)。AB 就是像 App Inventor 或 Scrach 的積木程式，可以讓小朋友玩，訓練邏輯。可能是身為 Android 工程師的堅持(?)，本來很抗拒使用積木程式的，但實在卡關太久了，隨便啦，就試試看吧!</p>\n<span id=\"more\"></span>\n\n<p>先說結論，AB 不適合我的使用情境，因為我題庫很多，一個個建積木太累，也很占版面，不好維護。但如果你的對話不多或有比較複雜的槽狀判斷，我會覺得用積木會比在 DDE Input/Output Context 設計，看起來更清楚。</p>\n<h1 id=\"註冊專案\"><a href=\"#註冊專案\" class=\"headerlink\" title=\"註冊專案\"></a>註冊專案</h1><p>Developer &gt; Console &gt; App Management<br>要選 App Builder 哦！<br>得到的 APP ID，等下要用。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/project_register.jpg\" alt=\"project_register\"></p>\n<h1 id=\"DDE-語料建置\"><a href=\"#DDE-語料建置\" class=\"headerlink\" title=\"DDE 語料建置\"></a>DDE 語料建置</h1><p>這部份請參考前面的文章，就不再多說明了。</p>\n<p>Concepts 和 Intents 的內容都跟前面要搭配 Zenbo SDK 裝到 Zenbo 的時候一樣，只有 Plans 有點不同。<br>除了 <code>ThisPlanLaunchingThisApp</code> 不用 Input Context 以外，每個 Plan 的 Input Context 都要是不同的字串。Action 不用填，用不到，要回覆的內容寫在 AB 那邊。</p>\n<h2 id=\"設定參考\"><a href=\"#設定參考\" class=\"headerlink\" title=\"設定參考\"></a>設定參考</h2><h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h3><p>設定方式參考前面的文章。建立一個新的 Domain UUID。Domain UUID 等下要用。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/info.png\" alt=\"info\"></p>\n<h3 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h3><p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans1.png\" alt=\"plans1\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans2.png\" alt=\"plans2\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans3.png\" alt=\"plans3\"></p>\n<h1 id=\"App-Builder-專案建置\"><a href=\"#App-Builder-專案建置\" class=\"headerlink\" title=\"App Builder 專案建置\"></a>App Builder 專案建置</h1><p>打開 <a href=\"https://zenbo.asus.com/developer/tools/app-builder.jsp\">App Builder</a> 建立一個新專案。<br>彈個手指！就好啦～</p>\n<p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB.png\" alt=\"AB\"></p>\n<p>放大圖:<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB1.png\" alt=\"AB1\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB2.png\" alt=\"AB2\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB3.png\" alt=\"AB3\"></p>\n<blockquote>\n<p>因為沒辦法只放圖片，它一定要搭配 Music Sorce，所以就隨便挑一個音樂，音量填 0 就好。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB4.png\" alt=\"AB4\"></p>\n</blockquote>\n<h2 id=\"專案儲存\"><a href=\"#專案儲存\" class=\"headerlink\" title=\"專案儲存\"></a>專案儲存</h2><p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/save.jpg\" alt=\"save\"><br>APP ID 和 Domain UUID 在上面註冊專案和 Info 的時候都建好了，複製貼上。</p>\n<h1 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h1><p>專案儲存後，會得到 ZBA 檔，可以想成是 APK，就是 App 的安裝檔。<br>可以使用任何方式，只要你能把 ZBA 傳到 Zenbo，影片中我使用的是雲端硬碟。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/5J5_-64-Foo\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h2 id=\"更新語料-DS-Tools\"><a href=\"#更新語料-DS-Tools\" class=\"headerlink\" title=\"更新語料(DS Tools)\"></a>更新語料(DS Tools)</h2><p>安裝的時候就會更新一次了，如果 DDE 有修改可以再來這邊更新一次。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Qko4bVNGnl4\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n","site":{"data":{}},"excerpt":"<p>研究過程中，要把 DDE 安裝到 Zenbo 的時候，卡關超久…🙃<br>試過好多方法，當然也包括 App Builder (下面簡稱 AB)。AB 就是像 App Inventor 或 Scrach 的積木程式，可以讓小朋友玩，訓練邏輯。可能是身為 Android 工程師的堅持(?)，本來很抗拒使用積木程式的，但實在卡關太久了，隨便啦，就試試看吧!</p>","more":"<p>先說結論，AB 不適合我的使用情境，因為我題庫很多，一個個建積木太累，也很占版面，不好維護。但如果你的對話不多或有比較複雜的槽狀判斷，我會覺得用積木會比在 DDE Input/Output Context 設計，看起來更清楚。</p>\n<h1 id=\"註冊專案\"><a href=\"#註冊專案\" class=\"headerlink\" title=\"註冊專案\"></a>註冊專案</h1><p>Developer &gt; Console &gt; App Management<br>要選 App Builder 哦！<br>得到的 APP ID，等下要用。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/project_register.jpg\" alt=\"project_register\"></p>\n<h1 id=\"DDE-語料建置\"><a href=\"#DDE-語料建置\" class=\"headerlink\" title=\"DDE 語料建置\"></a>DDE 語料建置</h1><p>這部份請參考前面的文章，就不再多說明了。</p>\n<p>Concepts 和 Intents 的內容都跟前面要搭配 Zenbo SDK 裝到 Zenbo 的時候一樣，只有 Plans 有點不同。<br>除了 <code>ThisPlanLaunchingThisApp</code> 不用 Input Context 以外，每個 Plan 的 Input Context 都要是不同的字串。Action 不用填，用不到，要回覆的內容寫在 AB 那邊。</p>\n<h2 id=\"設定參考\"><a href=\"#設定參考\" class=\"headerlink\" title=\"設定參考\"></a>設定參考</h2><h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h3><p>設定方式參考前面的文章。建立一個新的 Domain UUID。Domain UUID 等下要用。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/info.png\" alt=\"info\"></p>\n<h3 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h3><p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans1.png\" alt=\"plans1\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans2.png\" alt=\"plans2\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/plans3.png\" alt=\"plans3\"></p>\n<h1 id=\"App-Builder-專案建置\"><a href=\"#App-Builder-專案建置\" class=\"headerlink\" title=\"App Builder 專案建置\"></a>App Builder 專案建置</h1><p>打開 <a href=\"https://zenbo.asus.com/developer/tools/app-builder.jsp\">App Builder</a> 建立一個新專案。<br>彈個手指！就好啦～</p>\n<p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB.png\" alt=\"AB\"></p>\n<p>放大圖:<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB1.png\" alt=\"AB1\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB2.png\" alt=\"AB2\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB3.png\" alt=\"AB3\"></p>\n<blockquote>\n<p>因為沒辦法只放圖片，它一定要搭配 Music Sorce，所以就隨便挑一個音樂，音量填 0 就好。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/AB4.png\" alt=\"AB4\"></p>\n</blockquote>\n<h2 id=\"專案儲存\"><a href=\"#專案儲存\" class=\"headerlink\" title=\"專案儲存\"></a>專案儲存</h2><p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-07-DDE%E8%88%87App-Builder/save.jpg\" alt=\"save\"><br>APP ID 和 Domain UUID 在上面註冊專案和 Info 的時候都建好了，複製貼上。</p>\n<h1 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h1><p>專案儲存後，會得到 ZBA 檔，可以想成是 APK，就是 App 的安裝檔。<br>可以使用任何方式，只要你能把 ZBA 傳到 Zenbo，影片中我使用的是雲端硬碟。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/5J5_-64-Foo\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h2 id=\"更新語料-DS-Tools\"><a href=\"#更新語料-DS-Tools\" class=\"headerlink\" title=\"更新語料(DS Tools)\"></a>更新語料(DS Tools)</h2><p>安裝的時候就會更新一次了，如果 DDE 有修改可以再來這邊更新一次。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Qko4bVNGnl4\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>"},{"title":"[Zenbo開發系列] 04-DDE簡介","date":"2021-08-06T17:26:56.000Z","_content":"\n這篇主要是我之前看官方文件的筆記，還有對於幾個 Basic Concepts 的理解，可能比較沒有結構一點。建議以官方文件的教學為主，再參考我的筆記，這篇紀錄了我之前不懂地方，希望也能幫到你。\n\n為了寫這篇文章，今天又上去翻了一下官方文件，發現還有在更新呢!\n\n想想之前做要做 DDE 語料，看官方文件踩了不少雷💣\n<!--more-->\n\n> 官方文件使用方法:\n> - 如果有時間，可以中英文互相參照，有時候兩個版本內容不太相同。\n> - 如果有在官方文件找不到說明，嘗試把不同版本的文件互相參照。曾經發現一個我找很久的說明，在舊版本有寫，但在新版本被移除了。\n>   - 可是這個功能在系統上還存在欸! 😡\n> - 遇到官方文件也沒說明清楚的時候，就只能自己摸索了，加油!\n\n# 筆記開始\n\n> 紀錄時間: 2020/04/25\n\n**<<以下是當初研究時隨手紀錄，請以官方文件為主>>**\n\n這次是根據這兩份教學文件\n- [Template: Hello World](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Templates/Hello-World)\n- [Hello-City-(zh)](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/Hello-City-(zh))\n\n建置完後發現，上次不能送出應該是因為瀏覽器(firefox🦊)的問題，改用chrome後可以正常送出。\n\n# How to start 導論\n\n[How to start](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/How-to-start(zh))\n\n> Zenbo 內部因為有口語理解模組 (Spoken Language Understanding / SLU)，將語音辨識資訊轉化為結構化的語意資料，並提供給適當的Domain 處理。\n\n> 人類與Zenbo的對話是透過一連串的Intent(意圖)語句組成。Concept(概念)則是語句的詞彙，而Plan(流程)則是負責串起語句之間的流程來建立一段完整對話。\n\nUser在問答中的語句為Intent，Intent中的詞彙為Concept。\n\n# Info\n\n![Untitled.png](Untitled.png)\n\n塗掉的那幾欄如果需要發佈才要填的\n\n![Untitled1.png](Untitled1.png)\n\n# Plans\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [ASUS DDE - Plans](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Plans) )\n\n因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。\n\n這邊就是要回答的文字，應該翻叫「計畫」，「計畫」是將一組事件對應到一系列的動作。\n\nUtteranceToLaunchApp 是要開啟 APP 的 Plans\n\n![Untitled2.png](Untitled2.png)\n\n## PlanID\n\n每個plan要有唯一id\n\n## Is the plan able to launch the app?\n\n- true: 可以啟動App\n- false: 不行\n\n## Event\nevent的CSR是「語音辨識結果」\n\n![Plans1](Plans1.png)\n![Plans2](Plans2.png)\n\n# Intents\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [DDE Tutorial - Intents](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Intents) )\n\n可以設定多種句型，應該翻叫「意圖」。\n\n因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。\n\n人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。 <- 官方文件寫的\n\n> BrandName = 品牌名，ex: 華碩\n\n> VoiceTag(App Name) = APP名稱，ex: 長照\n\n![Untitled3.png](Untitled3.png)\n\n![Untitled4.png](Untitled4.png)\n\n# Concepts\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [DDE Tutorial - Concepts](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Concepts) )\n\n我會把他翻作「概念」，大概就是可以將很多同意詞群組起來的。在 Dialoflow 叫 Entities。\n\n![Untitled5.png](Untitled5.png)\n![Untitled6.png](Untitled6.png)\n![Untitled07.png](Untitled7.png)\n\n## Type\n選項有： `Class` 和 `Phrase`\n文件建議選 `Class` ，但未解釋`Phrase` 的用途。\n\n> 文件 v1.1.3 提到，若是使用class，所有的實例都要是類別；若使用phrase，所有實例都要是片語。\n\n# Publish\n\n右上有publish按鈕\n\n![Untitled8.png](Untitled8.png)\n\n# Tests\n\n右方有輸入框可以測試\n\n要用Chrome!!\n\n![Untitled9.png](Untitled9.png)\n\n# 參考資料\n## 學習資源\n- [Home Robot / Zenbo (APP Builder / DDE Editor)](https://sites.google.com/site/goofoo777/106_1-jiao-xue-ke-cheng/home-robot)\n- [Zenbo機器人開發者社群](https://www.facebook.com/groups/zenbo.dev)\n- [分享_基於Zenbo語音的多機協作開發技術_ok](https://www.facebook.com/groups/zenbo.dev/permalink/1567101126726820)\n\n## 相關文獻\n- [AI機器人、藍芽與Android整合開發技術](https://www.books.com.tw/products/0010809325)\n  - 推這本書👍，裡面有介紹不同機器人間互動時程式設計的架構，還有 Zenbo SDK 的 Sample Code。可以寄信向作者高煥堂老師索取完整原始碼。\n- [智慧家庭陪伴系統 (專題)](https://www.csie.nuu.edu.tw/wp-content/uploads/2019/09/2018-%E7%8E%8B%E8%83%BD%E4%B8%AD-%E5%B0%88%E9%A1%8C.pdf)\n- [銀髮族使用Zenbo機器人服務體驗洞察研究](https://hdl.handle.net/11296/x4x8c6)\n- [陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo為例](https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282)\n","source":"_posts/Zenbo開發系列-04-DDE簡介.md","raw":"---\ntitle: '[Zenbo開發系列] 04-DDE簡介'\ndate: 2021-08-07 01:26:56\ntags: \n- Zenbo\n- DDE\n- 13th鐵人賽\n---\n\n這篇主要是我之前看官方文件的筆記，還有對於幾個 Basic Concepts 的理解，可能比較沒有結構一點。建議以官方文件的教學為主，再參考我的筆記，這篇紀錄了我之前不懂地方，希望也能幫到你。\n\n為了寫這篇文章，今天又上去翻了一下官方文件，發現還有在更新呢!\n\n想想之前做要做 DDE 語料，看官方文件踩了不少雷💣\n<!--more-->\n\n> 官方文件使用方法:\n> - 如果有時間，可以中英文互相參照，有時候兩個版本內容不太相同。\n> - 如果有在官方文件找不到說明，嘗試把不同版本的文件互相參照。曾經發現一個我找很久的說明，在舊版本有寫，但在新版本被移除了。\n>   - 可是這個功能在系統上還存在欸! 😡\n> - 遇到官方文件也沒說明清楚的時候，就只能自己摸索了，加油!\n\n# 筆記開始\n\n> 紀錄時間: 2020/04/25\n\n**<<以下是當初研究時隨手紀錄，請以官方文件為主>>**\n\n這次是根據這兩份教學文件\n- [Template: Hello World](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Templates/Hello-World)\n- [Hello-City-(zh)](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/Hello-City-(zh))\n\n建置完後發現，上次不能送出應該是因為瀏覽器(firefox🦊)的問題，改用chrome後可以正常送出。\n\n# How to start 導論\n\n[How to start](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/How-to-start(zh))\n\n> Zenbo 內部因為有口語理解模組 (Spoken Language Understanding / SLU)，將語音辨識資訊轉化為結構化的語意資料，並提供給適當的Domain 處理。\n\n> 人類與Zenbo的對話是透過一連串的Intent(意圖)語句組成。Concept(概念)則是語句的詞彙，而Plan(流程)則是負責串起語句之間的流程來建立一段完整對話。\n\nUser在問答中的語句為Intent，Intent中的詞彙為Concept。\n\n# Info\n\n![Untitled.png](Untitled.png)\n\n塗掉的那幾欄如果需要發佈才要填的\n\n![Untitled1.png](Untitled1.png)\n\n# Plans\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [ASUS DDE - Plans](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Plans) )\n\n因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。\n\n這邊就是要回答的文字，應該翻叫「計畫」，「計畫」是將一組事件對應到一系列的動作。\n\nUtteranceToLaunchApp 是要開啟 APP 的 Plans\n\n![Untitled2.png](Untitled2.png)\n\n## PlanID\n\n每個plan要有唯一id\n\n## Is the plan able to launch the app?\n\n- true: 可以啟動App\n- false: 不行\n\n## Event\nevent的CSR是「語音辨識結果」\n\n![Plans1](Plans1.png)\n![Plans2](Plans2.png)\n\n# Intents\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [DDE Tutorial - Intents](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Intents) )\n\n可以設定多種句型，應該翻叫「意圖」。\n\n因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。\n\n人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。 <- 官方文件寫的\n\n> BrandName = 品牌名，ex: 華碩\n\n> VoiceTag(App Name) = APP名稱，ex: 長照\n\n![Untitled3.png](Untitled3.png)\n\n![Untitled4.png](Untitled4.png)\n\n# Concepts\n\n撰寫這份筆記時，最新版文件是 `v1.1.4` 。( [DDE Tutorial - Concepts](https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Concepts) )\n\n我會把他翻作「概念」，大概就是可以將很多同意詞群組起來的。在 Dialoflow 叫 Entities。\n\n![Untitled5.png](Untitled5.png)\n![Untitled6.png](Untitled6.png)\n![Untitled07.png](Untitled7.png)\n\n## Type\n選項有： `Class` 和 `Phrase`\n文件建議選 `Class` ，但未解釋`Phrase` 的用途。\n\n> 文件 v1.1.3 提到，若是使用class，所有的實例都要是類別；若使用phrase，所有實例都要是片語。\n\n# Publish\n\n右上有publish按鈕\n\n![Untitled8.png](Untitled8.png)\n\n# Tests\n\n右方有輸入框可以測試\n\n要用Chrome!!\n\n![Untitled9.png](Untitled9.png)\n\n# 參考資料\n## 學習資源\n- [Home Robot / Zenbo (APP Builder / DDE Editor)](https://sites.google.com/site/goofoo777/106_1-jiao-xue-ke-cheng/home-robot)\n- [Zenbo機器人開發者社群](https://www.facebook.com/groups/zenbo.dev)\n- [分享_基於Zenbo語音的多機協作開發技術_ok](https://www.facebook.com/groups/zenbo.dev/permalink/1567101126726820)\n\n## 相關文獻\n- [AI機器人、藍芽與Android整合開發技術](https://www.books.com.tw/products/0010809325)\n  - 推這本書👍，裡面有介紹不同機器人間互動時程式設計的架構，還有 Zenbo SDK 的 Sample Code。可以寄信向作者高煥堂老師索取完整原始碼。\n- [智慧家庭陪伴系統 (專題)](https://www.csie.nuu.edu.tw/wp-content/uploads/2019/09/2018-%E7%8E%8B%E8%83%BD%E4%B8%AD-%E5%B0%88%E9%A1%8C.pdf)\n- [銀髮族使用Zenbo機器人服務體驗洞察研究](https://hdl.handle.net/11296/x4x8c6)\n- [陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo為例](https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282)\n","slug":"Zenbo開發系列-04-DDE簡介","published":1,"updated":"2024-02-24T08:06:01.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myif000wk0jfb1f6hdbg","content":"<p>這篇主要是我之前看官方文件的筆記，還有對於幾個 Basic Concepts 的理解，可能比較沒有結構一點。建議以官方文件的教學為主，再參考我的筆記，這篇紀錄了我之前不懂地方，希望也能幫到你。</p>\n<p>為了寫這篇文章，今天又上去翻了一下官方文件，發現還有在更新呢!</p>\n<p>想想之前做要做 DDE 語料，看官方文件踩了不少雷💣</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>官方文件使用方法:</p>\n<ul>\n<li>如果有時間，可以中英文互相參照，有時候兩個版本內容不太相同。</li>\n<li>如果有在官方文件找不到說明，嘗試把不同版本的文件互相參照。曾經發現一個我找很久的說明，在舊版本有寫，但在新版本被移除了。<ul>\n<li>可是這個功能在系統上還存在欸! 😡</li>\n</ul>\n</li>\n<li>遇到官方文件也沒說明清楚的時候，就只能自己摸索了，加油!</li>\n</ul>\n</blockquote>\n<h1 id=\"筆記開始\"><a href=\"#筆記開始\" class=\"headerlink\" title=\"筆記開始\"></a>筆記開始</h1><blockquote>\n<p>紀錄時間: 2020/04/25</p>\n</blockquote>\n<p><strong>&lt;&lt;以下是當初研究時隨手紀錄，請以官方文件為主&gt;&gt;</strong></p>\n<p>這次是根據這兩份教學文件</p>\n<ul>\n<li><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Templates/Hello-World\">Template: Hello World</a></li>\n<li><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/Hello-City-(zh)\">Hello-City-(zh)</a></li>\n</ul>\n<p>建置完後發現，上次不能送出應該是因為瀏覽器(firefox🦊)的問題，改用chrome後可以正常送出。</p>\n<h1 id=\"How-to-start-導論\"><a href=\"#How-to-start-導論\" class=\"headerlink\" title=\"How to start 導論\"></a>How to start 導論</h1><p><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/How-to-start(zh)\">How to start</a></p>\n<blockquote>\n<p>Zenbo 內部因為有口語理解模組 (Spoken Language Understanding / SLU)，將語音辨識資訊轉化為結構化的語意資料，並提供給適當的Domain 處理。</p>\n</blockquote>\n<blockquote>\n<p>人類與Zenbo的對話是透過一連串的Intent(意圖)語句組成。Concept(概念)則是語句的詞彙，而Plan(流程)則是負責串起語句之間的流程來建立一段完整對話。</p>\n</blockquote>\n<p>User在問答中的語句為Intent，Intent中的詞彙為Concept。</p>\n<h1 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h1><p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled.png\" alt=\"Untitled.png\"></p>\n<p>塗掉的那幾欄如果需要發佈才要填的</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled1.png\" alt=\"Untitled1.png\"></p>\n<h1 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Plans\">ASUS DDE - Plans</a> )</p>\n<p>因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。</p>\n<p>這邊就是要回答的文字，應該翻叫「計畫」，「計畫」是將一組事件對應到一系列的動作。</p>\n<p>UtteranceToLaunchApp 是要開啟 APP 的 Plans</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled2.png\" alt=\"Untitled2.png\"></p>\n<h2 id=\"PlanID\"><a href=\"#PlanID\" class=\"headerlink\" title=\"PlanID\"></a>PlanID</h2><p>每個plan要有唯一id</p>\n<h2 id=\"Is-the-plan-able-to-launch-the-app\"><a href=\"#Is-the-plan-able-to-launch-the-app\" class=\"headerlink\" title=\"Is the plan able to launch the app?\"></a>Is the plan able to launch the app?</h2><ul>\n<li>true: 可以啟動App</li>\n<li>false: 不行</li>\n</ul>\n<h2 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h2><p>event的CSR是「語音辨識結果」</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Plans1.png\" alt=\"Plans1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Plans2.png\" alt=\"Plans2\"></p>\n<h1 id=\"Intents\"><a href=\"#Intents\" class=\"headerlink\" title=\"Intents\"></a>Intents</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Intents\">DDE Tutorial - Intents</a> )</p>\n<p>可以設定多種句型，應該翻叫「意圖」。</p>\n<p>因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。</p>\n<p>人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。 &lt;- 官方文件寫的</p>\n<blockquote>\n<p>BrandName = 品牌名，ex: 華碩</p>\n</blockquote>\n<blockquote>\n<p>VoiceTag(App Name) = APP名稱，ex: 長照</p>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled3.png\" alt=\"Untitled3.png\"></p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled4.png\" alt=\"Untitled4.png\"></p>\n<h1 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Concepts\">DDE Tutorial - Concepts</a> )</p>\n<p>我會把他翻作「概念」，大概就是可以將很多同意詞群組起來的。在 Dialoflow 叫 Entities。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled5.png\" alt=\"Untitled5.png\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled6.png\" alt=\"Untitled6.png\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled7.png\" alt=\"Untitled07.png\"></p>\n<h2 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h2><p>選項有： <code>Class</code> 和 <code>Phrase</code><br>文件建議選 <code>Class</code> ，但未解釋<code>Phrase</code> 的用途。</p>\n<blockquote>\n<p>文件 v1.1.3 提到，若是使用class，所有的實例都要是類別；若使用phrase，所有實例都要是片語。</p>\n</blockquote>\n<h1 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h1><p>右上有publish按鈕</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled8.png\" alt=\"Untitled8.png\"></p>\n<h1 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h1><p>右方有輸入框可以測試</p>\n<p>要用Chrome!!</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled9.png\" alt=\"Untitled9.png\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><h2 id=\"學習資源\"><a href=\"#學習資源\" class=\"headerlink\" title=\"學習資源\"></a>學習資源</h2><ul>\n<li><a href=\"https://sites.google.com/site/goofoo777/106_1-jiao-xue-ke-cheng/home-robot\">Home Robot / Zenbo (APP Builder / DDE Editor)</a></li>\n<li><a href=\"https://www.facebook.com/groups/zenbo.dev\">Zenbo機器人開發者社群</a></li>\n<li><a href=\"https://www.facebook.com/groups/zenbo.dev/permalink/1567101126726820\">分享_基於Zenbo語音的多機協作開發技術_ok</a></li>\n</ul>\n<h2 id=\"相關文獻\"><a href=\"#相關文獻\" class=\"headerlink\" title=\"相關文獻\"></a>相關文獻</h2><ul>\n<li><a href=\"https://www.books.com.tw/products/0010809325\">AI機器人、藍芽與Android整合開發技術</a><ul>\n<li>推這本書👍，裡面有介紹不同機器人間互動時程式設計的架構，還有 Zenbo SDK 的 Sample Code。可以寄信向作者高煥堂老師索取完整原始碼。</li>\n</ul>\n</li>\n<li><a href=\"https://www.csie.nuu.edu.tw/wp-content/uploads/2019/09/2018-%E7%8E%8B%E8%83%BD%E4%B8%AD-%E5%B0%88%E9%A1%8C.pdf\">智慧家庭陪伴系統 (專題)</a></li>\n<li><a href=\"https://hdl.handle.net/11296/x4x8c6\">銀髮族使用Zenbo機器人服務體驗洞察研究</a></li>\n<li><a href=\"https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282\">陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo為例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>這篇主要是我之前看官方文件的筆記，還有對於幾個 Basic Concepts 的理解，可能比較沒有結構一點。建議以官方文件的教學為主，再參考我的筆記，這篇紀錄了我之前不懂地方，希望也能幫到你。</p>\n<p>為了寫這篇文章，今天又上去翻了一下官方文件，發現還有在更新呢!</p>\n<p>想想之前做要做 DDE 語料，看官方文件踩了不少雷💣</p>","more":"<blockquote>\n<p>官方文件使用方法:</p>\n<ul>\n<li>如果有時間，可以中英文互相參照，有時候兩個版本內容不太相同。</li>\n<li>如果有在官方文件找不到說明，嘗試把不同版本的文件互相參照。曾經發現一個我找很久的說明，在舊版本有寫，但在新版本被移除了。<ul>\n<li>可是這個功能在系統上還存在欸! 😡</li>\n</ul>\n</li>\n<li>遇到官方文件也沒說明清楚的時候，就只能自己摸索了，加油!</li>\n</ul>\n</blockquote>\n<h1 id=\"筆記開始\"><a href=\"#筆記開始\" class=\"headerlink\" title=\"筆記開始\"></a>筆記開始</h1><blockquote>\n<p>紀錄時間: 2020/04/25</p>\n</blockquote>\n<p><strong>&lt;&lt;以下是當初研究時隨手紀錄，請以官方文件為主&gt;&gt;</strong></p>\n<p>這次是根據這兩份教學文件</p>\n<ul>\n<li><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Templates/Hello-World\">Template: Hello World</a></li>\n<li><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/Hello-City-(zh)\">Hello-City-(zh)</a></li>\n</ul>\n<p>建置完後發現，上次不能送出應該是因為瀏覽器(firefox🦊)的問題，改用chrome後可以正常送出。</p>\n<h1 id=\"How-to-start-導論\"><a href=\"#How-to-start-導論\" class=\"headerlink\" title=\"How to start 導論\"></a>How to start 導論</h1><p><a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Quick-Start/How-to-start(zh)\">How to start</a></p>\n<blockquote>\n<p>Zenbo 內部因為有口語理解模組 (Spoken Language Understanding / SLU)，將語音辨識資訊轉化為結構化的語意資料，並提供給適當的Domain 處理。</p>\n</blockquote>\n<blockquote>\n<p>人類與Zenbo的對話是透過一連串的Intent(意圖)語句組成。Concept(概念)則是語句的詞彙，而Plan(流程)則是負責串起語句之間的流程來建立一段完整對話。</p>\n</blockquote>\n<p>User在問答中的語句為Intent，Intent中的詞彙為Concept。</p>\n<h1 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h1><p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled.png\" alt=\"Untitled.png\"></p>\n<p>塗掉的那幾欄如果需要發佈才要填的</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled1.png\" alt=\"Untitled1.png\"></p>\n<h1 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Plans\">ASUS DDE - Plans</a> )</p>\n<p>因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。</p>\n<p>這邊就是要回答的文字，應該翻叫「計畫」，「計畫」是將一組事件對應到一系列的動作。</p>\n<p>UtteranceToLaunchApp 是要開啟 APP 的 Plans</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled2.png\" alt=\"Untitled2.png\"></p>\n<h2 id=\"PlanID\"><a href=\"#PlanID\" class=\"headerlink\" title=\"PlanID\"></a>PlanID</h2><p>每個plan要有唯一id</p>\n<h2 id=\"Is-the-plan-able-to-launch-the-app\"><a href=\"#Is-the-plan-able-to-launch-the-app\" class=\"headerlink\" title=\"Is the plan able to launch the app?\"></a>Is the plan able to launch the app?</h2><ul>\n<li>true: 可以啟動App</li>\n<li>false: 不行</li>\n</ul>\n<h2 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h2><p>event的CSR是「語音辨識結果」</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Plans1.png\" alt=\"Plans1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Plans2.png\" alt=\"Plans2\"></p>\n<h1 id=\"Intents\"><a href=\"#Intents\" class=\"headerlink\" title=\"Intents\"></a>Intents</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Intents\">DDE Tutorial - Intents</a> )</p>\n<p>可以設定多種句型，應該翻叫「意圖」。</p>\n<p>因舊文件的說明較詳細，部分筆記有參考v1.1.3、v1.1.2。</p>\n<p>人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。 &lt;- 官方文件寫的</p>\n<blockquote>\n<p>BrandName = 品牌名，ex: 華碩</p>\n</blockquote>\n<blockquote>\n<p>VoiceTag(App Name) = APP名稱，ex: 長照</p>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled3.png\" alt=\"Untitled3.png\"></p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled4.png\" alt=\"Untitled4.png\"></p>\n<h1 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h1><p>撰寫這份筆記時，最新版文件是 <code>v1.1.4</code> 。( <a href=\"https://zenbo.asus.com/developer/documents/Overview/DDE-Tutorial/Basic-Concepts/Concepts\">DDE Tutorial - Concepts</a> )</p>\n<p>我會把他翻作「概念」，大概就是可以將很多同意詞群組起來的。在 Dialoflow 叫 Entities。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled5.png\" alt=\"Untitled5.png\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled6.png\" alt=\"Untitled6.png\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled7.png\" alt=\"Untitled07.png\"></p>\n<h2 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h2><p>選項有： <code>Class</code> 和 <code>Phrase</code><br>文件建議選 <code>Class</code> ，但未解釋<code>Phrase</code> 的用途。</p>\n<blockquote>\n<p>文件 v1.1.3 提到，若是使用class，所有的實例都要是類別；若使用phrase，所有實例都要是片語。</p>\n</blockquote>\n<h1 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h1><p>右上有publish按鈕</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled8.png\" alt=\"Untitled8.png\"></p>\n<h1 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h1><p>右方有輸入框可以測試</p>\n<p>要用Chrome!!</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B/Untitled9.png\" alt=\"Untitled9.png\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><h2 id=\"學習資源\"><a href=\"#學習資源\" class=\"headerlink\" title=\"學習資源\"></a>學習資源</h2><ul>\n<li><a href=\"https://sites.google.com/site/goofoo777/106_1-jiao-xue-ke-cheng/home-robot\">Home Robot / Zenbo (APP Builder / DDE Editor)</a></li>\n<li><a href=\"https://www.facebook.com/groups/zenbo.dev\">Zenbo機器人開發者社群</a></li>\n<li><a href=\"https://www.facebook.com/groups/zenbo.dev/permalink/1567101126726820\">分享_基於Zenbo語音的多機協作開發技術_ok</a></li>\n</ul>\n<h2 id=\"相關文獻\"><a href=\"#相關文獻\" class=\"headerlink\" title=\"相關文獻\"></a>相關文獻</h2><ul>\n<li><a href=\"https://www.books.com.tw/products/0010809325\">AI機器人、藍芽與Android整合開發技術</a><ul>\n<li>推這本書👍，裡面有介紹不同機器人間互動時程式設計的架構，還有 Zenbo SDK 的 Sample Code。可以寄信向作者高煥堂老師索取完整原始碼。</li>\n</ul>\n</li>\n<li><a href=\"https://www.csie.nuu.edu.tw/wp-content/uploads/2019/09/2018-%E7%8E%8B%E8%83%BD%E4%B8%AD-%E5%B0%88%E9%A1%8C.pdf\">智慧家庭陪伴系統 (專題)</a></li>\n<li><a href=\"https://hdl.handle.net/11296/x4x8c6\">銀髮族使用Zenbo機器人服務體驗洞察研究</a></li>\n<li><a href=\"https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282\">陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo為例</a></li>\n</ul>"},{"title":"[Zenbo開發系列] 05-DDE回覆規則設計","date":"2021-08-07T07:52:45.000Z","_content":"\n這篇會寫如何設計 DDE 語料庫，還有 DDE 設計的邏輯。\n終於來到第五篇，這次截圖比較多，主要是我如何設定，直接看圖比文字說明清楚。\n\n# 在 ASUS 平台註冊 APP\n有完成這個步驟才能呼叫「嘿，Zenbo，我要用 `App name`」\n<!--more-->\n首先需要先建立一個 Android 專案，要特別注意 Package name 等下會用到，所以請盡量取個不會跟別人重複的。\n\n> 習慣上 Package name 會用公司會學校或學校的 domian 相反過來。\n> 例如: google.com -> com.google\n\n再來你還需要一個 ASUS 帳號，就可以在 [Console](https://zenbo.asus.com/developer/console/) 註冊自己的 APP。\n依序輸入打 * 號的幾個欄位，送出後可以看到生成好的 App ID 和 App Key。APP ID 會在設定 DDE 專案的地方用到。\n\n![console_config](console_config.png)\n\n# 建立 DDE 專案\n從這邊 [DDE Editor](https://zenbo.asus.com/developer/tools/ds-editor.jsp) 建立一個新的 Project。\n\n## 設定專案資訊\n點選畫面上方的 info 設定\n![info](info.png)\n![project_info](project_info.png)\n\n- **DDE Domain ID**: 如果是第一次使用，需要先註冊 (Register) 一個 DDE Domain ID，創建好點選 All 可以看到你所有的 DDE Domain 和相應的 UUID。UUID 之後在 Zenbo 端會用到。這個欄位是下拉式選單，記得選擇剛註冊的 Domain 哦。\n- **Developer App ID**: 要選擇前面註冊好 Package name 的那組，下面的三個欄位會自動跟著填滿。\n  - 確定 Developer App ID(App ID)、Package Name(Package Name)、Brand(Brand Name)、App Name(App Name) 和上一步驟一樣\n- **Launch Activity**: 填寫你 APP 首頁 Activity 完整的 package 路徑。\n- 剩下都預設就好~\n\n## 設計 DDE 規則\n各個 Basic Contexts 的說明可以看我的上一篇文章 [[Zenbo開發系列] 04-DDE簡介](../../07/Zenbo開發系列-04-DDE簡介)\n\n### 流程\n因為我做的是一個 Q&A 的聊天機器人，我希望使用使用者可以一直問完一題再問下一題，但是 Zenbo 一般問題流程會比較像樹狀結構，一條路走到底就結束了，沒辦法接下一題。\n\n所以我後來借用 Plans 的 Input/Output Contexts 參數達到可以一題接一題的效果。流程大致如下圖。\n\n![flow](flow.jpg)\n\n### Concepts\n把同樣概念的詞，做成一個個 Concepts，我截幾個作範例。\n\n![concepts1](concepts1.png)\n![concepts2](concepts2.png)\n\n- Concept ID: 這個 Concepts 的名稱，可以用中文。\n- Instances: 先不用建，等下在 Concept 有用到的時候再加就好。\n\n### Intents\n舉出一個「意圖」所有可能的說法。例如說，我今天想申請長照，就可以有很多種說法，「我要申請長照」、「申請長照」、「我想申請長照」、「如何申請長照」、「申請長照的流程」，盡可能把各種你想得到、想不到的講法都寫上去。\n\n> 官方文件:\n> 人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。\n\n![Intents1](Intents1.png)\n![Intents2](Intents2.png)\n\n圖中可以看到詞分種 3 種顏色，藍色、橘色、淺橘，代表不同的用意\n\n- 藍色\n一定要出現的常數，而且一定要相同。像 applyLTC 的第一個例句中\"我\"，如果輸入的句子中是\"你\"，就比對不到，一定要是\"我\"。\n可以在這裡建立新的 Concept，或是加入一個原有的 Concept\n![Intents3](Intents3.png)\n![Intents4](Intents4.png)\n\n- 橘色\n和 Concept 綁定的詞。\n\n- 淺橘\n和橘色一樣，但是 optional 的，代表輸入的句子中可以有也可以沒有這個詞。\n![Intents5](Intents5.png)\n\n### Plans\n介紹幾個會用到的欄位:\n- Input Context/Output Contexts: 舉例，如果這個 Plan 的 Input Context 是 \"A\"，那他會接在其他 Output Context 是 \"A\" 的 Plan 後面\n- Events: 是指要綁定哪個 Intent\n- Actions\n  - Condition: 可以設定一些條件，例如: 早上/晚上要說什麼? 晴天/雨天要說什麼?\n  - Task Type: Zenbo 要回應什麼內容。如果有多個 Task Type，會照順序唸，而不是隨機挑一個唸哦!\n    - 第二個欄位可以選擇 `Text` 或 `Reference`。Text 直接寫要回覆的內容。Reference 可對應到 TTS ID。\n\n首先，預設的這個 Plan `ThisPlanLaunchingThisApp`，在 Output Context 的地方填 `needAnyHelp`，再讓其他每一個 Plan 的 Input/Output Context 也都填 `needAnyHelp`，對話可以就能像這個流程圖一樣，一直迴圈。\n\n![input_output_contexts](input_output_contexts.jpg)\n> 圓角方形:\n> ```\n> Intent ID/Plan ID\n>   Intent 句子 \n> ```\n\n![Plans1](Plans1.png)\n![Plans2](Plans2.png)\n\n#### Graph\nDDE Editor 提供了方便的視覺化工具，可以查看 Plan 之間的關聯。\n\n![plan_graph](plan_graph.png)\n\n### TTS\n若有會重複使用的句子，可以寫到 TTS 重複利用哦。我只有一個 TTS，給大家參考。\n\n![TTS](TTS.png)\n\n# 發布 DDE\n先 Publish 再 Deploy To Download Server，Zenbo 端才能下載。之後 DDE 還有修改的話，記得要再 Publish 和 Deploy 一次唷。\n\n![publish](publish.png)\n\n# Tests\n基本上，上面的步驟做完就設定好了，接下來測試一下吧!\n右側的 Tests 區，可以測試剛剛設計的流程。要開始這個對話流程，需要使用 UtteranceToLanuchApp Intent 的句子。\n\n所以要先用「我要用靜宜大學長照機器人」，下一句才能用「我要申請長照」。\n選 All domains 或 Specified domains 都可以。\n\n![Test1](Test1.png)\n![Test2](Test2.png)","source":"_posts/Zenbo開發系列-05-DDE回覆規則設計.md","raw":"---\ntitle: '[Zenbo開發系列] 05-DDE回覆規則設計'\ndate: 2021-08-07 15:52:45\ntags:\n- Zenbo\n- DDE\n- 13th鐵人賽\n---\n\n這篇會寫如何設計 DDE 語料庫，還有 DDE 設計的邏輯。\n終於來到第五篇，這次截圖比較多，主要是我如何設定，直接看圖比文字說明清楚。\n\n# 在 ASUS 平台註冊 APP\n有完成這個步驟才能呼叫「嘿，Zenbo，我要用 `App name`」\n<!--more-->\n首先需要先建立一個 Android 專案，要特別注意 Package name 等下會用到，所以請盡量取個不會跟別人重複的。\n\n> 習慣上 Package name 會用公司會學校或學校的 domian 相反過來。\n> 例如: google.com -> com.google\n\n再來你還需要一個 ASUS 帳號，就可以在 [Console](https://zenbo.asus.com/developer/console/) 註冊自己的 APP。\n依序輸入打 * 號的幾個欄位，送出後可以看到生成好的 App ID 和 App Key。APP ID 會在設定 DDE 專案的地方用到。\n\n![console_config](console_config.png)\n\n# 建立 DDE 專案\n從這邊 [DDE Editor](https://zenbo.asus.com/developer/tools/ds-editor.jsp) 建立一個新的 Project。\n\n## 設定專案資訊\n點選畫面上方的 info 設定\n![info](info.png)\n![project_info](project_info.png)\n\n- **DDE Domain ID**: 如果是第一次使用，需要先註冊 (Register) 一個 DDE Domain ID，創建好點選 All 可以看到你所有的 DDE Domain 和相應的 UUID。UUID 之後在 Zenbo 端會用到。這個欄位是下拉式選單，記得選擇剛註冊的 Domain 哦。\n- **Developer App ID**: 要選擇前面註冊好 Package name 的那組，下面的三個欄位會自動跟著填滿。\n  - 確定 Developer App ID(App ID)、Package Name(Package Name)、Brand(Brand Name)、App Name(App Name) 和上一步驟一樣\n- **Launch Activity**: 填寫你 APP 首頁 Activity 完整的 package 路徑。\n- 剩下都預設就好~\n\n## 設計 DDE 規則\n各個 Basic Contexts 的說明可以看我的上一篇文章 [[Zenbo開發系列] 04-DDE簡介](../../07/Zenbo開發系列-04-DDE簡介)\n\n### 流程\n因為我做的是一個 Q&A 的聊天機器人，我希望使用使用者可以一直問完一題再問下一題，但是 Zenbo 一般問題流程會比較像樹狀結構，一條路走到底就結束了，沒辦法接下一題。\n\n所以我後來借用 Plans 的 Input/Output Contexts 參數達到可以一題接一題的效果。流程大致如下圖。\n\n![flow](flow.jpg)\n\n### Concepts\n把同樣概念的詞，做成一個個 Concepts，我截幾個作範例。\n\n![concepts1](concepts1.png)\n![concepts2](concepts2.png)\n\n- Concept ID: 這個 Concepts 的名稱，可以用中文。\n- Instances: 先不用建，等下在 Concept 有用到的時候再加就好。\n\n### Intents\n舉出一個「意圖」所有可能的說法。例如說，我今天想申請長照，就可以有很多種說法，「我要申請長照」、「申請長照」、「我想申請長照」、「如何申請長照」、「申請長照的流程」，盡可能把各種你想得到、想不到的講法都寫上去。\n\n> 官方文件:\n> 人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。\n\n![Intents1](Intents1.png)\n![Intents2](Intents2.png)\n\n圖中可以看到詞分種 3 種顏色，藍色、橘色、淺橘，代表不同的用意\n\n- 藍色\n一定要出現的常數，而且一定要相同。像 applyLTC 的第一個例句中\"我\"，如果輸入的句子中是\"你\"，就比對不到，一定要是\"我\"。\n可以在這裡建立新的 Concept，或是加入一個原有的 Concept\n![Intents3](Intents3.png)\n![Intents4](Intents4.png)\n\n- 橘色\n和 Concept 綁定的詞。\n\n- 淺橘\n和橘色一樣，但是 optional 的，代表輸入的句子中可以有也可以沒有這個詞。\n![Intents5](Intents5.png)\n\n### Plans\n介紹幾個會用到的欄位:\n- Input Context/Output Contexts: 舉例，如果這個 Plan 的 Input Context 是 \"A\"，那他會接在其他 Output Context 是 \"A\" 的 Plan 後面\n- Events: 是指要綁定哪個 Intent\n- Actions\n  - Condition: 可以設定一些條件，例如: 早上/晚上要說什麼? 晴天/雨天要說什麼?\n  - Task Type: Zenbo 要回應什麼內容。如果有多個 Task Type，會照順序唸，而不是隨機挑一個唸哦!\n    - 第二個欄位可以選擇 `Text` 或 `Reference`。Text 直接寫要回覆的內容。Reference 可對應到 TTS ID。\n\n首先，預設的這個 Plan `ThisPlanLaunchingThisApp`，在 Output Context 的地方填 `needAnyHelp`，再讓其他每一個 Plan 的 Input/Output Context 也都填 `needAnyHelp`，對話可以就能像這個流程圖一樣，一直迴圈。\n\n![input_output_contexts](input_output_contexts.jpg)\n> 圓角方形:\n> ```\n> Intent ID/Plan ID\n>   Intent 句子 \n> ```\n\n![Plans1](Plans1.png)\n![Plans2](Plans2.png)\n\n#### Graph\nDDE Editor 提供了方便的視覺化工具，可以查看 Plan 之間的關聯。\n\n![plan_graph](plan_graph.png)\n\n### TTS\n若有會重複使用的句子，可以寫到 TTS 重複利用哦。我只有一個 TTS，給大家參考。\n\n![TTS](TTS.png)\n\n# 發布 DDE\n先 Publish 再 Deploy To Download Server，Zenbo 端才能下載。之後 DDE 還有修改的話，記得要再 Publish 和 Deploy 一次唷。\n\n![publish](publish.png)\n\n# Tests\n基本上，上面的步驟做完就設定好了，接下來測試一下吧!\n右側的 Tests 區，可以測試剛剛設計的流程。要開始這個對話流程，需要使用 UtteranceToLanuchApp Intent 的句子。\n\n所以要先用「我要用靜宜大學長照機器人」，下一句才能用「我要申請長照」。\n選 All domains 或 Specified domains 都可以。\n\n![Test1](Test1.png)\n![Test2](Test2.png)","slug":"Zenbo開發系列-05-DDE回覆規則設計","published":1,"updated":"2024-02-24T08:06:01.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myif000yk0jf3x699y91","content":"<p>這篇會寫如何設計 DDE 語料庫，還有 DDE 設計的邏輯。<br>終於來到第五篇，這次截圖比較多，主要是我如何設定，直接看圖比文字說明清楚。</p>\n<h1 id=\"在-ASUS-平台註冊-APP\"><a href=\"#在-ASUS-平台註冊-APP\" class=\"headerlink\" title=\"在 ASUS 平台註冊 APP\"></a>在 ASUS 平台註冊 APP</h1><p>有完成這個步驟才能呼叫「嘿，Zenbo，我要用 <code>App name</code>」</p>\n<span id=\"more\"></span>\n<p>首先需要先建立一個 Android 專案，要特別注意 Package name 等下會用到，所以請盡量取個不會跟別人重複的。</p>\n<blockquote>\n<p>習慣上 Package name 會用公司會學校或學校的 domian 相反過來。<br>例如: google.com -&gt; com.google</p>\n</blockquote>\n<p>再來你還需要一個 ASUS 帳號，就可以在 <a href=\"https://zenbo.asus.com/developer/console/\">Console</a> 註冊自己的 APP。<br>依序輸入打 * 號的幾個欄位，送出後可以看到生成好的 App ID 和 App Key。APP ID 會在設定 DDE 專案的地方用到。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/console_config.png\" alt=\"console_config\"></p>\n<h1 id=\"建立-DDE-專案\"><a href=\"#建立-DDE-專案\" class=\"headerlink\" title=\"建立 DDE 專案\"></a>建立 DDE 專案</h1><p>從這邊 <a href=\"https://zenbo.asus.com/developer/tools/ds-editor.jsp\">DDE Editor</a> 建立一個新的 Project。</p>\n<h2 id=\"設定專案資訊\"><a href=\"#設定專案資訊\" class=\"headerlink\" title=\"設定專案資訊\"></a>設定專案資訊</h2><p>點選畫面上方的 info 設定<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/info.png\" alt=\"info\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/project_info.png\" alt=\"project_info\"></p>\n<ul>\n<li><strong>DDE Domain ID</strong>: 如果是第一次使用，需要先註冊 (Register) 一個 DDE Domain ID，創建好點選 All 可以看到你所有的 DDE Domain 和相應的 UUID。UUID 之後在 Zenbo 端會用到。這個欄位是下拉式選單，記得選擇剛註冊的 Domain 哦。</li>\n<li><strong>Developer App ID</strong>: 要選擇前面註冊好 Package name 的那組，下面的三個欄位會自動跟著填滿。<ul>\n<li>確定 Developer App ID(App ID)、Package Name(Package Name)、Brand(Brand Name)、App Name(App Name) 和上一步驟一樣</li>\n</ul>\n</li>\n<li><strong>Launch Activity</strong>: 填寫你 APP 首頁 Activity 完整的 package 路徑。</li>\n<li>剩下都預設就好~</li>\n</ul>\n<h2 id=\"設計-DDE-規則\"><a href=\"#設計-DDE-規則\" class=\"headerlink\" title=\"設計 DDE 規則\"></a>設計 DDE 規則</h2><p>各個 Basic Contexts 的說明可以看我的上一篇文章 <a href=\"../../07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B\">[Zenbo開發系列] 04-DDE簡介</a></p>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>因為我做的是一個 Q&amp;A 的聊天機器人，我希望使用使用者可以一直問完一題再問下一題，但是 Zenbo 一般問題流程會比較像樹狀結構，一條路走到底就結束了，沒辦法接下一題。</p>\n<p>所以我後來借用 Plans 的 Input/Output Contexts 參數達到可以一題接一題的效果。流程大致如下圖。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/flow.jpg\" alt=\"flow\"></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>把同樣概念的詞，做成一個個 Concepts，我截幾個作範例。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/concepts1.png\" alt=\"concepts1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/concepts2.png\" alt=\"concepts2\"></p>\n<ul>\n<li>Concept ID: 這個 Concepts 的名稱，可以用中文。</li>\n<li>Instances: 先不用建，等下在 Concept 有用到的時候再加就好。</li>\n</ul>\n<h3 id=\"Intents\"><a href=\"#Intents\" class=\"headerlink\" title=\"Intents\"></a>Intents</h3><p>舉出一個「意圖」所有可能的說法。例如說，我今天想申請長照，就可以有很多種說法，「我要申請長照」、「申請長照」、「我想申請長照」、「如何申請長照」、「申請長照的流程」，盡可能把各種你想得到、想不到的講法都寫上去。</p>\n<blockquote>\n<p>官方文件:<br>人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。</p>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents1.png\" alt=\"Intents1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents2.png\" alt=\"Intents2\"></p>\n<p>圖中可以看到詞分種 3 種顏色，藍色、橘色、淺橘，代表不同的用意</p>\n<ul>\n<li><p>藍色<br>一定要出現的常數，而且一定要相同。像 applyLTC 的第一個例句中”我”，如果輸入的句子中是”你”，就比對不到，一定要是”我”。<br>可以在這裡建立新的 Concept，或是加入一個原有的 Concept<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents3.png\" alt=\"Intents3\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents4.png\" alt=\"Intents4\"></p>\n</li>\n<li><p>橘色<br>和 Concept 綁定的詞。</p>\n</li>\n<li><p>淺橘<br>和橘色一樣，但是 optional 的，代表輸入的句子中可以有也可以沒有這個詞。<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents5.png\" alt=\"Intents5\"></p>\n</li>\n</ul>\n<h3 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h3><p>介紹幾個會用到的欄位:</p>\n<ul>\n<li>Input Context/Output Contexts: 舉例，如果這個 Plan 的 Input Context 是 “A”，那他會接在其他 Output Context 是 “A” 的 Plan 後面</li>\n<li>Events: 是指要綁定哪個 Intent</li>\n<li>Actions<ul>\n<li>Condition: 可以設定一些條件，例如: 早上/晚上要說什麼? 晴天/雨天要說什麼?</li>\n<li>Task Type: Zenbo 要回應什麼內容。如果有多個 Task Type，會照順序唸，而不是隨機挑一個唸哦!<ul>\n<li>第二個欄位可以選擇 <code>Text</code> 或 <code>Reference</code>。Text 直接寫要回覆的內容。Reference 可對應到 TTS ID。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>首先，預設的這個 Plan <code>ThisPlanLaunchingThisApp</code>，在 Output Context 的地方填 <code>needAnyHelp</code>，再讓其他每一個 Plan 的 Input/Output Context 也都填 <code>needAnyHelp</code>，對話可以就能像這個流程圖一樣，一直迴圈。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/input_output_contexts.jpg\" alt=\"input_output_contexts\"></p>\n<blockquote>\n<p>圓角方形:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent ID&#x2F;Plan ID</span><br><span class=\"line\">  Intent 句子 </span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Plans1.png\" alt=\"Plans1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Plans2.png\" alt=\"Plans2\"></p>\n<h4 id=\"Graph\"><a href=\"#Graph\" class=\"headerlink\" title=\"Graph\"></a>Graph</h4><p>DDE Editor 提供了方便的視覺化工具，可以查看 Plan 之間的關聯。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/plan_graph.png\" alt=\"plan_graph\"></p>\n<h3 id=\"TTS\"><a href=\"#TTS\" class=\"headerlink\" title=\"TTS\"></a>TTS</h3><p>若有會重複使用的句子，可以寫到 TTS 重複利用哦。我只有一個 TTS，給大家參考。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/TTS.png\" alt=\"TTS\"></p>\n<h1 id=\"發布-DDE\"><a href=\"#發布-DDE\" class=\"headerlink\" title=\"發布 DDE\"></a>發布 DDE</h1><p>先 Publish 再 Deploy To Download Server，Zenbo 端才能下載。之後 DDE 還有修改的話，記得要再 Publish 和 Deploy 一次唷。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/publish.png\" alt=\"publish\"></p>\n<h1 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h1><p>基本上，上面的步驟做完就設定好了，接下來測試一下吧!<br>右側的 Tests 區，可以測試剛剛設計的流程。要開始這個對話流程，需要使用 UtteranceToLanuchApp Intent 的句子。</p>\n<p>所以要先用「我要用靜宜大學長照機器人」，下一句才能用「我要申請長照」。<br>選 All domains 或 Specified domains 都可以。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Test1.png\" alt=\"Test1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Test2.png\" alt=\"Test2\"></p>\n","site":{"data":{}},"excerpt":"<p>這篇會寫如何設計 DDE 語料庫，還有 DDE 設計的邏輯。<br>終於來到第五篇，這次截圖比較多，主要是我如何設定，直接看圖比文字說明清楚。</p>\n<h1 id=\"在-ASUS-平台註冊-APP\"><a href=\"#在-ASUS-平台註冊-APP\" class=\"headerlink\" title=\"在 ASUS 平台註冊 APP\"></a>在 ASUS 平台註冊 APP</h1><p>有完成這個步驟才能呼叫「嘿，Zenbo，我要用 <code>App name</code>」</p>","more":"<p>首先需要先建立一個 Android 專案，要特別注意 Package name 等下會用到，所以請盡量取個不會跟別人重複的。</p>\n<blockquote>\n<p>習慣上 Package name 會用公司會學校或學校的 domian 相反過來。<br>例如: google.com -&gt; com.google</p>\n</blockquote>\n<p>再來你還需要一個 ASUS 帳號，就可以在 <a href=\"https://zenbo.asus.com/developer/console/\">Console</a> 註冊自己的 APP。<br>依序輸入打 * 號的幾個欄位，送出後可以看到生成好的 App ID 和 App Key。APP ID 會在設定 DDE 專案的地方用到。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/console_config.png\" alt=\"console_config\"></p>\n<h1 id=\"建立-DDE-專案\"><a href=\"#建立-DDE-專案\" class=\"headerlink\" title=\"建立 DDE 專案\"></a>建立 DDE 專案</h1><p>從這邊 <a href=\"https://zenbo.asus.com/developer/tools/ds-editor.jsp\">DDE Editor</a> 建立一個新的 Project。</p>\n<h2 id=\"設定專案資訊\"><a href=\"#設定專案資訊\" class=\"headerlink\" title=\"設定專案資訊\"></a>設定專案資訊</h2><p>點選畫面上方的 info 設定<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/info.png\" alt=\"info\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/project_info.png\" alt=\"project_info\"></p>\n<ul>\n<li><strong>DDE Domain ID</strong>: 如果是第一次使用，需要先註冊 (Register) 一個 DDE Domain ID，創建好點選 All 可以看到你所有的 DDE Domain 和相應的 UUID。UUID 之後在 Zenbo 端會用到。這個欄位是下拉式選單，記得選擇剛註冊的 Domain 哦。</li>\n<li><strong>Developer App ID</strong>: 要選擇前面註冊好 Package name 的那組，下面的三個欄位會自動跟著填滿。<ul>\n<li>確定 Developer App ID(App ID)、Package Name(Package Name)、Brand(Brand Name)、App Name(App Name) 和上一步驟一樣</li>\n</ul>\n</li>\n<li><strong>Launch Activity</strong>: 填寫你 APP 首頁 Activity 完整的 package 路徑。</li>\n<li>剩下都預設就好~</li>\n</ul>\n<h2 id=\"設計-DDE-規則\"><a href=\"#設計-DDE-規則\" class=\"headerlink\" title=\"設計 DDE 規則\"></a>設計 DDE 規則</h2><p>各個 Basic Contexts 的說明可以看我的上一篇文章 <a href=\"../../07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-04-DDE%E7%B0%A1%E4%BB%8B\">[Zenbo開發系列] 04-DDE簡介</a></p>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>因為我做的是一個 Q&amp;A 的聊天機器人，我希望使用使用者可以一直問完一題再問下一題，但是 Zenbo 一般問題流程會比較像樹狀結構，一條路走到底就結束了，沒辦法接下一題。</p>\n<p>所以我後來借用 Plans 的 Input/Output Contexts 參數達到可以一題接一題的效果。流程大致如下圖。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/flow.jpg\" alt=\"flow\"></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>把同樣概念的詞，做成一個個 Concepts，我截幾個作範例。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/concepts1.png\" alt=\"concepts1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/concepts2.png\" alt=\"concepts2\"></p>\n<ul>\n<li>Concept ID: 這個 Concepts 的名稱，可以用中文。</li>\n<li>Instances: 先不用建，等下在 Concept 有用到的時候再加就好。</li>\n</ul>\n<h3 id=\"Intents\"><a href=\"#Intents\" class=\"headerlink\" title=\"Intents\"></a>Intents</h3><p>舉出一個「意圖」所有可能的說法。例如說，我今天想申請長照，就可以有很多種說法，「我要申請長照」、「申請長照」、「我想申請長照」、「如何申請長照」、「申請長照的流程」，盡可能把各種你想得到、想不到的講法都寫上去。</p>\n<blockquote>\n<p>官方文件:<br>人們可能使用不同句子來表達自己的意圖，因此開發人員有責任枚舉所有可能的句子。</p>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents1.png\" alt=\"Intents1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents2.png\" alt=\"Intents2\"></p>\n<p>圖中可以看到詞分種 3 種顏色，藍色、橘色、淺橘，代表不同的用意</p>\n<ul>\n<li><p>藍色<br>一定要出現的常數，而且一定要相同。像 applyLTC 的第一個例句中”我”，如果輸入的句子中是”你”，就比對不到，一定要是”我”。<br>可以在這裡建立新的 Concept，或是加入一個原有的 Concept<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents3.png\" alt=\"Intents3\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents4.png\" alt=\"Intents4\"></p>\n</li>\n<li><p>橘色<br>和 Concept 綁定的詞。</p>\n</li>\n<li><p>淺橘<br>和橘色一樣，但是 optional 的，代表輸入的句子中可以有也可以沒有這個詞。<br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Intents5.png\" alt=\"Intents5\"></p>\n</li>\n</ul>\n<h3 id=\"Plans\"><a href=\"#Plans\" class=\"headerlink\" title=\"Plans\"></a>Plans</h3><p>介紹幾個會用到的欄位:</p>\n<ul>\n<li>Input Context/Output Contexts: 舉例，如果這個 Plan 的 Input Context 是 “A”，那他會接在其他 Output Context 是 “A” 的 Plan 後面</li>\n<li>Events: 是指要綁定哪個 Intent</li>\n<li>Actions<ul>\n<li>Condition: 可以設定一些條件，例如: 早上/晚上要說什麼? 晴天/雨天要說什麼?</li>\n<li>Task Type: Zenbo 要回應什麼內容。如果有多個 Task Type，會照順序唸，而不是隨機挑一個唸哦!<ul>\n<li>第二個欄位可以選擇 <code>Text</code> 或 <code>Reference</code>。Text 直接寫要回覆的內容。Reference 可對應到 TTS ID。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>首先，預設的這個 Plan <code>ThisPlanLaunchingThisApp</code>，在 Output Context 的地方填 <code>needAnyHelp</code>，再讓其他每一個 Plan 的 Input/Output Context 也都填 <code>needAnyHelp</code>，對話可以就能像這個流程圖一樣，一直迴圈。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/input_output_contexts.jpg\" alt=\"input_output_contexts\"></p>\n<blockquote>\n<p>圓角方形:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent ID&#x2F;Plan ID</span><br><span class=\"line\">  Intent 句子 </span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Plans1.png\" alt=\"Plans1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Plans2.png\" alt=\"Plans2\"></p>\n<h4 id=\"Graph\"><a href=\"#Graph\" class=\"headerlink\" title=\"Graph\"></a>Graph</h4><p>DDE Editor 提供了方便的視覺化工具，可以查看 Plan 之間的關聯。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/plan_graph.png\" alt=\"plan_graph\"></p>\n<h3 id=\"TTS\"><a href=\"#TTS\" class=\"headerlink\" title=\"TTS\"></a>TTS</h3><p>若有會重複使用的句子，可以寫到 TTS 重複利用哦。我只有一個 TTS，給大家參考。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/TTS.png\" alt=\"TTS\"></p>\n<h1 id=\"發布-DDE\"><a href=\"#發布-DDE\" class=\"headerlink\" title=\"發布 DDE\"></a>發布 DDE</h1><p>先 Publish 再 Deploy To Download Server，Zenbo 端才能下載。之後 DDE 還有修改的話，記得要再 Publish 和 Deploy 一次唷。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/publish.png\" alt=\"publish\"></p>\n<h1 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h1><p>基本上，上面的步驟做完就設定好了，接下來測試一下吧!<br>右側的 Tests 區，可以測試剛剛設計的流程。要開始這個對話流程，需要使用 UtteranceToLanuchApp Intent 的句子。</p>\n<p>所以要先用「我要用靜宜大學長照機器人」，下一句才能用「我要申請長照」。<br>選 All domains 或 Specified domains 都可以。</p>\n<p><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Test1.png\" alt=\"Test1\"><br><img src=\"/2021/08/07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88/Test2.png\" alt=\"Test2\"></p>"},{"title":"[Zenbo開發系列] 06-安裝DDE語料到Zenbo","date":"2021-08-10T06:10:39.000Z","_content":"\n今天使用的範例出自高煥堂老師的書《AI機器人、藍芽與Android整合開發技術》，需要完整程式碼請參考書中內容喔。\n本篇會以 `Ex14-01-ZenboWiFi` 這份程式碼說明如何將語料安裝到 Zenob 中。\n\n<!-- more -->\n\n# 準備材料\n\n你需要\n- 一台 Zenbo\n- 一份做好的 DDE 語料 (製作方式請參考[上一篇](../../07/Zenbo開發系列-05-DDE回覆規則設計))\n- 一份 `Ex14-01-ZenboWiFi` Sample code\n\n在 DDE info 設定的地方，Launch Activity 要填 APP 啟動的第一個 Activity，完整路徑可以看 Manifest。\n![project_info](project_info.png)\n![launch_activity](launch_activity.png)\n\n# 綁定 Domain\n\n還記得你的 Domain UUID 嗎?\n在 DDE info 最上面 點選 `All` 可以查看你所有的 uuid。\n![all_uuid](all_uuid.png)\n\n打開 Android 專案，範例中基本都已經打好了，我們只須把自己的 Domain 換上去。\n特別注意，總共有 3 個地方要改唷\n- Manifest 2 個\n- ZenboWiFiActivity 1 個\n\n![manifest_uuid](manifest_uuid.png)\n![activity_uuid](activity_uuid.png)\n\n第一次安裝，開啟時應該會自動更新語料。\n去 DS Tools 確認是否有更新成功\n\n> DS Tools 可以在 [DDE Tutorial-Links](https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Downloads/Links) 找到下載連結。\n> 把 APK 裝到 Zenbo 的方法很多，用隨身碟或雲端硬碟都行。\n\n# DS Tools\n可以管理自己安裝在 Zenbo 上的語料庫。\n如果剛才 DDE 有安裝成功的話，這裡點選 `Show APP List` 會看到 Package name、UUID 和 更新時間。確認一下 PKG 和 UUID 是不是都符合前面的設定。\n以後如果要更新 DDE 的話，可以先點選要更新的 APP，讓 UUID 自動帶到上方欄位，再按 `Update by ID`。\n![dstools](dstools.png)\n\n# 刪除 Zenbo 中的 DDE\n\n這就是我前幾篇提到，我寫信給客服信箱的問題了。我前面不知道怎麼弄的，PKG 和 UUID 一直對不上，所以沒辦法更新。客服請我先把裝壞的 DS 資料清掉，這邊紀錄一下作法。\n\n1. 先把裝壞的 APP 刪除: 設定 > 應用程式 > [你的APP] > 儲存空間 > 清除資料\n2. 把 APP 刪掉\n3. 參考 [Zenbo-Scratch-語句聽不懂問題的解決方式](Zenbo-Scratch-語句聽不懂問題的解決方式.pdf)  將 LocalDS 的資料清除\n   - 這篇就是客服寄給我的\n4. Zenbo 關機重開\n5. DDE 重新 Publish、Deploy to Download Server\n6. APP 重裝\n7. 去 ASUS Update Tools 確認\n\n# 成果\n我有改過 `Ex14-01-ZenboWiFi` 的畫面和部份的 code 成品大概像影片這樣。\n\n{% youtube zWkc5L9Ux5o %}\n\n## DDE 的問題\n截自我的論文:\n> 根據文獻（朱祐萱，2019；白麗等，2018），Zenbo 的語音識別功能，不能清楚辨識指令，是其主要問題。再加上本研究嘗試使用 Zenbo SDK 實作語音回答時，發現 Zenbo 無法處理破音字的發音。例如，「長照」正確唸法是「長（ㄔㄤˊ）照」，但 Zenbo SDK 會唸作「長（ㄓㄤˇ）照」。有時也會跳過句子中的某些字，例如，「台中市政府長期照顧管理中心」的「長」、「原住民」的「民」。\n>\n> 經過嘗試，最後本研究決定在 APP 中，使用 Android 官方提供的兩個函式庫「android.speech.RecognizerIntent」（以下簡稱 RecognizerIntent）與「android.speech.tts.TextToSpeech」（以下簡稱 TextToSpeech）。根據官方文件 RecognizerIntent（Android Developers, 2021）可以透過 Intent（意圖）啟動語音辨識；TextToSpeech（Android Developers, 2021）可以從文本合成出語音後，立即播放或儲存成音檔。\n>\n> 為了解決 Zenbo 反應遲鈍，我們在 APP 中提供按鈕，按下按鈕便會觸發 RecognizerIntent 開始聆聽使用者的問題，並將問句顯示在畫面上，使用者可以確認語音輸入的結果是否正確再點選送出（請參考  Youtube  影片：[語音識別與輸出（使用 RecognizerIntent 和 TextToSpeech）](https://youtu.be/iSneVFi9J0I)）。\n\n這就是我最後沒有使用 DDE 和 Zenbo SDK 的原因。\n\n# 參考資料\n- Android Developers. (2021). TextToSpeech. Retrieved from https://developer.android.com/reference/android/speech/tts/TextToSpeech\n- Android Developers. (2021). RecognizerIntent. Retrieved from https://developer.android.com/reference/android/speech/RecognizerIntent\n- 白麗、鄭家凱、林恩如、陳思宇、張譯云、徐業良、華碩電腦智慧機器人產品企劃團隊（2018）。 陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo 為例。福祉科技與服務管理學刊，6(3)，265-282。DOI：10.6283/JOCSG.201809_6(3).265。檢自：https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282。\n- 朱祐萱（2019）。銀髮族使用 Zenbo 機器人服務體驗洞察研究。南開科技大學福祉科技與服務管理所碩士論文，南投縣。檢自：https://hdl.handle.net/11296/x4x8c6。\n","source":"_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo.md","raw":"---\ntitle: '[Zenbo開發系列] 06-安裝DDE語料到Zenbo'\ndate: 2021-08-10 14:10:39\ntags:\n- Zenbo\n- DDE\n- 13th鐵人賽\n---\n\n今天使用的範例出自高煥堂老師的書《AI機器人、藍芽與Android整合開發技術》，需要完整程式碼請參考書中內容喔。\n本篇會以 `Ex14-01-ZenboWiFi` 這份程式碼說明如何將語料安裝到 Zenob 中。\n\n<!-- more -->\n\n# 準備材料\n\n你需要\n- 一台 Zenbo\n- 一份做好的 DDE 語料 (製作方式請參考[上一篇](../../07/Zenbo開發系列-05-DDE回覆規則設計))\n- 一份 `Ex14-01-ZenboWiFi` Sample code\n\n在 DDE info 設定的地方，Launch Activity 要填 APP 啟動的第一個 Activity，完整路徑可以看 Manifest。\n![project_info](project_info.png)\n![launch_activity](launch_activity.png)\n\n# 綁定 Domain\n\n還記得你的 Domain UUID 嗎?\n在 DDE info 最上面 點選 `All` 可以查看你所有的 uuid。\n![all_uuid](all_uuid.png)\n\n打開 Android 專案，範例中基本都已經打好了，我們只須把自己的 Domain 換上去。\n特別注意，總共有 3 個地方要改唷\n- Manifest 2 個\n- ZenboWiFiActivity 1 個\n\n![manifest_uuid](manifest_uuid.png)\n![activity_uuid](activity_uuid.png)\n\n第一次安裝，開啟時應該會自動更新語料。\n去 DS Tools 確認是否有更新成功\n\n> DS Tools 可以在 [DDE Tutorial-Links](https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Downloads/Links) 找到下載連結。\n> 把 APK 裝到 Zenbo 的方法很多，用隨身碟或雲端硬碟都行。\n\n# DS Tools\n可以管理自己安裝在 Zenbo 上的語料庫。\n如果剛才 DDE 有安裝成功的話，這裡點選 `Show APP List` 會看到 Package name、UUID 和 更新時間。確認一下 PKG 和 UUID 是不是都符合前面的設定。\n以後如果要更新 DDE 的話，可以先點選要更新的 APP，讓 UUID 自動帶到上方欄位，再按 `Update by ID`。\n![dstools](dstools.png)\n\n# 刪除 Zenbo 中的 DDE\n\n這就是我前幾篇提到，我寫信給客服信箱的問題了。我前面不知道怎麼弄的，PKG 和 UUID 一直對不上，所以沒辦法更新。客服請我先把裝壞的 DS 資料清掉，這邊紀錄一下作法。\n\n1. 先把裝壞的 APP 刪除: 設定 > 應用程式 > [你的APP] > 儲存空間 > 清除資料\n2. 把 APP 刪掉\n3. 參考 [Zenbo-Scratch-語句聽不懂問題的解決方式](Zenbo-Scratch-語句聽不懂問題的解決方式.pdf)  將 LocalDS 的資料清除\n   - 這篇就是客服寄給我的\n4. Zenbo 關機重開\n5. DDE 重新 Publish、Deploy to Download Server\n6. APP 重裝\n7. 去 ASUS Update Tools 確認\n\n# 成果\n我有改過 `Ex14-01-ZenboWiFi` 的畫面和部份的 code 成品大概像影片這樣。\n\n{% youtube zWkc5L9Ux5o %}\n\n## DDE 的問題\n截自我的論文:\n> 根據文獻（朱祐萱，2019；白麗等，2018），Zenbo 的語音識別功能，不能清楚辨識指令，是其主要問題。再加上本研究嘗試使用 Zenbo SDK 實作語音回答時，發現 Zenbo 無法處理破音字的發音。例如，「長照」正確唸法是「長（ㄔㄤˊ）照」，但 Zenbo SDK 會唸作「長（ㄓㄤˇ）照」。有時也會跳過句子中的某些字，例如，「台中市政府長期照顧管理中心」的「長」、「原住民」的「民」。\n>\n> 經過嘗試，最後本研究決定在 APP 中，使用 Android 官方提供的兩個函式庫「android.speech.RecognizerIntent」（以下簡稱 RecognizerIntent）與「android.speech.tts.TextToSpeech」（以下簡稱 TextToSpeech）。根據官方文件 RecognizerIntent（Android Developers, 2021）可以透過 Intent（意圖）啟動語音辨識；TextToSpeech（Android Developers, 2021）可以從文本合成出語音後，立即播放或儲存成音檔。\n>\n> 為了解決 Zenbo 反應遲鈍，我們在 APP 中提供按鈕，按下按鈕便會觸發 RecognizerIntent 開始聆聽使用者的問題，並將問句顯示在畫面上，使用者可以確認語音輸入的結果是否正確再點選送出（請參考  Youtube  影片：[語音識別與輸出（使用 RecognizerIntent 和 TextToSpeech）](https://youtu.be/iSneVFi9J0I)）。\n\n這就是我最後沒有使用 DDE 和 Zenbo SDK 的原因。\n\n# 參考資料\n- Android Developers. (2021). TextToSpeech. Retrieved from https://developer.android.com/reference/android/speech/tts/TextToSpeech\n- Android Developers. (2021). RecognizerIntent. Retrieved from https://developer.android.com/reference/android/speech/RecognizerIntent\n- 白麗、鄭家凱、林恩如、陳思宇、張譯云、徐業良、華碩電腦智慧機器人產品企劃團隊（2018）。 陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo 為例。福祉科技與服務管理學刊，6(3)，265-282。DOI：10.6283/JOCSG.201809_6(3).265。檢自：https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282。\n- 朱祐萱（2019）。銀髮族使用 Zenbo 機器人服務體驗洞察研究。南開科技大學福祉科技與服務管理所碩士論文，南投縣。檢自：https://hdl.handle.net/11296/x4x8c6。\n","slug":"Zenbo開發系列-06-安裝DDE語料到Zenbo","published":1,"updated":"2024-02-24T08:06:01.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myig0010k0jfapn2b5pr","content":"<p>今天使用的範例出自高煥堂老師的書《AI機器人、藍芽與Android整合開發技術》，需要完整程式碼請參考書中內容喔。<br>本篇會以 <code>Ex14-01-ZenboWiFi</code> 這份程式碼說明如何將語料安裝到 Zenob 中。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"準備材料\"><a href=\"#準備材料\" class=\"headerlink\" title=\"準備材料\"></a>準備材料</h1><p>你需要</p>\n<ul>\n<li>一台 Zenbo</li>\n<li>一份做好的 DDE 語料 (製作方式請參考<a href=\"../../07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88\">上一篇</a>)</li>\n<li>一份 <code>Ex14-01-ZenboWiFi</code> Sample code</li>\n</ul>\n<p>在 DDE info 設定的地方，Launch Activity 要填 APP 啟動的第一個 Activity，完整路徑可以看 Manifest。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/project_info.png\" alt=\"project_info\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/launch_activity.png\" alt=\"launch_activity\"></p>\n<h1 id=\"綁定-Domain\"><a href=\"#綁定-Domain\" class=\"headerlink\" title=\"綁定 Domain\"></a>綁定 Domain</h1><p>還記得你的 Domain UUID 嗎?<br>在 DDE info 最上面 點選 <code>All</code> 可以查看你所有的 uuid。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/all_uuid.png\" alt=\"all_uuid\"></p>\n<p>打開 Android 專案，範例中基本都已經打好了，我們只須把自己的 Domain 換上去。<br>特別注意，總共有 3 個地方要改唷</p>\n<ul>\n<li>Manifest 2 個</li>\n<li>ZenboWiFiActivity 1 個</li>\n</ul>\n<p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/manifest_uuid.png\" alt=\"manifest_uuid\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/activity_uuid.png\" alt=\"activity_uuid\"></p>\n<p>第一次安裝，開啟時應該會自動更新語料。<br>去 DS Tools 確認是否有更新成功</p>\n<blockquote>\n<p>DS Tools 可以在 <a href=\"https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Downloads/Links\">DDE Tutorial-Links</a> 找到下載連結。<br>把 APK 裝到 Zenbo 的方法很多，用隨身碟或雲端硬碟都行。</p>\n</blockquote>\n<h1 id=\"DS-Tools\"><a href=\"#DS-Tools\" class=\"headerlink\" title=\"DS Tools\"></a>DS Tools</h1><p>可以管理自己安裝在 Zenbo 上的語料庫。<br>如果剛才 DDE 有安裝成功的話，這裡點選 <code>Show APP List</code> 會看到 Package name、UUID 和 更新時間。確認一下 PKG 和 UUID 是不是都符合前面的設定。<br>以後如果要更新 DDE 的話，可以先點選要更新的 APP，讓 UUID 自動帶到上方欄位，再按 <code>Update by ID</code>。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/dstools.png\" alt=\"dstools\"></p>\n<h1 id=\"刪除-Zenbo-中的-DDE\"><a href=\"#刪除-Zenbo-中的-DDE\" class=\"headerlink\" title=\"刪除 Zenbo 中的 DDE\"></a>刪除 Zenbo 中的 DDE</h1><p>這就是我前幾篇提到，我寫信給客服信箱的問題了。我前面不知道怎麼弄的，PKG 和 UUID 一直對不上，所以沒辦法更新。客服請我先把裝壞的 DS 資料清掉，這邊紀錄一下作法。</p>\n<ol>\n<li>先把裝壞的 APP 刪除: 設定 &gt; 應用程式 &gt; [你的APP] &gt; 儲存空間 &gt; 清除資料</li>\n<li>把 APP 刪掉</li>\n<li>參考 <a href=\"Zenbo-Scratch-%E8%AA%9E%E5%8F%A5%E8%81%BD%E4%B8%8D%E6%87%82%E5%95%8F%E9%A1%8C%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F.pdf\">Zenbo-Scratch-語句聽不懂問題的解決方式</a>  將 LocalDS 的資料清除<ul>\n<li>這篇就是客服寄給我的</li>\n</ul>\n</li>\n<li>Zenbo 關機重開</li>\n<li>DDE 重新 Publish、Deploy to Download Server</li>\n<li>APP 重裝</li>\n<li>去 ASUS Update Tools 確認</li>\n</ol>\n<h1 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h1><p>我有改過 <code>Ex14-01-ZenboWiFi</code> 的畫面和部份的 code 成品大概像影片這樣。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/zWkc5L9Ux5o\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h2 id=\"DDE-的問題\"><a href=\"#DDE-的問題\" class=\"headerlink\" title=\"DDE 的問題\"></a>DDE 的問題</h2><p>截自我的論文:</p>\n<blockquote>\n<p>根據文獻（朱祐萱，2019；白麗等，2018），Zenbo 的語音識別功能，不能清楚辨識指令，是其主要問題。再加上本研究嘗試使用 Zenbo SDK 實作語音回答時，發現 Zenbo 無法處理破音字的發音。例如，「長照」正確唸法是「長（ㄔㄤˊ）照」，但 Zenbo SDK 會唸作「長（ㄓㄤˇ）照」。有時也會跳過句子中的某些字，例如，「台中市政府長期照顧管理中心」的「長」、「原住民」的「民」。</p>\n<p>經過嘗試，最後本研究決定在 APP 中，使用 Android 官方提供的兩個函式庫「android.speech.RecognizerIntent」（以下簡稱 RecognizerIntent）與「android.speech.tts.TextToSpeech」（以下簡稱 TextToSpeech）。根據官方文件 RecognizerIntent（Android Developers, 2021）可以透過 Intent（意圖）啟動語音辨識；TextToSpeech（Android Developers, 2021）可以從文本合成出語音後，立即播放或儲存成音檔。</p>\n<p>為了解決 Zenbo 反應遲鈍，我們在 APP 中提供按鈕，按下按鈕便會觸發 RecognizerIntent 開始聆聽使用者的問題，並將問句顯示在畫面上，使用者可以確認語音輸入的結果是否正確再點選送出（請參考  Youtube  影片：<a href=\"https://youtu.be/iSneVFi9J0I\">語音識別與輸出（使用 RecognizerIntent 和 TextToSpeech）</a>）。</p>\n</blockquote>\n<p>這就是我最後沒有使用 DDE 和 Zenbo SDK 的原因。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Android Developers. (2021). TextToSpeech. Retrieved from <a href=\"https://developer.android.com/reference/android/speech/tts/TextToSpeech\">https://developer.android.com/reference/android/speech/tts/TextToSpeech</a></li>\n<li>Android Developers. (2021). RecognizerIntent. Retrieved from <a href=\"https://developer.android.com/reference/android/speech/RecognizerIntent\">https://developer.android.com/reference/android/speech/RecognizerIntent</a></li>\n<li>白麗、鄭家凱、林恩如、陳思宇、張譯云、徐業良、華碩電腦智慧機器人產品企劃團隊（2018）。 陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo 為例。福祉科技與服務管理學刊，6(3)，265-282。DOI：10.6283/JOCSG.201809_6(3).265。檢自：<a href=\"https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282%E3%80%82\">https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282。</a></li>\n<li>朱祐萱（2019）。銀髮族使用 Zenbo 機器人服務體驗洞察研究。南開科技大學福祉科技與服務管理所碩士論文，南投縣。檢自：<a href=\"https://hdl.handle.net/11296/x4x8c6%E3%80%82\">https://hdl.handle.net/11296/x4x8c6。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天使用的範例出自高煥堂老師的書《AI機器人、藍芽與Android整合開發技術》，需要完整程式碼請參考書中內容喔。<br>本篇會以 <code>Ex14-01-ZenboWiFi</code> 這份程式碼說明如何將語料安裝到 Zenob 中。</p>","more":"<h1 id=\"準備材料\"><a href=\"#準備材料\" class=\"headerlink\" title=\"準備材料\"></a>準備材料</h1><p>你需要</p>\n<ul>\n<li>一台 Zenbo</li>\n<li>一份做好的 DDE 語料 (製作方式請參考<a href=\"../../07/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-05-DDE%E5%9B%9E%E8%A6%86%E8%A6%8F%E5%89%87%E8%A8%AD%E8%A8%88\">上一篇</a>)</li>\n<li>一份 <code>Ex14-01-ZenboWiFi</code> Sample code</li>\n</ul>\n<p>在 DDE info 設定的地方，Launch Activity 要填 APP 啟動的第一個 Activity，完整路徑可以看 Manifest。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/project_info.png\" alt=\"project_info\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/launch_activity.png\" alt=\"launch_activity\"></p>\n<h1 id=\"綁定-Domain\"><a href=\"#綁定-Domain\" class=\"headerlink\" title=\"綁定 Domain\"></a>綁定 Domain</h1><p>還記得你的 Domain UUID 嗎?<br>在 DDE info 最上面 點選 <code>All</code> 可以查看你所有的 uuid。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/all_uuid.png\" alt=\"all_uuid\"></p>\n<p>打開 Android 專案，範例中基本都已經打好了，我們只須把自己的 Domain 換上去。<br>特別注意，總共有 3 個地方要改唷</p>\n<ul>\n<li>Manifest 2 個</li>\n<li>ZenboWiFiActivity 1 個</li>\n</ul>\n<p><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/manifest_uuid.png\" alt=\"manifest_uuid\"><br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/activity_uuid.png\" alt=\"activity_uuid\"></p>\n<p>第一次安裝，開啟時應該會自動更新語料。<br>去 DS Tools 確認是否有更新成功</p>\n<blockquote>\n<p>DS Tools 可以在 <a href=\"https://zenbo.asus.com/developer/documents/overview/DDE-Tutorial/Downloads/Links\">DDE Tutorial-Links</a> 找到下載連結。<br>把 APK 裝到 Zenbo 的方法很多，用隨身碟或雲端硬碟都行。</p>\n</blockquote>\n<h1 id=\"DS-Tools\"><a href=\"#DS-Tools\" class=\"headerlink\" title=\"DS Tools\"></a>DS Tools</h1><p>可以管理自己安裝在 Zenbo 上的語料庫。<br>如果剛才 DDE 有安裝成功的話，這裡點選 <code>Show APP List</code> 會看到 Package name、UUID 和 更新時間。確認一下 PKG 和 UUID 是不是都符合前面的設定。<br>以後如果要更新 DDE 的話，可以先點選要更新的 APP，讓 UUID 自動帶到上方欄位，再按 <code>Update by ID</code>。<br><img src=\"/2021/08/10/Zenbo%E9%96%8B%E7%99%BC%E7%B3%BB%E5%88%97-06-%E5%AE%89%E8%A3%9DDDE%E8%AA%9E%E6%96%99%E5%88%B0Zenbo/dstools.png\" alt=\"dstools\"></p>\n<h1 id=\"刪除-Zenbo-中的-DDE\"><a href=\"#刪除-Zenbo-中的-DDE\" class=\"headerlink\" title=\"刪除 Zenbo 中的 DDE\"></a>刪除 Zenbo 中的 DDE</h1><p>這就是我前幾篇提到，我寫信給客服信箱的問題了。我前面不知道怎麼弄的，PKG 和 UUID 一直對不上，所以沒辦法更新。客服請我先把裝壞的 DS 資料清掉，這邊紀錄一下作法。</p>\n<ol>\n<li>先把裝壞的 APP 刪除: 設定 &gt; 應用程式 &gt; [你的APP] &gt; 儲存空間 &gt; 清除資料</li>\n<li>把 APP 刪掉</li>\n<li>參考 <a href=\"Zenbo-Scratch-%E8%AA%9E%E5%8F%A5%E8%81%BD%E4%B8%8D%E6%87%82%E5%95%8F%E9%A1%8C%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F.pdf\">Zenbo-Scratch-語句聽不懂問題的解決方式</a>  將 LocalDS 的資料清除<ul>\n<li>這篇就是客服寄給我的</li>\n</ul>\n</li>\n<li>Zenbo 關機重開</li>\n<li>DDE 重新 Publish、Deploy to Download Server</li>\n<li>APP 重裝</li>\n<li>去 ASUS Update Tools 確認</li>\n</ol>\n<h1 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h1><p>我有改過 <code>Ex14-01-ZenboWiFi</code> 的畫面和部份的 code 成品大概像影片這樣。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/zWkc5L9Ux5o\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h2 id=\"DDE-的問題\"><a href=\"#DDE-的問題\" class=\"headerlink\" title=\"DDE 的問題\"></a>DDE 的問題</h2><p>截自我的論文:</p>\n<blockquote>\n<p>根據文獻（朱祐萱，2019；白麗等，2018），Zenbo 的語音識別功能，不能清楚辨識指令，是其主要問題。再加上本研究嘗試使用 Zenbo SDK 實作語音回答時，發現 Zenbo 無法處理破音字的發音。例如，「長照」正確唸法是「長（ㄔㄤˊ）照」，但 Zenbo SDK 會唸作「長（ㄓㄤˇ）照」。有時也會跳過句子中的某些字，例如，「台中市政府長期照顧管理中心」的「長」、「原住民」的「民」。</p>\n<p>經過嘗試，最後本研究決定在 APP 中，使用 Android 官方提供的兩個函式庫「android.speech.RecognizerIntent」（以下簡稱 RecognizerIntent）與「android.speech.tts.TextToSpeech」（以下簡稱 TextToSpeech）。根據官方文件 RecognizerIntent（Android Developers, 2021）可以透過 Intent（意圖）啟動語音辨識；TextToSpeech（Android Developers, 2021）可以從文本合成出語音後，立即播放或儲存成音檔。</p>\n<p>為了解決 Zenbo 反應遲鈍，我們在 APP 中提供按鈕，按下按鈕便會觸發 RecognizerIntent 開始聆聽使用者的問題，並將問句顯示在畫面上，使用者可以確認語音輸入的結果是否正確再點選送出（請參考  Youtube  影片：<a href=\"https://youtu.be/iSneVFi9J0I\">語音識別與輸出（使用 RecognizerIntent 和 TextToSpeech）</a>）。</p>\n</blockquote>\n<p>這就是我最後沒有使用 DDE 和 Zenbo SDK 的原因。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Android Developers. (2021). TextToSpeech. Retrieved from <a href=\"https://developer.android.com/reference/android/speech/tts/TextToSpeech\">https://developer.android.com/reference/android/speech/tts/TextToSpeech</a></li>\n<li>Android Developers. (2021). RecognizerIntent. Retrieved from <a href=\"https://developer.android.com/reference/android/speech/RecognizerIntent\">https://developer.android.com/reference/android/speech/RecognizerIntent</a></li>\n<li>白麗、鄭家凱、林恩如、陳思宇、張譯云、徐業良、華碩電腦智慧機器人產品企劃團隊（2018）。 陪伴型機器人使用者經驗評估─以智慧居家機器人Zenbo 為例。福祉科技與服務管理學刊，6(3)，265-282。DOI：10.6283/JOCSG.201809_6(3).265。檢自：<a href=\"https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282%E3%80%82\">https://www.airitilibrary.com/Publication/alDetailedMesh?DocID=23061790-201809-201810220006-201810220006-265-282。</a></li>\n<li>朱祐萱（2019）。銀髮族使用 Zenbo 機器人服務體驗洞察研究。南開科技大學福祉科技與服務管理所碩士論文，南投縣。檢自：<a href=\"https://hdl.handle.net/11296/x4x8c6%E3%80%82\">https://hdl.handle.net/11296/x4x8c6。</a></li>\n</ul>"},{"title":"[爬蟲] 02-儲存爬蟲資料-CSV格式","date":"2021-09-13T18:00:13.000Z","_content":"\n接續上一篇，昨天已經把問答集的內容都爬下來了，再來要把內容整理成下一個階段(訓練模型)，方便使用的格式。\n完整的程式碼可以參考: [https://github.com/dreambo4/MOHW-QandA](https://github.com/dreambo4/MOHW-QandA)\n\n<!-- more -->\n\n# CSV\n什麼是 CSV?\n> 逗號分隔值（Comma-Separated Values，CSV），其檔案**以純文字形式儲存表格資料**。純文字意味著該檔案是一個字元序列，不含必須像二進位數字那樣被解讀的資料。\n> -- form [wiki](https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC)\n\n看圖吧!\n\n原始的 CSV 就只是一個純文字檔，各個欄位以 `,` 隔開。不同筆資料，以換行區隔。\n首列通常是欄位名稱。\n![csv_text](csv_text.png)\n\n特別的是，剛提過 CSV 儲存的資料是個表格嘛，所以我們也可以使用 Excel 或 LibreOffice Calc 編輯檔案，很方便。\n![csv_excel](csv_excel.png)\n\n## 為什麼不用資料庫?\nCSV 的優點是好攜帶 & 好轉移，因為是純文字的關係，比較不會有需要用特定軟體開啟的狀況，一般的文字編輯器(記事本、Sublime、Vim...)就可以開啟。本系統資料儲存主要使用 CSV 格式，而非資料庫的原因是，目前沒有需要。爬蟲的步驟只會做一次，不需要每次建置模型都爬蟲一次取得資料，因此初始的資料集內容基本是固定的。而程式建模型的過程，也只會有「讀取全部資料」的動作，沒有條件查詢、新增、修改、刪除。因此評估後，我們使用 CSV 作為資料及儲存的格式。\n\n**這是本系統未使用資料庫的原因，不一定適合你的狀況，請自行評估調整。**\n\n# 主要程式\n\n主要的程式收兩個參數，`filename` 是生成檔案的名字；`datelist` 是要存入檔案的內容，型態是 list。\n這個 CSV 的套件，提供很多方便的功能。首先寫入欄位名稱，再用迴圈的方式，一筆一筆將內容寫入檔案。\n\n```python\ndef writeCsv(filename, dataList):\n    with open(filename+'.csv', 'w', newline='') as csvfile:\n        # 定義欄位\n        fieldnames = ['q', 'a', 'url']\n\n        # 將 dictionary 寫入 CSV 檔\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        # 寫入第一列的欄位名稱\n        writer.writeheader()\n\n        # 寫入資料\n        for qa in dataList:\n            writer.writerow(qa)\n```\n\nColab 另個方便的地方，執行後，檔案可以直接下載~\n![get_file](get_file.png)\n\n# 結語\n爬蟲的文章告一段落，接下來會是 TF-IDF 和模型建置相關的部分。明天見！\n\n# 參考資料\n- Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from \nhttps://www.crummy.com/software/BeautifulSoup/bs4/doc/","source":"_posts/爬蟲-02-儲存爬蟲資料-CSV格式.md","raw":"---\ntitle: '[爬蟲] 02-儲存爬蟲資料-CSV格式'\ndate: 2021-09-14 02:00:13\ntags:\n- Python\n- 爬蟲\n- 13th鐵人賽\n- CSV\n---\n\n接續上一篇，昨天已經把問答集的內容都爬下來了，再來要把內容整理成下一個階段(訓練模型)，方便使用的格式。\n完整的程式碼可以參考: [https://github.com/dreambo4/MOHW-QandA](https://github.com/dreambo4/MOHW-QandA)\n\n<!-- more -->\n\n# CSV\n什麼是 CSV?\n> 逗號分隔值（Comma-Separated Values，CSV），其檔案**以純文字形式儲存表格資料**。純文字意味著該檔案是一個字元序列，不含必須像二進位數字那樣被解讀的資料。\n> -- form [wiki](https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC)\n\n看圖吧!\n\n原始的 CSV 就只是一個純文字檔，各個欄位以 `,` 隔開。不同筆資料，以換行區隔。\n首列通常是欄位名稱。\n![csv_text](csv_text.png)\n\n特別的是，剛提過 CSV 儲存的資料是個表格嘛，所以我們也可以使用 Excel 或 LibreOffice Calc 編輯檔案，很方便。\n![csv_excel](csv_excel.png)\n\n## 為什麼不用資料庫?\nCSV 的優點是好攜帶 & 好轉移，因為是純文字的關係，比較不會有需要用特定軟體開啟的狀況，一般的文字編輯器(記事本、Sublime、Vim...)就可以開啟。本系統資料儲存主要使用 CSV 格式，而非資料庫的原因是，目前沒有需要。爬蟲的步驟只會做一次，不需要每次建置模型都爬蟲一次取得資料，因此初始的資料集內容基本是固定的。而程式建模型的過程，也只會有「讀取全部資料」的動作，沒有條件查詢、新增、修改、刪除。因此評估後，我們使用 CSV 作為資料及儲存的格式。\n\n**這是本系統未使用資料庫的原因，不一定適合你的狀況，請自行評估調整。**\n\n# 主要程式\n\n主要的程式收兩個參數，`filename` 是生成檔案的名字；`datelist` 是要存入檔案的內容，型態是 list。\n這個 CSV 的套件，提供很多方便的功能。首先寫入欄位名稱，再用迴圈的方式，一筆一筆將內容寫入檔案。\n\n```python\ndef writeCsv(filename, dataList):\n    with open(filename+'.csv', 'w', newline='') as csvfile:\n        # 定義欄位\n        fieldnames = ['q', 'a', 'url']\n\n        # 將 dictionary 寫入 CSV 檔\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        # 寫入第一列的欄位名稱\n        writer.writeheader()\n\n        # 寫入資料\n        for qa in dataList:\n            writer.writerow(qa)\n```\n\nColab 另個方便的地方，執行後，檔案可以直接下載~\n![get_file](get_file.png)\n\n# 結語\n爬蟲的文章告一段落，接下來會是 TF-IDF 和模型建置相關的部分。明天見！\n\n# 參考資料\n- Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from \nhttps://www.crummy.com/software/BeautifulSoup/bs4/doc/","slug":"爬蟲-02-儲存爬蟲資料-CSV格式","published":1,"updated":"2024-02-24T08:06:01.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myig0013k0jfcvh2gjhj","content":"<p>接續上一篇，昨天已經把問答集的內容都爬下來了，再來要把內容整理成下一個階段(訓練模型)，方便使用的格式。<br>完整的程式碼可以參考: <a href=\"https://github.com/dreambo4/MOHW-QandA\">https://github.com/dreambo4/MOHW-QandA</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h1><p>什麼是 CSV?</p>\n<blockquote>\n<p>逗號分隔值（Comma-Separated Values，CSV），其檔案<strong>以純文字形式儲存表格資料</strong>。純文字意味著該檔案是一個字元序列，不含必須像二進位數字那樣被解讀的資料。<br>– form <a href=\"https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC\">wiki</a></p>\n</blockquote>\n<p>看圖吧!</p>\n<p>原始的 CSV 就只是一個純文字檔，各個欄位以 <code>,</code> 隔開。不同筆資料，以換行區隔。<br>首列通常是欄位名稱。<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/csv_text.png\" alt=\"csv_text\"></p>\n<p>特別的是，剛提過 CSV 儲存的資料是個表格嘛，所以我們也可以使用 Excel 或 LibreOffice Calc 編輯檔案，很方便。<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/csv_excel.png\" alt=\"csv_excel\"></p>\n<h2 id=\"為什麼不用資料庫\"><a href=\"#為什麼不用資料庫\" class=\"headerlink\" title=\"為什麼不用資料庫?\"></a>為什麼不用資料庫?</h2><p>CSV 的優點是好攜帶 &amp; 好轉移，因為是純文字的關係，比較不會有需要用特定軟體開啟的狀況，一般的文字編輯器(記事本、Sublime、Vim…)就可以開啟。本系統資料儲存主要使用 CSV 格式，而非資料庫的原因是，目前沒有需要。爬蟲的步驟只會做一次，不需要每次建置模型都爬蟲一次取得資料，因此初始的資料集內容基本是固定的。而程式建模型的過程，也只會有「讀取全部資料」的動作，沒有條件查詢、新增、修改、刪除。因此評估後，我們使用 CSV 作為資料及儲存的格式。</p>\n<p><strong>這是本系統未使用資料庫的原因，不一定適合你的狀況，請自行評估調整。</strong></p>\n<h1 id=\"主要程式\"><a href=\"#主要程式\" class=\"headerlink\" title=\"主要程式\"></a>主要程式</h1><p>主要的程式收兩個參數，<code>filename</code> 是生成檔案的名字；<code>datelist</code> 是要存入檔案的內容，型態是 list。<br>這個 CSV 的套件，提供很多方便的功能。首先寫入欄位名稱，再用迴圈的方式，一筆一筆將內容寫入檔案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeCsv</span>(<span class=\"params\">filename, dataList</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename+<span class=\"string\">&#x27;.csv&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>) <span class=\"keyword\">as</span> csvfile:</span><br><span class=\"line\">        <span class=\"comment\"># 定義欄位</span></span><br><span class=\"line\">        fieldnames = [<span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 將 dictionary 寫入 CSV 檔</span></span><br><span class=\"line\">        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 寫入第一列的欄位名稱</span></span><br><span class=\"line\">        writer.writeheader()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 寫入資料</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> qa <span class=\"keyword\">in</span> dataList:</span><br><span class=\"line\">            writer.writerow(qa)</span><br></pre></td></tr></table></figure>\n\n<p>Colab 另個方便的地方，執行後，檔案可以直接下載~<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/get_file.png\" alt=\"get_file\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>爬蟲的文章告一段落，接下來會是 TF-IDF 和模型建置相關的部分。明天見！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from<br><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>接續上一篇，昨天已經把問答集的內容都爬下來了，再來要把內容整理成下一個階段(訓練模型)，方便使用的格式。<br>完整的程式碼可以參考: <a href=\"https://github.com/dreambo4/MOHW-QandA\">https://github.com/dreambo4/MOHW-QandA</a></p>","more":"<h1 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h1><p>什麼是 CSV?</p>\n<blockquote>\n<p>逗號分隔值（Comma-Separated Values，CSV），其檔案<strong>以純文字形式儲存表格資料</strong>。純文字意味著該檔案是一個字元序列，不含必須像二進位數字那樣被解讀的資料。<br>– form <a href=\"https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC\">wiki</a></p>\n</blockquote>\n<p>看圖吧!</p>\n<p>原始的 CSV 就只是一個純文字檔，各個欄位以 <code>,</code> 隔開。不同筆資料，以換行區隔。<br>首列通常是欄位名稱。<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/csv_text.png\" alt=\"csv_text\"></p>\n<p>特別的是，剛提過 CSV 儲存的資料是個表格嘛，所以我們也可以使用 Excel 或 LibreOffice Calc 編輯檔案，很方便。<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/csv_excel.png\" alt=\"csv_excel\"></p>\n<h2 id=\"為什麼不用資料庫\"><a href=\"#為什麼不用資料庫\" class=\"headerlink\" title=\"為什麼不用資料庫?\"></a>為什麼不用資料庫?</h2><p>CSV 的優點是好攜帶 &amp; 好轉移，因為是純文字的關係，比較不會有需要用特定軟體開啟的狀況，一般的文字編輯器(記事本、Sublime、Vim…)就可以開啟。本系統資料儲存主要使用 CSV 格式，而非資料庫的原因是，目前沒有需要。爬蟲的步驟只會做一次，不需要每次建置模型都爬蟲一次取得資料，因此初始的資料集內容基本是固定的。而程式建模型的過程，也只會有「讀取全部資料」的動作，沒有條件查詢、新增、修改、刪除。因此評估後，我們使用 CSV 作為資料及儲存的格式。</p>\n<p><strong>這是本系統未使用資料庫的原因，不一定適合你的狀況，請自行評估調整。</strong></p>\n<h1 id=\"主要程式\"><a href=\"#主要程式\" class=\"headerlink\" title=\"主要程式\"></a>主要程式</h1><p>主要的程式收兩個參數，<code>filename</code> 是生成檔案的名字；<code>datelist</code> 是要存入檔案的內容，型態是 list。<br>這個 CSV 的套件，提供很多方便的功能。首先寫入欄位名稱，再用迴圈的方式，一筆一筆將內容寫入檔案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeCsv</span>(<span class=\"params\">filename, dataList</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename+<span class=\"string\">&#x27;.csv&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>) <span class=\"keyword\">as</span> csvfile:</span><br><span class=\"line\">        <span class=\"comment\"># 定義欄位</span></span><br><span class=\"line\">        fieldnames = [<span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 將 dictionary 寫入 CSV 檔</span></span><br><span class=\"line\">        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 寫入第一列的欄位名稱</span></span><br><span class=\"line\">        writer.writeheader()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 寫入資料</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> qa <span class=\"keyword\">in</span> dataList:</span><br><span class=\"line\">            writer.writerow(qa)</span><br></pre></td></tr></table></figure>\n\n<p>Colab 另個方便的地方，執行後，檔案可以直接下載~<br><img src=\"/2021/09/14/%E7%88%AC%E8%9F%B2-02-%E5%84%B2%E5%AD%98%E7%88%AC%E8%9F%B2%E8%B3%87%E6%96%99-CSV%E6%A0%BC%E5%BC%8F/get_file.png\" alt=\"get_file\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>爬蟲的文章告一段落，接下來會是 TF-IDF 和模型建置相關的部分。明天見！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from<br><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li>\n</ul>"},{"title":"[爬蟲] 01-蒐集訓練資料 以衛服部長照常見問題為例","date":"2021-09-07T15:54:12.000Z","_content":"\n撰寫 Python 程式碼蒐集網路上的長照相關問答資訊，相比使用人工蒐集的方式，程式自動化蒐集方便又快速，也比較不會有缺漏。本研究將程式蒐集到的資料彙整成  CSV 格式，問答集來源包括：愛長照（愛長照編輯團隊，2017）、臺中市長期照顧管理中心（臺中市長期照顧管理中心，2020）、皇家護理集團（皇家護理集團，2019）、臺中市輔具資源整合網（臺中市輔具資源整合網，2015）、衛生福利部（衛生福利部，2017、2020）、宜蘭縣長期照護管理所（宜蘭縣長期照護管理所，2019），共六個來源。\n<!-- more -->\n![questions_src](questions_src.jpg)\n\n如果不想在自己電腦安裝 Pytnon 環境，或裝一些有的沒的套件，很推薦使用 Google 提供的 [Colab](https://colab.research.google.com/)。我真的覺得這個工具是佛心來著，可以免費使用 Google 的 GPU、TPU。程式又可以分段執行，也很適合用來 debug。\n\n不過我用 Colab 的最大原因是，因為爬蟲的過程會需要大量發送請求(request)，我很怕實驗室 IP 被學校計中或衛福部 ban 掉😂。\n\n進入正題！\n今天選擇爬衛福部的資料做為範例，完整的程式碼可以參考: [https://github.com/dreambo4/MOHW-QandA](https://github.com/dreambo4/MOHW-QandA)\n\n# 載入函式庫\n\n首先載入等下要用的 Library\n\n```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport csv\n```\n\n# 目標網頁\n\n今天的目標是: https://1966.gov.tw/LTC/np-3972-201.html\n我們要取得這 7 個分類裡的所有 Q&A。因為只有 7 個分類，所以我只讓程式從每個分類的第一頁開始爬，而不是列出所有分類的這頁。也就是說，以下的這個動作要做 7 次。\n\n1. 長期照顧特別扣除額: https://1966.gov.tw/LTC/lp-4641-201.html\n2. 長照服務法相關規定: https://1966.gov.tw/LTC/lp-3973-201.html\n3. 長照服務申請及評估: https://1966.gov.tw/LTC/lp-3974-201.html\n4. 長照給付支付基準: https://1966.gov.tw/LTC/lp-3975-201.html\n5. 預防延緩失能與照護計畫: https://1966.gov.tw/LTC/lp-3976-201.html\n6. 長照機構法人: https://1966.gov.tw/LTC/lp-4112-201.html\n7. 其他: https://1966.gov.tw/LTC/lp-3977-201.html\n\n可以發現網址的前半段都是相同的，因此 7 個 URL 可以寫成\n\n```python\nbaseUrl = \"https://1966.gov.tw/LTC/\"\nurl = baseUrl + \"lp-3977-201.html\"\n```\n\n# 主程式\n\n主要的程式是這樣的\n\n```python\nqaList = []\nwhile True:\n    soup = getContent(url)\n    questions = soup.find(\"div\", class_=\"List\").find_all(\"a\")\n    \n    for q in questions:\n        qa = {}\n        answerUrl = q.get(\"href\")\n\n        qa['url'] = answerUrl\n        qa['q'] = q.get(\"title\")\n        qa['a'] = getAnswer(answerUrl)\n        print(qa)\n        qaList.append(qa)\n    nextPageUrl = getNextPage(soup)\n    if nextPageUrl is False:\n        break\n    url = baseUrl + nextPageUrl\n```\n\n## 取得問題列表\n首先 `getContent()` 取得該頁的完整內容。找到網頁中的內容，我們要的就是這個 `class=\"List\"` 的 div，並取得所有的 `<a></a>`，當中有我們需要的問題列表。\n\n> 在 BeautifulSoup，要取得 Html tag 有兩種方式: find、find_all，並且可以搭配使用\n> - find: 取得第一個標籤\n> - fing_all: 取得所有標籤\n\n![qa_list](qa_list.png)\n\n得到的問題列表(`questions`)大概會長這樣，此時把 `href` 拿出來，便等於取得答案頁的 URL。\n\n```python\n[<a href=\"https://1966.gov.tw/LTC/cp-3977-42249-201.html\" title=\"台灣的失智症長照服務資源量能？\">台灣的失智症長照服務資源量能？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42248-201.html\" title=\"「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？\">「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42245-201.html\" title=\"長照基金獎助之申請程序？\">長照基金獎助之申請程序？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42244-201.html\" title=\"有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？\">有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？</a>]\n```\n\n## 整理 Q&A\n\n但是裡面還是有太多我們不需要的東西，因此再用個迴圈整理一下，把一個個的 `<a>` 變成 dict 的資料結構。\n\n> BeautifulSoup 中取得 Html tag 中的內容，使用 `get()`\n\n`q.get(\"href\")` 可取得 `\"https://1966.gov.tw/LTC/cp-3977-42249-201.html\"`。這是此問題的回答頁的連結，需要用`getAnswer()`再爬一次這個回答頁的內容，來解析內容。\n`q.get(\"title\")` 可取得 `\"台灣的失智症長照服務資源量能？\"`\n\n做成一個一個的 dict\n```python\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42249-201.html', 'q': '台灣的失智症長照服務資源量能？', 'a': '一、為因應我國快速增加的老年及失智人口，延緩及減輕失智症對社會及家庭的衝擊，並提供失智症及其家庭所需的醫療及照護需求，本部於102年8月公布「失智症防治照護政策網領」，訂定兩大目標及七大面向，以作為我國失智症照護發展方向。並結合跨部會機關依據政策綱領七大面向提出行動方案32項，並依各工作項目之效益指標達成目標，以完善失智症照護防治體系。\\n二、為提升失智症社區服務普及性，擴增失智症長照服務量能，已推動措施如下：\\n(一)97年起失智者已納入長照十年計畫，失智症長者可經一般失能之基本日常生活活動能力(ADL)或臨床失智評估量表（CDR）評估，判定失能或失智程度，核定補助時數，按老人之需求，提供失智老人適切長照服務。長照服務個案中失智症患者約占9.7%，截至104年5月底，提供失智症長照服務個案約1萬5千多人。\\n(二)完善社區照護網絡-多元、在地服務及家庭照顧者：\\n1.已完成185個多元日照服務單位(日照中心159個、日托據點26個)，預計105年完成「一鄉鎮一日照」。\\r\\n2.失智專責服務：已設置日間照顧服務(17縣市共25處)、老人團體家屋(10個單位/83床) 、瑞智學堂(19縣市/60處)、失智症社區服務據點（28據點）、有失智症專區之機構 (41家，計1,317床；另規劃中7家239床)。\\r\\n3.建構家庭照顧者服務支持網絡：已設置失智症諮詢關懷專線，針對長照十年個案高風險家庭提供諮詢服務（1,141人/年)；提供家庭照顧者照顧訓練（908/場；17,137人次/年），及建立失智症互助家庭（2,451人次)。\\n(三)充足長照服務人力：已完成醫事長照專業三個階段培訓課程並展開訓練，至104年8月已訓練約30,000人次；又為讓在地人照顧在地人，擴大培養在地長照人力，100-104年8月止約訓練3200人次。\\n(四) 提升民眾對失智症防治及照護的認知：\\n1.全民教育：拍攝紀錄片如「被遺忘的時光」、「昨日的記憶」、憶起愛相隨」、「照顧者心情故事-居家服務」、製作失智症衛教手冊、認識失智症單張；辦理學校、職場宣導講座等進行教育宣導。\\r\\n2.社區健康促進網絡如結合社區關懷據點（1,978個) 辦理老人健康促進活動（6,359場；超過10萬人)。\\r\\n3.建構高齡友善機構及城市方面：通過認證機構，醫院有105家、長照機構有3家及1家衛生所；並於22縣市全面推動高齡友善城市，讓 280萬之長者受惠。\\n三、未來規劃：\\n(一) 104年5月已完成長期照顧服務法立法，可依法設置長照基金，發展服務及人力資源。\\r\\n(二) 整合原有之長照十年計畫與長照服務網基礎，推動長期照顧服務量能提升計畫。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42248-201.html', 'q': '「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？', 'a': '(一) 人口政策白皮書所關注的人口議題包含了少子女化、高齡化、移民，高齡社會白皮書主要針對高齡者及未來高齡社會提出四大願景與相關具體行動措施。雖兩者皆有針對高齡化提出相關對策，但為因應人口老化迅速、家庭與生活型態改變與社會價值變遷的挑戰，我國必須針對當今社會之高齡多元需求，同時參考國際經驗與趨勢，必須即早提出更前瞻且整體性的政策規劃，以滿足我國高齡者能夠享有健康生活、幸福家庭、活力社會與友善環境，達到延長國人健康年數、減少失能老年人口的目標，並且整體提升高齡者生活幸福感。\\r\\n\\xa0(二) 人口政策白皮書與高齡社會白皮書兩者並無衝突與適用之優先順序，高齡社會白皮書亦有融合人口政策白皮書之理念，並特別針對未來高齡人口需求延伸提出高齡政策之前瞻性架構與規劃，以共同實踐政府政策之願景。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42245-201.html', 'q': '長照基金獎助之申請程序？', 'a': '1.本部長照十年計畫2.0-106年度補助計畫，106年部分，本部社家署已於106年1月12日以衛授家字第1060800004號函送本部「106年度運用社會福利基金辦理長照十年計畫2.0補助項目及基準」，將補助案件分為主軸計畫、整合型計畫及專案計畫等三類，可依該三類之補助項目、基準、作業程序辦理。\\r\\n2.107年（含）以後及非屬上開長照十年計畫2.0-106年度補助計畫經費之申請程序與相關作業規範，本部將另訂長照基金獎助作業要點。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42244-201.html', 'q': '有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？', 'a': '1.現行長照服務資源不足地區，係依本部99年及103年辦理長照服務資源盤點所規劃之長照服務網區域劃分。\\r\\n2.本辦法第三條已明定「至少每五年辦理長照服務資源供需之調查」。\\r\\n3.將依前項辦理之調查結果，定期檢討長照服務資源不足地區之定義。'}\n```\n\n## 下一頁\n好了，這頁讀完了，下一頁怎麼辦，總不會還要再改網址重跑吧?\n當然不是，下方可以看到有下一頁的按鈕，我們需要做的是，取得下一頁的 URL，一樣取得問題列表，直到最後一頁(沒有下一頁)。\n\n![next_page](next_page.png)\n![no_next](no_next.png)\n\n# Functions\n\n## 取得網頁內容\n根據 URL，取得該頁的完整 Html。\n```python\ndef getContent(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    return soup \n```\n\n## 取得下一頁的 URL\n大概的意思是，一直找有沒有下一頁的箭頭，有的話就取得下一頁的連結。沒有箭頭，就表示沒有下一頁，回傳 False。\n\n```python\ndef getNextPage(htmlContent):\n    if htmlContent.find('a', class_=\"icon-angle-right\") is not None:\n        return htmlContent.find('a', class_=\"icon-angle-right\").get(\"href\")\n    else:\n        return False\n```\n![next_tag](next_tag.png)\n\n## 取得回答\n根據前面取得問題列表時得到的答案頁 URL，再爬蟲一次，取得相應的答案。\n\n> BeautifulSoup 中 `get_text()` 可以取得標籤中間的文字(不含標籤)\n\n```python\ndef getAnswer(answerUrl):\n    answerSoup = getContent(answerUrl)\n    answer = answerSoup.find(\"div\", class_=\"user_edit\").find(\"p\")\n    return answer.get_text()\n```\n![get_answer](get_answer.png)\n\n# 資料清理/整理\n我最後用來建模型的 CSV 是還有經過整理的，使用 Excel 或 LibreOffice Calc 可以方便的去除重複資料和編號。\n\nCSV檔案連結:\nhttps://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n\n|欄位|說明|\n|---|---|\n|id|流水號|\n|Intent ID|[已棄用] 這個欄位可以略過，這是之前與 Zenbo DDE 對應用的|\n|Q|問題|\n|A|答案|\n|url|問答組合的出處|\n|category|紀錄問答組合屬於何種類別，編號對應會在之後的文章介紹|\n\n# 結語\n今天就到這，謝謝大家。明天的主題是有關於，將這些爬下來的內容存成 CSV 檔，方便後續使用。明天見！\n\n# 參考資料\n- Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from https://www.crummy.com/software/BeautifulSoup/bs4/doc/\n- 宜蘭縣長期照護管理所（2019）。長照常見問題及回應。檢自：https://ltc.ilshb.gov.tw/subject/15/view/42。\n- 皇家護理集團（2019）。皇家Q&A。檢自：https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/。\n- 愛長照編輯團隊（2017）。簡單搞懂「長照 2.0」－常見 QA 與新增服務項目。檢自：https://www.ilong-termcare.com/Article/Detail/1533。\n- 臺中市長期照顧管理中心（2020）。長照常見問與答 (109.10 更新)。檢自：http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php。\n- 臺中市輔具資源整合網（2015）。常見問題。檢自：https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。\n- 衛生福利部（2017）。衛福部長照專區 常見問題。檢自：https://1966.gov.tw/LTC/np-3972-201.html。\n- 衛生福利部（2020）。衛生福利 e 寶箱 長期照顧。檢自：https://www.mohw.gov.tw/cp-88-208-1-18.html。","source":"_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例.md","raw":"---\ntitle: '[爬蟲] 01-蒐集訓練資料 以衛服部長照常見問題為例'\ndate: 2021-09-07 23:54:12\ntags:\n- Python\n- 爬蟲\n- BeautifulSoup\n- 13th鐵人賽\n---\n\n撰寫 Python 程式碼蒐集網路上的長照相關問答資訊，相比使用人工蒐集的方式，程式自動化蒐集方便又快速，也比較不會有缺漏。本研究將程式蒐集到的資料彙整成  CSV 格式，問答集來源包括：愛長照（愛長照編輯團隊，2017）、臺中市長期照顧管理中心（臺中市長期照顧管理中心，2020）、皇家護理集團（皇家護理集團，2019）、臺中市輔具資源整合網（臺中市輔具資源整合網，2015）、衛生福利部（衛生福利部，2017、2020）、宜蘭縣長期照護管理所（宜蘭縣長期照護管理所，2019），共六個來源。\n<!-- more -->\n![questions_src](questions_src.jpg)\n\n如果不想在自己電腦安裝 Pytnon 環境，或裝一些有的沒的套件，很推薦使用 Google 提供的 [Colab](https://colab.research.google.com/)。我真的覺得這個工具是佛心來著，可以免費使用 Google 的 GPU、TPU。程式又可以分段執行，也很適合用來 debug。\n\n不過我用 Colab 的最大原因是，因為爬蟲的過程會需要大量發送請求(request)，我很怕實驗室 IP 被學校計中或衛福部 ban 掉😂。\n\n進入正題！\n今天選擇爬衛福部的資料做為範例，完整的程式碼可以參考: [https://github.com/dreambo4/MOHW-QandA](https://github.com/dreambo4/MOHW-QandA)\n\n# 載入函式庫\n\n首先載入等下要用的 Library\n\n```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport csv\n```\n\n# 目標網頁\n\n今天的目標是: https://1966.gov.tw/LTC/np-3972-201.html\n我們要取得這 7 個分類裡的所有 Q&A。因為只有 7 個分類，所以我只讓程式從每個分類的第一頁開始爬，而不是列出所有分類的這頁。也就是說，以下的這個動作要做 7 次。\n\n1. 長期照顧特別扣除額: https://1966.gov.tw/LTC/lp-4641-201.html\n2. 長照服務法相關規定: https://1966.gov.tw/LTC/lp-3973-201.html\n3. 長照服務申請及評估: https://1966.gov.tw/LTC/lp-3974-201.html\n4. 長照給付支付基準: https://1966.gov.tw/LTC/lp-3975-201.html\n5. 預防延緩失能與照護計畫: https://1966.gov.tw/LTC/lp-3976-201.html\n6. 長照機構法人: https://1966.gov.tw/LTC/lp-4112-201.html\n7. 其他: https://1966.gov.tw/LTC/lp-3977-201.html\n\n可以發現網址的前半段都是相同的，因此 7 個 URL 可以寫成\n\n```python\nbaseUrl = \"https://1966.gov.tw/LTC/\"\nurl = baseUrl + \"lp-3977-201.html\"\n```\n\n# 主程式\n\n主要的程式是這樣的\n\n```python\nqaList = []\nwhile True:\n    soup = getContent(url)\n    questions = soup.find(\"div\", class_=\"List\").find_all(\"a\")\n    \n    for q in questions:\n        qa = {}\n        answerUrl = q.get(\"href\")\n\n        qa['url'] = answerUrl\n        qa['q'] = q.get(\"title\")\n        qa['a'] = getAnswer(answerUrl)\n        print(qa)\n        qaList.append(qa)\n    nextPageUrl = getNextPage(soup)\n    if nextPageUrl is False:\n        break\n    url = baseUrl + nextPageUrl\n```\n\n## 取得問題列表\n首先 `getContent()` 取得該頁的完整內容。找到網頁中的內容，我們要的就是這個 `class=\"List\"` 的 div，並取得所有的 `<a></a>`，當中有我們需要的問題列表。\n\n> 在 BeautifulSoup，要取得 Html tag 有兩種方式: find、find_all，並且可以搭配使用\n> - find: 取得第一個標籤\n> - fing_all: 取得所有標籤\n\n![qa_list](qa_list.png)\n\n得到的問題列表(`questions`)大概會長這樣，此時把 `href` 拿出來，便等於取得答案頁的 URL。\n\n```python\n[<a href=\"https://1966.gov.tw/LTC/cp-3977-42249-201.html\" title=\"台灣的失智症長照服務資源量能？\">台灣的失智症長照服務資源量能？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42248-201.html\" title=\"「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？\">「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42245-201.html\" title=\"長照基金獎助之申請程序？\">長照基金獎助之申請程序？</a>, <a href=\"https://1966.gov.tw/LTC/cp-3977-42244-201.html\" title=\"有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？\">有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？</a>]\n```\n\n## 整理 Q&A\n\n但是裡面還是有太多我們不需要的東西，因此再用個迴圈整理一下，把一個個的 `<a>` 變成 dict 的資料結構。\n\n> BeautifulSoup 中取得 Html tag 中的內容，使用 `get()`\n\n`q.get(\"href\")` 可取得 `\"https://1966.gov.tw/LTC/cp-3977-42249-201.html\"`。這是此問題的回答頁的連結，需要用`getAnswer()`再爬一次這個回答頁的內容，來解析內容。\n`q.get(\"title\")` 可取得 `\"台灣的失智症長照服務資源量能？\"`\n\n做成一個一個的 dict\n```python\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42249-201.html', 'q': '台灣的失智症長照服務資源量能？', 'a': '一、為因應我國快速增加的老年及失智人口，延緩及減輕失智症對社會及家庭的衝擊，並提供失智症及其家庭所需的醫療及照護需求，本部於102年8月公布「失智症防治照護政策網領」，訂定兩大目標及七大面向，以作為我國失智症照護發展方向。並結合跨部會機關依據政策綱領七大面向提出行動方案32項，並依各工作項目之效益指標達成目標，以完善失智症照護防治體系。\\n二、為提升失智症社區服務普及性，擴增失智症長照服務量能，已推動措施如下：\\n(一)97年起失智者已納入長照十年計畫，失智症長者可經一般失能之基本日常生活活動能力(ADL)或臨床失智評估量表（CDR）評估，判定失能或失智程度，核定補助時數，按老人之需求，提供失智老人適切長照服務。長照服務個案中失智症患者約占9.7%，截至104年5月底，提供失智症長照服務個案約1萬5千多人。\\n(二)完善社區照護網絡-多元、在地服務及家庭照顧者：\\n1.已完成185個多元日照服務單位(日照中心159個、日托據點26個)，預計105年完成「一鄉鎮一日照」。\\r\\n2.失智專責服務：已設置日間照顧服務(17縣市共25處)、老人團體家屋(10個單位/83床) 、瑞智學堂(19縣市/60處)、失智症社區服務據點（28據點）、有失智症專區之機構 (41家，計1,317床；另規劃中7家239床)。\\r\\n3.建構家庭照顧者服務支持網絡：已設置失智症諮詢關懷專線，針對長照十年個案高風險家庭提供諮詢服務（1,141人/年)；提供家庭照顧者照顧訓練（908/場；17,137人次/年），及建立失智症互助家庭（2,451人次)。\\n(三)充足長照服務人力：已完成醫事長照專業三個階段培訓課程並展開訓練，至104年8月已訓練約30,000人次；又為讓在地人照顧在地人，擴大培養在地長照人力，100-104年8月止約訓練3200人次。\\n(四) 提升民眾對失智症防治及照護的認知：\\n1.全民教育：拍攝紀錄片如「被遺忘的時光」、「昨日的記憶」、憶起愛相隨」、「照顧者心情故事-居家服務」、製作失智症衛教手冊、認識失智症單張；辦理學校、職場宣導講座等進行教育宣導。\\r\\n2.社區健康促進網絡如結合社區關懷據點（1,978個) 辦理老人健康促進活動（6,359場；超過10萬人)。\\r\\n3.建構高齡友善機構及城市方面：通過認證機構，醫院有105家、長照機構有3家及1家衛生所；並於22縣市全面推動高齡友善城市，讓 280萬之長者受惠。\\n三、未來規劃：\\n(一) 104年5月已完成長期照顧服務法立法，可依法設置長照基金，發展服務及人力資源。\\r\\n(二) 整合原有之長照十年計畫與長照服務網基礎，推動長期照顧服務量能提升計畫。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42248-201.html', 'q': '「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？', 'a': '(一) 人口政策白皮書所關注的人口議題包含了少子女化、高齡化、移民，高齡社會白皮書主要針對高齡者及未來高齡社會提出四大願景與相關具體行動措施。雖兩者皆有針對高齡化提出相關對策，但為因應人口老化迅速、家庭與生活型態改變與社會價值變遷的挑戰，我國必須針對當今社會之高齡多元需求，同時參考國際經驗與趨勢，必須即早提出更前瞻且整體性的政策規劃，以滿足我國高齡者能夠享有健康生活、幸福家庭、活力社會與友善環境，達到延長國人健康年數、減少失能老年人口的目標，並且整體提升高齡者生活幸福感。\\r\\n\\xa0(二) 人口政策白皮書與高齡社會白皮書兩者並無衝突與適用之優先順序，高齡社會白皮書亦有融合人口政策白皮書之理念，並特別針對未來高齡人口需求延伸提出高齡政策之前瞻性架構與規劃，以共同實踐政府政策之願景。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42245-201.html', 'q': '長照基金獎助之申請程序？', 'a': '1.本部長照十年計畫2.0-106年度補助計畫，106年部分，本部社家署已於106年1月12日以衛授家字第1060800004號函送本部「106年度運用社會福利基金辦理長照十年計畫2.0補助項目及基準」，將補助案件分為主軸計畫、整合型計畫及專案計畫等三類，可依該三類之補助項目、基準、作業程序辦理。\\r\\n2.107年（含）以後及非屬上開長照十年計畫2.0-106年度補助計畫經費之申請程序與相關作業規範，本部將另訂長照基金獎助作業要點。'}\n{'url': 'https://1966.gov.tw/LTC/cp-3977-42244-201.html', 'q': '有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？', 'a': '1.現行長照服務資源不足地區，係依本部99年及103年辦理長照服務資源盤點所規劃之長照服務網區域劃分。\\r\\n2.本辦法第三條已明定「至少每五年辦理長照服務資源供需之調查」。\\r\\n3.將依前項辦理之調查結果，定期檢討長照服務資源不足地區之定義。'}\n```\n\n## 下一頁\n好了，這頁讀完了，下一頁怎麼辦，總不會還要再改網址重跑吧?\n當然不是，下方可以看到有下一頁的按鈕，我們需要做的是，取得下一頁的 URL，一樣取得問題列表，直到最後一頁(沒有下一頁)。\n\n![next_page](next_page.png)\n![no_next](no_next.png)\n\n# Functions\n\n## 取得網頁內容\n根據 URL，取得該頁的完整 Html。\n```python\ndef getContent(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    return soup \n```\n\n## 取得下一頁的 URL\n大概的意思是，一直找有沒有下一頁的箭頭，有的話就取得下一頁的連結。沒有箭頭，就表示沒有下一頁，回傳 False。\n\n```python\ndef getNextPage(htmlContent):\n    if htmlContent.find('a', class_=\"icon-angle-right\") is not None:\n        return htmlContent.find('a', class_=\"icon-angle-right\").get(\"href\")\n    else:\n        return False\n```\n![next_tag](next_tag.png)\n\n## 取得回答\n根據前面取得問題列表時得到的答案頁 URL，再爬蟲一次，取得相應的答案。\n\n> BeautifulSoup 中 `get_text()` 可以取得標籤中間的文字(不含標籤)\n\n```python\ndef getAnswer(answerUrl):\n    answerSoup = getContent(answerUrl)\n    answer = answerSoup.find(\"div\", class_=\"user_edit\").find(\"p\")\n    return answer.get_text()\n```\n![get_answer](get_answer.png)\n\n# 資料清理/整理\n我最後用來建模型的 CSV 是還有經過整理的，使用 Excel 或 LibreOffice Calc 可以方便的去除重複資料和編號。\n\nCSV檔案連結:\nhttps://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n\n|欄位|說明|\n|---|---|\n|id|流水號|\n|Intent ID|[已棄用] 這個欄位可以略過，這是之前與 Zenbo DDE 對應用的|\n|Q|問題|\n|A|答案|\n|url|問答組合的出處|\n|category|紀錄問答組合屬於何種類別，編號對應會在之後的文章介紹|\n\n# 結語\n今天就到這，謝謝大家。明天的主題是有關於，將這些爬下來的內容存成 CSV 檔，方便後續使用。明天見！\n\n# 參考資料\n- Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from https://www.crummy.com/software/BeautifulSoup/bs4/doc/\n- 宜蘭縣長期照護管理所（2019）。長照常見問題及回應。檢自：https://ltc.ilshb.gov.tw/subject/15/view/42。\n- 皇家護理集團（2019）。皇家Q&A。檢自：https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/。\n- 愛長照編輯團隊（2017）。簡單搞懂「長照 2.0」－常見 QA 與新增服務項目。檢自：https://www.ilong-termcare.com/Article/Detail/1533。\n- 臺中市長期照顧管理中心（2020）。長照常見問與答 (109.10 更新)。檢自：http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php。\n- 臺中市輔具資源整合網（2015）。常見問題。檢自：https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。\n- 衛生福利部（2017）。衛福部長照專區 常見問題。檢自：https://1966.gov.tw/LTC/np-3972-201.html。\n- 衛生福利部（2020）。衛生福利 e 寶箱 長期照顧。檢自：https://www.mohw.gov.tw/cp-88-208-1-18.html。","slug":"爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例","published":1,"updated":"2024-02-24T08:06:01.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myig0015k0jf0y980b40","content":"<p>撰寫 Python 程式碼蒐集網路上的長照相關問答資訊，相比使用人工蒐集的方式，程式自動化蒐集方便又快速，也比較不會有缺漏。本研究將程式蒐集到的資料彙整成  CSV 格式，問答集來源包括：愛長照（愛長照編輯團隊，2017）、臺中市長期照顧管理中心（臺中市長期照顧管理中心，2020）、皇家護理集團（皇家護理集團，2019）、臺中市輔具資源整合網（臺中市輔具資源整合網，2015）、衛生福利部（衛生福利部，2017、2020）、宜蘭縣長期照護管理所（宜蘭縣長期照護管理所，2019），共六個來源。</p>\n<span id=\"more\"></span>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/questions_src.jpg\" alt=\"questions_src\"></p>\n<p>如果不想在自己電腦安裝 Pytnon 環境，或裝一些有的沒的套件，很推薦使用 Google 提供的 <a href=\"https://colab.research.google.com/\">Colab</a>。我真的覺得這個工具是佛心來著，可以免費使用 Google 的 GPU、TPU。程式又可以分段執行，也很適合用來 debug。</p>\n<p>不過我用 Colab 的最大原因是，因為爬蟲的過程會需要大量發送請求(request)，我很怕實驗室 IP 被學校計中或衛福部 ban 掉😂。</p>\n<p>進入正題！<br>今天選擇爬衛福部的資料做為範例，完整的程式碼可以參考: <a href=\"https://github.com/dreambo4/MOHW-QandA\">https://github.com/dreambo4/MOHW-QandA</a></p>\n<h1 id=\"載入函式庫\"><a href=\"#載入函式庫\" class=\"headerlink\" title=\"載入函式庫\"></a>載入函式庫</h1><p>首先載入等下要用的 Library</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"目標網頁\"><a href=\"#目標網頁\" class=\"headerlink\" title=\"目標網頁\"></a>目標網頁</h1><p>今天的目標是: <a href=\"https://1966.gov.tw/LTC/np-3972-201.html\">https://1966.gov.tw/LTC/np-3972-201.html</a><br>我們要取得這 7 個分類裡的所有 Q&amp;A。因為只有 7 個分類，所以我只讓程式從每個分類的第一頁開始爬，而不是列出所有分類的這頁。也就是說，以下的這個動作要做 7 次。</p>\n<ol>\n<li>長期照顧特別扣除額: <a href=\"https://1966.gov.tw/LTC/lp-4641-201.html\">https://1966.gov.tw/LTC/lp-4641-201.html</a></li>\n<li>長照服務法相關規定: <a href=\"https://1966.gov.tw/LTC/lp-3973-201.html\">https://1966.gov.tw/LTC/lp-3973-201.html</a></li>\n<li>長照服務申請及評估: <a href=\"https://1966.gov.tw/LTC/lp-3974-201.html\">https://1966.gov.tw/LTC/lp-3974-201.html</a></li>\n<li>長照給付支付基準: <a href=\"https://1966.gov.tw/LTC/lp-3975-201.html\">https://1966.gov.tw/LTC/lp-3975-201.html</a></li>\n<li>預防延緩失能與照護計畫: <a href=\"https://1966.gov.tw/LTC/lp-3976-201.html\">https://1966.gov.tw/LTC/lp-3976-201.html</a></li>\n<li>長照機構法人: <a href=\"https://1966.gov.tw/LTC/lp-4112-201.html\">https://1966.gov.tw/LTC/lp-4112-201.html</a></li>\n<li>其他: <a href=\"https://1966.gov.tw/LTC/lp-3977-201.html\">https://1966.gov.tw/LTC/lp-3977-201.html</a></li>\n</ol>\n<p>可以發現網址的前半段都是相同的，因此 7 個 URL 可以寫成</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl = <span class=\"string\">&quot;https://1966.gov.tw/LTC/&quot;</span></span><br><span class=\"line\">url = baseUrl + <span class=\"string\">&quot;lp-3977-201.html&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主程式\"><a href=\"#主程式\" class=\"headerlink\" title=\"主程式\"></a>主程式</h1><p>主要的程式是這樣的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qaList = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    soup = getContent(url)</span><br><span class=\"line\">    questions = soup.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;List&quot;</span>).find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> questions:</span><br><span class=\"line\">        qa = &#123;&#125;</span><br><span class=\"line\">        answerUrl = q.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;url&#x27;</span>] = answerUrl</span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;q&#x27;</span>] = q.get(<span class=\"string\">&quot;title&quot;</span>)</span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;a&#x27;</span>] = getAnswer(answerUrl)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(qa)</span><br><span class=\"line\">        qaList.append(qa)</span><br><span class=\"line\">    nextPageUrl = getNextPage(soup)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nextPageUrl <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    url = baseUrl + nextPageUrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得問題列表\"><a href=\"#取得問題列表\" class=\"headerlink\" title=\"取得問題列表\"></a>取得問題列表</h2><p>首先 <code>getContent()</code> 取得該頁的完整內容。找到網頁中的內容，我們要的就是這個 <code>class=&quot;List&quot;</code> 的 div，並取得所有的 <code>&lt;a&gt;&lt;/a&gt;</code>，當中有我們需要的問題列表。</p>\n<blockquote>\n<p>在 BeautifulSoup，要取得 Html tag 有兩種方式: find、find_all，並且可以搭配使用</p>\n<ul>\n<li>find: 取得第一個標籤</li>\n<li>fing_all: 取得所有標籤</li>\n</ul>\n</blockquote>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/qa_list.png\" alt=\"qa_list\"></p>\n<p>得到的問題列表(<code>questions</code>)大概會長這樣，此時把 <code>href</code> 拿出來，便等於取得答案頁的 URL。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42249-201.html&quot; title=&quot;台灣的失智症長照服務資源量能？&quot;&gt;台灣的失智症長照服務資源量能？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42248-201.html&quot; title=&quot;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&quot;&gt;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42245-201.html&quot; title=&quot;長照基金獎助之申請程序？&quot;&gt;長照基金獎助之申請程序？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42244-201.html&quot; title=&quot;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&quot;&gt;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&lt;/a&gt;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整理-Q-amp-A\"><a href=\"#整理-Q-amp-A\" class=\"headerlink\" title=\"整理 Q&amp;A\"></a>整理 Q&amp;A</h2><p>但是裡面還是有太多我們不需要的東西，因此再用個迴圈整理一下，把一個個的 <code>&lt;a&gt;</code> 變成 dict 的資料結構。</p>\n<blockquote>\n<p>BeautifulSoup 中取得 Html tag 中的內容，使用 <code>get()</code></p>\n</blockquote>\n<p><code>q.get(&quot;href&quot;)</code> 可取得 <code>&quot;https://1966.gov.tw/LTC/cp-3977-42249-201.html&quot;</code>。這是此問題的回答頁的連結，需要用<code>getAnswer()</code>再爬一次這個回答頁的內容，來解析內容。<br><code>q.get(&quot;title&quot;)</code> 可取得 <code>&quot;台灣的失智症長照服務資源量能？&quot;</code></p>\n<p>做成一個一個的 dict</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42249-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;台灣的失智症長照服務資源量能？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;一、為因應我國快速增加的老年及失智人口，延緩及減輕失智症對社會及家庭的衝擊，並提供失智症及其家庭所需的醫療及照護需求，本部於102年8月公布「失智症防治照護政策網領」，訂定兩大目標及七大面向，以作為我國失智症照護發展方向。並結合跨部會機關依據政策綱領七大面向提出行動方案32項，並依各工作項目之效益指標達成目標，以完善失智症照護防治體系。\\n二、為提升失智症社區服務普及性，擴增失智症長照服務量能，已推動措施如下：\\n(一)97年起失智者已納入長照十年計畫，失智症長者可經一般失能之基本日常生活活動能力(ADL)或臨床失智評估量表（CDR）評估，判定失能或失智程度，核定補助時數，按老人之需求，提供失智老人適切長照服務。長照服務個案中失智症患者約占9.7%，截至104年5月底，提供失智症長照服務個案約1萬5千多人。\\n(二)完善社區照護網絡-多元、在地服務及家庭照顧者：\\n1.已完成185個多元日照服務單位(日照中心159個、日托據點26個)，預計105年完成「一鄉鎮一日照」。\\r\\n2.失智專責服務：已設置日間照顧服務(17縣市共25處)、老人團體家屋(10個單位/83床) 、瑞智學堂(19縣市/60處)、失智症社區服務據點（28據點）、有失智症專區之機構 (41家，計1,317床；另規劃中7家239床)。\\r\\n3.建構家庭照顧者服務支持網絡：已設置失智症諮詢關懷專線，針對長照十年個案高風險家庭提供諮詢服務（1,141人/年)；提供家庭照顧者照顧訓練（908/場；17,137人次/年），及建立失智症互助家庭（2,451人次)。\\n(三)充足長照服務人力：已完成醫事長照專業三個階段培訓課程並展開訓練，至104年8月已訓練約30,000人次；又為讓在地人照顧在地人，擴大培養在地長照人力，100-104年8月止約訓練3200人次。\\n(四) 提升民眾對失智症防治及照護的認知：\\n1.全民教育：拍攝紀錄片如「被遺忘的時光」、「昨日的記憶」、憶起愛相隨」、「照顧者心情故事-居家服務」、製作失智症衛教手冊、認識失智症單張；辦理學校、職場宣導講座等進行教育宣導。\\r\\n2.社區健康促進網絡如結合社區關懷據點（1,978個) 辦理老人健康促進活動（6,359場；超過10萬人)。\\r\\n3.建構高齡友善機構及城市方面：通過認證機構，醫院有105家、長照機構有3家及1家衛生所；並於22縣市全面推動高齡友善城市，讓 280萬之長者受惠。\\n三、未來規劃：\\n(一) 104年5月已完成長期照顧服務法立法，可依法設置長照基金，發展服務及人力資源。\\r\\n(二) 整合原有之長照十年計畫與長照服務網基礎，推動長期照顧服務量能提升計畫。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42248-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;(一) 人口政策白皮書所關注的人口議題包含了少子女化、高齡化、移民，高齡社會白皮書主要針對高齡者及未來高齡社會提出四大願景與相關具體行動措施。雖兩者皆有針對高齡化提出相關對策，但為因應人口老化迅速、家庭與生活型態改變與社會價值變遷的挑戰，我國必須針對當今社會之高齡多元需求，同時參考國際經驗與趨勢，必須即早提出更前瞻且整體性的政策規劃，以滿足我國高齡者能夠享有健康生活、幸福家庭、活力社會與友善環境，達到延長國人健康年數、減少失能老年人口的目標，並且整體提升高齡者生活幸福感。\\r\\n\\xa0(二) 人口政策白皮書與高齡社會白皮書兩者並無衝突與適用之優先順序，高齡社會白皮書亦有融合人口政策白皮書之理念，並特別針對未來高齡人口需求延伸提出高齡政策之前瞻性架構與規劃，以共同實踐政府政策之願景。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42245-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;長照基金獎助之申請程序？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;1.本部長照十年計畫2.0-106年度補助計畫，106年部分，本部社家署已於106年1月12日以衛授家字第1060800004號函送本部「106年度運用社會福利基金辦理長照十年計畫2.0補助項目及基準」，將補助案件分為主軸計畫、整合型計畫及專案計畫等三類，可依該三類之補助項目、基準、作業程序辦理。\\r\\n2.107年（含）以後及非屬上開長照十年計畫2.0-106年度補助計畫經費之申請程序與相關作業規範，本部將另訂長照基金獎助作業要點。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42244-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;1.現行長照服務資源不足地區，係依本部99年及103年辦理長照服務資源盤點所規劃之長照服務網區域劃分。\\r\\n2.本辦法第三條已明定「至少每五年辦理長照服務資源供需之調查」。\\r\\n3.將依前項辦理之調查結果，定期檢討長照服務資源不足地區之定義。&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下一頁\"><a href=\"#下一頁\" class=\"headerlink\" title=\"下一頁\"></a>下一頁</h2><p>好了，這頁讀完了，下一頁怎麼辦，總不會還要再改網址重跑吧?<br>當然不是，下方可以看到有下一頁的按鈕，我們需要做的是，取得下一頁的 URL，一樣取得問題列表，直到最後一頁(沒有下一頁)。</p>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/next_page.png\" alt=\"next_page\"><br><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/no_next.png\" alt=\"no_next\"></p>\n<h1 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h1><h2 id=\"取得網頁內容\"><a href=\"#取得網頁內容\" class=\"headerlink\" title=\"取得網頁內容\"></a>取得網頁內容</h2><p>根據 URL，取得該頁的完整 Html。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getContent</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    soup = BeautifulSoup(response.text, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> soup </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得下一頁的-URL\"><a href=\"#取得下一頁的-URL\" class=\"headerlink\" title=\"取得下一頁的 URL\"></a>取得下一頁的 URL</h2><p>大概的意思是，一直找有沒有下一頁的箭頭，有的話就取得下一頁的連結。沒有箭頭，就表示沒有下一頁，回傳 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getNextPage</span>(<span class=\"params\">htmlContent</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> htmlContent.find(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&quot;icon-angle-right&quot;</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> htmlContent.find(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&quot;icon-angle-right&quot;</span>).get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/next_tag.png\" alt=\"next_tag\"></p>\n<h2 id=\"取得回答\"><a href=\"#取得回答\" class=\"headerlink\" title=\"取得回答\"></a>取得回答</h2><p>根據前面取得問題列表時得到的答案頁 URL，再爬蟲一次，取得相應的答案。</p>\n<blockquote>\n<p>BeautifulSoup 中 <code>get_text()</code> 可以取得標籤中間的文字(不含標籤)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAnswer</span>(<span class=\"params\">answerUrl</span>):</span></span><br><span class=\"line\">    answerSoup = getContent(answerUrl)</span><br><span class=\"line\">    answer = answerSoup.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;user_edit&quot;</span>).find(<span class=\"string\">&quot;p&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer.get_text()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/get_answer.png\" alt=\"get_answer\"></p>\n<h1 id=\"資料清理-整理\"><a href=\"#資料清理-整理\" class=\"headerlink\" title=\"資料清理/整理\"></a>資料清理/整理</h1><p>我最後用來建模型的 CSV 是還有經過整理的，使用 Excel 或 LibreOffice Calc 可以方便的去除重複資料和編號。</p>\n<p>CSV檔案連結:<br><a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></p>\n<table>\n<thead>\n<tr>\n<th>欄位</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>流水號</td>\n</tr>\n<tr>\n<td>Intent ID</td>\n<td>[已棄用] 這個欄位可以略過，這是之前與 Zenbo DDE 對應用的</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>問題</td>\n</tr>\n<tr>\n<td>A</td>\n<td>答案</td>\n</tr>\n<tr>\n<td>url</td>\n<td>問答組合的出處</td>\n</tr>\n<tr>\n<td>category</td>\n<td>紀錄問答組合屬於何種類別，編號對應會在之後的文章介紹</td>\n</tr>\n</tbody></table>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>今天就到這，謝謝大家。明天的主題是有關於，將這些爬下來的內容存成 CSV 檔，方便後續使用。明天見！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li>\n<li>宜蘭縣長期照護管理所（2019）。長照常見問題及回應。檢自：<a href=\"https://ltc.ilshb.gov.tw/subject/15/view/42%E3%80%82\">https://ltc.ilshb.gov.tw/subject/15/view/42。</a></li>\n<li>皇家護理集團（2019）。皇家Q&amp;A。檢自：<a href=\"https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/%E3%80%82\">https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/。</a></li>\n<li>愛長照編輯團隊（2017）。簡單搞懂「長照 2.0」－常見 QA 與新增服務項目。檢自：<a href=\"https://www.ilong-termcare.com/Article/Detail/1533%E3%80%82\">https://www.ilong-termcare.com/Article/Detail/1533。</a></li>\n<li>臺中市長期照顧管理中心（2020）。長照常見問與答 (109.10 更新)。檢自：<a href=\"http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php%E3%80%82\">http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php。</a></li>\n<li>臺中市輔具資源整合網（2015）。常見問題。檢自：<a href=\"https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E3%80%82\">https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。</a></li>\n<li>衛生福利部（2017）。衛福部長照專區 常見問題。檢自：<a href=\"https://1966.gov.tw/LTC/np-3972-201.html%E3%80%82\">https://1966.gov.tw/LTC/np-3972-201.html。</a></li>\n<li>衛生福利部（2020）。衛生福利 e 寶箱 長期照顧。檢自：<a href=\"https://www.mohw.gov.tw/cp-88-208-1-18.html%E3%80%82\">https://www.mohw.gov.tw/cp-88-208-1-18.html。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>撰寫 Python 程式碼蒐集網路上的長照相關問答資訊，相比使用人工蒐集的方式，程式自動化蒐集方便又快速，也比較不會有缺漏。本研究將程式蒐集到的資料彙整成  CSV 格式，問答集來源包括：愛長照（愛長照編輯團隊，2017）、臺中市長期照顧管理中心（臺中市長期照顧管理中心，2020）、皇家護理集團（皇家護理集團，2019）、臺中市輔具資源整合網（臺中市輔具資源整合網，2015）、衛生福利部（衛生福利部，2017、2020）、宜蘭縣長期照護管理所（宜蘭縣長期照護管理所，2019），共六個來源。</p>","more":"<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/questions_src.jpg\" alt=\"questions_src\"></p>\n<p>如果不想在自己電腦安裝 Pytnon 環境，或裝一些有的沒的套件，很推薦使用 Google 提供的 <a href=\"https://colab.research.google.com/\">Colab</a>。我真的覺得這個工具是佛心來著，可以免費使用 Google 的 GPU、TPU。程式又可以分段執行，也很適合用來 debug。</p>\n<p>不過我用 Colab 的最大原因是，因為爬蟲的過程會需要大量發送請求(request)，我很怕實驗室 IP 被學校計中或衛福部 ban 掉😂。</p>\n<p>進入正題！<br>今天選擇爬衛福部的資料做為範例，完整的程式碼可以參考: <a href=\"https://github.com/dreambo4/MOHW-QandA\">https://github.com/dreambo4/MOHW-QandA</a></p>\n<h1 id=\"載入函式庫\"><a href=\"#載入函式庫\" class=\"headerlink\" title=\"載入函式庫\"></a>載入函式庫</h1><p>首先載入等下要用的 Library</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"目標網頁\"><a href=\"#目標網頁\" class=\"headerlink\" title=\"目標網頁\"></a>目標網頁</h1><p>今天的目標是: <a href=\"https://1966.gov.tw/LTC/np-3972-201.html\">https://1966.gov.tw/LTC/np-3972-201.html</a><br>我們要取得這 7 個分類裡的所有 Q&amp;A。因為只有 7 個分類，所以我只讓程式從每個分類的第一頁開始爬，而不是列出所有分類的這頁。也就是說，以下的這個動作要做 7 次。</p>\n<ol>\n<li>長期照顧特別扣除額: <a href=\"https://1966.gov.tw/LTC/lp-4641-201.html\">https://1966.gov.tw/LTC/lp-4641-201.html</a></li>\n<li>長照服務法相關規定: <a href=\"https://1966.gov.tw/LTC/lp-3973-201.html\">https://1966.gov.tw/LTC/lp-3973-201.html</a></li>\n<li>長照服務申請及評估: <a href=\"https://1966.gov.tw/LTC/lp-3974-201.html\">https://1966.gov.tw/LTC/lp-3974-201.html</a></li>\n<li>長照給付支付基準: <a href=\"https://1966.gov.tw/LTC/lp-3975-201.html\">https://1966.gov.tw/LTC/lp-3975-201.html</a></li>\n<li>預防延緩失能與照護計畫: <a href=\"https://1966.gov.tw/LTC/lp-3976-201.html\">https://1966.gov.tw/LTC/lp-3976-201.html</a></li>\n<li>長照機構法人: <a href=\"https://1966.gov.tw/LTC/lp-4112-201.html\">https://1966.gov.tw/LTC/lp-4112-201.html</a></li>\n<li>其他: <a href=\"https://1966.gov.tw/LTC/lp-3977-201.html\">https://1966.gov.tw/LTC/lp-3977-201.html</a></li>\n</ol>\n<p>可以發現網址的前半段都是相同的，因此 7 個 URL 可以寫成</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl = <span class=\"string\">&quot;https://1966.gov.tw/LTC/&quot;</span></span><br><span class=\"line\">url = baseUrl + <span class=\"string\">&quot;lp-3977-201.html&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主程式\"><a href=\"#主程式\" class=\"headerlink\" title=\"主程式\"></a>主程式</h1><p>主要的程式是這樣的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qaList = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    soup = getContent(url)</span><br><span class=\"line\">    questions = soup.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;List&quot;</span>).find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> questions:</span><br><span class=\"line\">        qa = &#123;&#125;</span><br><span class=\"line\">        answerUrl = q.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;url&#x27;</span>] = answerUrl</span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;q&#x27;</span>] = q.get(<span class=\"string\">&quot;title&quot;</span>)</span><br><span class=\"line\">        qa[<span class=\"string\">&#x27;a&#x27;</span>] = getAnswer(answerUrl)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(qa)</span><br><span class=\"line\">        qaList.append(qa)</span><br><span class=\"line\">    nextPageUrl = getNextPage(soup)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nextPageUrl <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    url = baseUrl + nextPageUrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得問題列表\"><a href=\"#取得問題列表\" class=\"headerlink\" title=\"取得問題列表\"></a>取得問題列表</h2><p>首先 <code>getContent()</code> 取得該頁的完整內容。找到網頁中的內容，我們要的就是這個 <code>class=&quot;List&quot;</code> 的 div，並取得所有的 <code>&lt;a&gt;&lt;/a&gt;</code>，當中有我們需要的問題列表。</p>\n<blockquote>\n<p>在 BeautifulSoup，要取得 Html tag 有兩種方式: find、find_all，並且可以搭配使用</p>\n<ul>\n<li>find: 取得第一個標籤</li>\n<li>fing_all: 取得所有標籤</li>\n</ul>\n</blockquote>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/qa_list.png\" alt=\"qa_list\"></p>\n<p>得到的問題列表(<code>questions</code>)大概會長這樣，此時把 <code>href</code> 拿出來，便等於取得答案頁的 URL。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42249-201.html&quot; title=&quot;台灣的失智症長照服務資源量能？&quot;&gt;台灣的失智症長照服務資源量能？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42248-201.html&quot; title=&quot;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&quot;&gt;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42245-201.html&quot; title=&quot;長照基金獎助之申請程序？&quot;&gt;長照基金獎助之申請程序？&lt;/a&gt;, &lt;a href=&quot;https://1966.gov.tw/LTC/cp-3977-42244-201.html&quot; title=&quot;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&quot;&gt;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&lt;/a&gt;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整理-Q-amp-A\"><a href=\"#整理-Q-amp-A\" class=\"headerlink\" title=\"整理 Q&amp;A\"></a>整理 Q&amp;A</h2><p>但是裡面還是有太多我們不需要的東西，因此再用個迴圈整理一下，把一個個的 <code>&lt;a&gt;</code> 變成 dict 的資料結構。</p>\n<blockquote>\n<p>BeautifulSoup 中取得 Html tag 中的內容，使用 <code>get()</code></p>\n</blockquote>\n<p><code>q.get(&quot;href&quot;)</code> 可取得 <code>&quot;https://1966.gov.tw/LTC/cp-3977-42249-201.html&quot;</code>。這是此問題的回答頁的連結，需要用<code>getAnswer()</code>再爬一次這個回答頁的內容，來解析內容。<br><code>q.get(&quot;title&quot;)</code> 可取得 <code>&quot;台灣的失智症長照服務資源量能？&quot;</code></p>\n<p>做成一個一個的 dict</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42249-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;台灣的失智症長照服務資源量能？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;一、為因應我國快速增加的老年及失智人口，延緩及減輕失智症對社會及家庭的衝擊，並提供失智症及其家庭所需的醫療及照護需求，本部於102年8月公布「失智症防治照護政策網領」，訂定兩大目標及七大面向，以作為我國失智症照護發展方向。並結合跨部會機關依據政策綱領七大面向提出行動方案32項，並依各工作項目之效益指標達成目標，以完善失智症照護防治體系。\\n二、為提升失智症社區服務普及性，擴增失智症長照服務量能，已推動措施如下：\\n(一)97年起失智者已納入長照十年計畫，失智症長者可經一般失能之基本日常生活活動能力(ADL)或臨床失智評估量表（CDR）評估，判定失能或失智程度，核定補助時數，按老人之需求，提供失智老人適切長照服務。長照服務個案中失智症患者約占9.7%，截至104年5月底，提供失智症長照服務個案約1萬5千多人。\\n(二)完善社區照護網絡-多元、在地服務及家庭照顧者：\\n1.已完成185個多元日照服務單位(日照中心159個、日托據點26個)，預計105年完成「一鄉鎮一日照」。\\r\\n2.失智專責服務：已設置日間照顧服務(17縣市共25處)、老人團體家屋(10個單位/83床) 、瑞智學堂(19縣市/60處)、失智症社區服務據點（28據點）、有失智症專區之機構 (41家，計1,317床；另規劃中7家239床)。\\r\\n3.建構家庭照顧者服務支持網絡：已設置失智症諮詢關懷專線，針對長照十年個案高風險家庭提供諮詢服務（1,141人/年)；提供家庭照顧者照顧訓練（908/場；17,137人次/年），及建立失智症互助家庭（2,451人次)。\\n(三)充足長照服務人力：已完成醫事長照專業三個階段培訓課程並展開訓練，至104年8月已訓練約30,000人次；又為讓在地人照顧在地人，擴大培養在地長照人力，100-104年8月止約訓練3200人次。\\n(四) 提升民眾對失智症防治及照護的認知：\\n1.全民教育：拍攝紀錄片如「被遺忘的時光」、「昨日的記憶」、憶起愛相隨」、「照顧者心情故事-居家服務」、製作失智症衛教手冊、認識失智症單張；辦理學校、職場宣導講座等進行教育宣導。\\r\\n2.社區健康促進網絡如結合社區關懷據點（1,978個) 辦理老人健康促進活動（6,359場；超過10萬人)。\\r\\n3.建構高齡友善機構及城市方面：通過認證機構，醫院有105家、長照機構有3家及1家衛生所；並於22縣市全面推動高齡友善城市，讓 280萬之長者受惠。\\n三、未來規劃：\\n(一) 104年5月已完成長期照顧服務法立法，可依法設置長照基金，發展服務及人力資源。\\r\\n(二) 整合原有之長照十年計畫與長照服務網基礎，推動長期照顧服務量能提升計畫。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42248-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;「高齡政策白皮書」與「人口白皮書」，這兩者的關係為何？何者應優先適用？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;(一) 人口政策白皮書所關注的人口議題包含了少子女化、高齡化、移民，高齡社會白皮書主要針對高齡者及未來高齡社會提出四大願景與相關具體行動措施。雖兩者皆有針對高齡化提出相關對策，但為因應人口老化迅速、家庭與生活型態改變與社會價值變遷的挑戰，我國必須針對當今社會之高齡多元需求，同時參考國際經驗與趨勢，必須即早提出更前瞻且整體性的政策規劃，以滿足我國高齡者能夠享有健康生活、幸福家庭、活力社會與友善環境，達到延長國人健康年數、減少失能老年人口的目標，並且整體提升高齡者生活幸福感。\\r\\n\\xa0(二) 人口政策白皮書與高齡社會白皮書兩者並無衝突與適用之優先順序，高齡社會白皮書亦有融合人口政策白皮書之理念，並特別針對未來高齡人口需求延伸提出高齡政策之前瞻性架構與規劃，以共同實踐政府政策之願景。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42245-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;長照基金獎助之申請程序？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;1.本部長照十年計畫2.0-106年度補助計畫，106年部分，本部社家署已於106年1月12日以衛授家字第1060800004號函送本部「106年度運用社會福利基金辦理長照十年計畫2.0補助項目及基準」，將補助案件分為主軸計畫、整合型計畫及專案計畫等三類，可依該三類之補助項目、基準、作業程序辦理。\\r\\n2.107年（含）以後及非屬上開長照十年計畫2.0-106年度補助計畫經費之申請程序與相關作業規範，本部將另訂長照基金獎助作業要點。&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;https://1966.gov.tw/LTC/cp-3977-42244-201.html&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>: <span class=\"string\">&#x27;有關長照服務資源不足地區的定義，建議重新檢討及訂定檢討年限？&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;1.現行長照服務資源不足地區，係依本部99年及103年辦理長照服務資源盤點所規劃之長照服務網區域劃分。\\r\\n2.本辦法第三條已明定「至少每五年辦理長照服務資源供需之調查」。\\r\\n3.將依前項辦理之調查結果，定期檢討長照服務資源不足地區之定義。&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下一頁\"><a href=\"#下一頁\" class=\"headerlink\" title=\"下一頁\"></a>下一頁</h2><p>好了，這頁讀完了，下一頁怎麼辦，總不會還要再改網址重跑吧?<br>當然不是，下方可以看到有下一頁的按鈕，我們需要做的是，取得下一頁的 URL，一樣取得問題列表，直到最後一頁(沒有下一頁)。</p>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/next_page.png\" alt=\"next_page\"><br><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/no_next.png\" alt=\"no_next\"></p>\n<h1 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h1><h2 id=\"取得網頁內容\"><a href=\"#取得網頁內容\" class=\"headerlink\" title=\"取得網頁內容\"></a>取得網頁內容</h2><p>根據 URL，取得該頁的完整 Html。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getContent</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    soup = BeautifulSoup(response.text, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> soup </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取得下一頁的-URL\"><a href=\"#取得下一頁的-URL\" class=\"headerlink\" title=\"取得下一頁的 URL\"></a>取得下一頁的 URL</h2><p>大概的意思是，一直找有沒有下一頁的箭頭，有的話就取得下一頁的連結。沒有箭頭，就表示沒有下一頁，回傳 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getNextPage</span>(<span class=\"params\">htmlContent</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> htmlContent.find(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&quot;icon-angle-right&quot;</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> htmlContent.find(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&quot;icon-angle-right&quot;</span>).get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/next_tag.png\" alt=\"next_tag\"></p>\n<h2 id=\"取得回答\"><a href=\"#取得回答\" class=\"headerlink\" title=\"取得回答\"></a>取得回答</h2><p>根據前面取得問題列表時得到的答案頁 URL，再爬蟲一次，取得相應的答案。</p>\n<blockquote>\n<p>BeautifulSoup 中 <code>get_text()</code> 可以取得標籤中間的文字(不含標籤)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAnswer</span>(<span class=\"params\">answerUrl</span>):</span></span><br><span class=\"line\">    answerSoup = getContent(answerUrl)</span><br><span class=\"line\">    answer = answerSoup.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;user_edit&quot;</span>).find(<span class=\"string\">&quot;p&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer.get_text()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/09/07/%E7%88%AC%E8%9F%B2-01-%E8%92%90%E9%9B%86%E8%A8%93%E7%B7%B4%E8%B3%87%E6%96%99-%E4%BB%A5%E8%A1%9B%E6%9C%8D%E9%83%A8%E9%95%B7%E7%85%A7%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E7%82%BA%E4%BE%8B/get_answer.png\" alt=\"get_answer\"></p>\n<h1 id=\"資料清理-整理\"><a href=\"#資料清理-整理\" class=\"headerlink\" title=\"資料清理/整理\"></a>資料清理/整理</h1><p>我最後用來建模型的 CSV 是還有經過整理的，使用 Excel 或 LibreOffice Calc 可以方便的去除重複資料和編號。</p>\n<p>CSV檔案連結:<br><a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></p>\n<table>\n<thead>\n<tr>\n<th>欄位</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>流水號</td>\n</tr>\n<tr>\n<td>Intent ID</td>\n<td>[已棄用] 這個欄位可以略過，這是之前與 Zenbo DDE 對應用的</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>問題</td>\n</tr>\n<tr>\n<td>A</td>\n<td>答案</td>\n</tr>\n<tr>\n<td>url</td>\n<td>問答組合的出處</td>\n</tr>\n<tr>\n<td>category</td>\n<td>紀錄問答組合屬於何種類別，編號對應會在之後的文章介紹</td>\n</tr>\n</tbody></table>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>今天就到這，謝謝大家。明天的主題是有關於，將這些爬下來的內容存成 CSV 檔，方便後續使用。明天見！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>Beautiful Soup 4.9.0 documentation. (2021). Beautiful Soup Documentation. Retrieved from <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li>\n<li>宜蘭縣長期照護管理所（2019）。長照常見問題及回應。檢自：<a href=\"https://ltc.ilshb.gov.tw/subject/15/view/42%E3%80%82\">https://ltc.ilshb.gov.tw/subject/15/view/42。</a></li>\n<li>皇家護理集團（2019）。皇家Q&amp;A。檢自：<a href=\"https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/%E3%80%82\">https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/。</a></li>\n<li>愛長照編輯團隊（2017）。簡單搞懂「長照 2.0」－常見 QA 與新增服務項目。檢自：<a href=\"https://www.ilong-termcare.com/Article/Detail/1533%E3%80%82\">https://www.ilong-termcare.com/Article/Detail/1533。</a></li>\n<li>臺中市長期照顧管理中心（2020）。長照常見問與答 (109.10 更新)。檢自：<a href=\"http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php%E3%80%82\">http://ltcc2.health.taichung.gov.tw/files/15-1000-1042,c89-1.php。</a></li>\n<li>臺中市輔具資源整合網（2015）。常見問題。檢自：<a href=\"https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E3%80%82\">https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。</a></li>\n<li>衛生福利部（2017）。衛福部長照專區 常見問題。檢自：<a href=\"https://1966.gov.tw/LTC/np-3972-201.html%E3%80%82\">https://1966.gov.tw/LTC/np-3972-201.html。</a></li>\n<li>衛生福利部（2020）。衛生福利 e 寶箱 長期照顧。檢自：<a href=\"https://www.mohw.gov.tw/cp-88-208-1-18.html%E3%80%82\">https://www.mohw.gov.tw/cp-88-208-1-18.html。</a></li>\n</ul>"},{"title":"按鈕監聽器","date":"2017-08-30T07:38:34.000Z","_content":"\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=341](https://blog.cmrdb.cs.pu.edu.tw/?p=341)\n\n雖然上次介紹了Kotlin，但目前開發Android大部分還是以Java為主，今天就要教大家用程式碼控制TextView的文字內容，主要是介紹按鈕(Button)的監聽器(Listener)控制。\n<!-- more -->\n\n# 監聽器\n常見的監聽器有幾個 \n> 之間差別可以參考 : http://blog.csdn.net/eclipsexys/article/details/8785149 \n\n- `OnClickListener` (點擊) : 在手指**按下再放開**後才執行\n- `OnLongClickListener` (長按) : 手指按住不放時執行\n- `OnTouchListener` (觸碰) : 手指一碰到按鈕就執行，與OnClick不同的是不需等到手指放開\n\n# 建立專案\n首先建立一個新專案( [可以參考上次的文章](http://blog.cmrdb.cs.pu.edu.tw/?p=291) )\n\n# 排版\n在畫面上新增一個TextView、一個Button\n![image](image.png) \n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.helloworld.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"30dp\"\n        android:text=\"TextView\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"horizontal\">\n\n        <Button\n            android:id=\"@+id/btn\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Button\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n# 程式碼\n\n1. 宣告 \n```java \nButton btn;\nTextView txv;\n```\n\n1. 與畫面物件配對\n```java\nbtn = (Button) findViewById(R.id.btn);\ntxv = (TextView) findViewById(R.id.textView);\n```\n\n1. 設置OnClick監聽器\n```java\nbtn.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        txv.setText(\"OnClick\");\n    }\n});\n```\n\n1. 設置OnLongClick監聽器\n```java \nbtn.setOnLongClickListener(new View.OnLongClickListener() {\n    @Override\n    public boolean onLongClick(View view) {\n        txv.setText(\"OnLongClick\");\n            return false;\n    }\n});\n```\n\n1. 設置OnTouch監聽器\n```java\nbtn.setOnTouchListener(new View.OnTouchListener() {\n    @Override\n    public boolean onTouch(View view, MotionEvent motionEvent) {\n        txv.setText(\"OnTouch\");\n            return false;\n    }\n});\n```\n\n# 完整程式碼\n\n```java\npackage com.example.yr.helloworld;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    Button btn;\n    TextView txv;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        btn = (Button) findViewById(R.id.btn);\n        txv = (TextView) findViewById(R.id.textView);\n\n        btn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                txv.setText(\"OnClick\");\n            }\n        });\n\n        btn.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View view) {\n                txv.setText(\"OnLongClick\");\n                return false;\n            }\n        });\n\n        btn.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                txv.setText(\"OnTouch\");\n                return false;\n            }\n        });\n    }\n}\n```\n","source":"_posts/按鈕監聽器.md","raw":"---\ntitle: 按鈕監聽器\ndate: 2017-08-30 15:38:34\ntags:\n- Android\n- 監聽器\n- 行雲部落格\n---\n\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=341](https://blog.cmrdb.cs.pu.edu.tw/?p=341)\n\n雖然上次介紹了Kotlin，但目前開發Android大部分還是以Java為主，今天就要教大家用程式碼控制TextView的文字內容，主要是介紹按鈕(Button)的監聽器(Listener)控制。\n<!-- more -->\n\n# 監聽器\n常見的監聽器有幾個 \n> 之間差別可以參考 : http://blog.csdn.net/eclipsexys/article/details/8785149 \n\n- `OnClickListener` (點擊) : 在手指**按下再放開**後才執行\n- `OnLongClickListener` (長按) : 手指按住不放時執行\n- `OnTouchListener` (觸碰) : 手指一碰到按鈕就執行，與OnClick不同的是不需等到手指放開\n\n# 建立專案\n首先建立一個新專案( [可以參考上次的文章](http://blog.cmrdb.cs.pu.edu.tw/?p=291) )\n\n# 排版\n在畫面上新增一個TextView、一個Button\n![image](image.png) \n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.helloworld.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"30dp\"\n        android:text=\"TextView\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"horizontal\">\n\n        <Button\n            android:id=\"@+id/btn\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Button\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n# 程式碼\n\n1. 宣告 \n```java \nButton btn;\nTextView txv;\n```\n\n1. 與畫面物件配對\n```java\nbtn = (Button) findViewById(R.id.btn);\ntxv = (TextView) findViewById(R.id.textView);\n```\n\n1. 設置OnClick監聽器\n```java\nbtn.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        txv.setText(\"OnClick\");\n    }\n});\n```\n\n1. 設置OnLongClick監聽器\n```java \nbtn.setOnLongClickListener(new View.OnLongClickListener() {\n    @Override\n    public boolean onLongClick(View view) {\n        txv.setText(\"OnLongClick\");\n            return false;\n    }\n});\n```\n\n1. 設置OnTouch監聽器\n```java\nbtn.setOnTouchListener(new View.OnTouchListener() {\n    @Override\n    public boolean onTouch(View view, MotionEvent motionEvent) {\n        txv.setText(\"OnTouch\");\n            return false;\n    }\n});\n```\n\n# 完整程式碼\n\n```java\npackage com.example.yr.helloworld;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    Button btn;\n    TextView txv;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        btn = (Button) findViewById(R.id.btn);\n        txv = (TextView) findViewById(R.id.textView);\n\n        btn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                txv.setText(\"OnClick\");\n            }\n        });\n\n        btn.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View view) {\n                txv.setText(\"OnLongClick\");\n                return false;\n            }\n        });\n\n        btn.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                txv.setText(\"OnTouch\");\n                return false;\n            }\n        });\n    }\n}\n```\n","slug":"按鈕監聽器","published":1,"updated":"2024-02-24T08:06:01.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myih0018k0jf2b3j2nos","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=341\">https://blog.cmrdb.cs.pu.edu.tw/?p=341</a></li>\n</ul>\n<p>雖然上次介紹了Kotlin，但目前開發Android大部分還是以Java為主，今天就要教大家用程式碼控制TextView的文字內容，主要是介紹按鈕(Button)的監聽器(Listener)控制。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"監聽器\"><a href=\"#監聽器\" class=\"headerlink\" title=\"監聽器\"></a>監聽器</h1><p>常見的監聽器有幾個 </p>\n<blockquote>\n<p>之間差別可以參考 : <a href=\"http://blog.csdn.net/eclipsexys/article/details/8785149\">http://blog.csdn.net/eclipsexys/article/details/8785149</a> </p>\n</blockquote>\n<ul>\n<li><code>OnClickListener</code> (點擊) : 在手指<strong>按下再放開</strong>後才執行</li>\n<li><code>OnLongClickListener</code> (長按) : 手指按住不放時執行</li>\n<li><code>OnTouchListener</code> (觸碰) : 手指一碰到按鈕就執行，與OnClick不同的是不需等到手指放開</li>\n</ul>\n<h1 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h1><p>首先建立一個新專案( <a href=\"http://blog.cmrdb.cs.pu.edu.tw/?p=291\">可以參考上次的文章</a> )</p>\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><p>在畫面上新增一個TextView、一個Button<br><img src=\"/2017/08/30/%E6%8C%89%E9%88%95%E7%9B%A3%E8%81%BD%E5%99%A8/image.png\" alt=\"image\"> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.helloworld.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:textSize=&quot;30dp&quot;</span><br><span class=\"line\">        android:text=&quot;TextView&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=&quot;@+id/btn&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:text=&quot;Button&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><ol>\n<li><p>宣告 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button btn;</span><br><span class=\"line\">TextView txv;</span><br></pre></td></tr></table></figure></li>\n<li><p>與畫面物件配對</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn = (Button) findViewById(R.id.btn);</span><br><span class=\"line\">txv = (TextView) findViewById(R.id.textView);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnClick監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnClick&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnLongClick監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnLongClickListener(<span class=\"keyword\">new</span> View.OnLongClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnLongClick&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnTouch監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnTouch&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"完整程式碼\"><a href=\"#完整程式碼\" class=\"headerlink\" title=\"完整程式碼\"></a>完整程式碼</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.yr.helloworld;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button btn;</span><br><span class=\"line\">    TextView txv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        btn = (Button) findViewById(R.id.btn);</span><br><span class=\"line\">        txv = (TextView) findViewById(R.id.textView);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnClick&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnLongClickListener(<span class=\"keyword\">new</span> View.OnLongClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnLongClick&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnTouch&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=341\">https://blog.cmrdb.cs.pu.edu.tw/?p=341</a></li>\n</ul>\n<p>雖然上次介紹了Kotlin，但目前開發Android大部分還是以Java為主，今天就要教大家用程式碼控制TextView的文字內容，主要是介紹按鈕(Button)的監聽器(Listener)控制。</p>","more":"<h1 id=\"監聽器\"><a href=\"#監聽器\" class=\"headerlink\" title=\"監聽器\"></a>監聽器</h1><p>常見的監聽器有幾個 </p>\n<blockquote>\n<p>之間差別可以參考 : <a href=\"http://blog.csdn.net/eclipsexys/article/details/8785149\">http://blog.csdn.net/eclipsexys/article/details/8785149</a> </p>\n</blockquote>\n<ul>\n<li><code>OnClickListener</code> (點擊) : 在手指<strong>按下再放開</strong>後才執行</li>\n<li><code>OnLongClickListener</code> (長按) : 手指按住不放時執行</li>\n<li><code>OnTouchListener</code> (觸碰) : 手指一碰到按鈕就執行，與OnClick不同的是不需等到手指放開</li>\n</ul>\n<h1 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h1><p>首先建立一個新專案( <a href=\"http://blog.cmrdb.cs.pu.edu.tw/?p=291\">可以參考上次的文章</a> )</p>\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><p>在畫面上新增一個TextView、一個Button<br><img src=\"/2017/08/30/%E6%8C%89%E9%88%95%E7%9B%A3%E8%81%BD%E5%99%A8/image.png\" alt=\"image\"> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.helloworld.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:textSize=&quot;30dp&quot;</span><br><span class=\"line\">        android:text=&quot;TextView&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=&quot;@+id/btn&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">            android:text=&quot;Button&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><ol>\n<li><p>宣告 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button btn;</span><br><span class=\"line\">TextView txv;</span><br></pre></td></tr></table></figure></li>\n<li><p>與畫面物件配對</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn = (Button) findViewById(R.id.btn);</span><br><span class=\"line\">txv = (TextView) findViewById(R.id.textView);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnClick監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnClick&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnLongClick監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnLongClickListener(<span class=\"keyword\">new</span> View.OnLongClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnLongClick&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>設置OnTouch監聽器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        txv.setText(<span class=\"string\">&quot;OnTouch&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"完整程式碼\"><a href=\"#完整程式碼\" class=\"headerlink\" title=\"完整程式碼\"></a>完整程式碼</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.yr.helloworld;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button btn;</span><br><span class=\"line\">    TextView txv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        btn = (Button) findViewById(R.id.btn);</span><br><span class=\"line\">        txv = (TextView) findViewById(R.id.textView);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnClick&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnLongClickListener(<span class=\"keyword\">new</span> View.OnLongClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnLongClick&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">                txv.setText(<span class=\"string\">&quot;OnTouch&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[結論] 總整理與建議","date":"2021-10-14T13:41:26.000Z","_content":"\n台灣老年人口的比例越來越高，隨之而來的便是民眾對長照的需求。政府提出了長照 2.0 的計畫，資源與服務眾多，申請方式與條件卻不見得大家都清楚。因此希望藉由 Zenbo 可愛的外型減少長者對 3C 產品的抗拒，語音對話的方式增加易用性，期盼透過「長照小幫手」建立一個讓長者更友善取得長照資訊的方式。\n<!-- more -->\n\n# 研究統整\n![摘要心智圖](摘要心智圖.png)\n\n- **長照問答集**：本研究蒐集網路上的問答資料，整理成問答集，實作並串接聊天機器人，讓民眾可以輕鬆的透過自然語言問答，得到相關的長照資訊。將問答組合分類，幫助使用者更準確地找到符合期待的問答組合。後端系統將詞語與實體對應，也可以使程式比對問句時，更貼近使用者意圖。\n\n- **Zenbo**：近年雖科技發展快速且教育普及，但仍有部分長者不識字或不習慣使用電子產品吸收資訊。為了解決這些長者的需求，因此本研究使用 Zenbo 機器人作為與使用者互動的介面，可愛的外型增加了親切感，也設計了一套APP，使長者可以透過語音的方式與聊天機器人互動。一開始我們使用華碩的 Zenbo SDK 來做語音識別與輸出的部分，但因為發現 Zenbo 無法清楚辨識指令與唸錯破音字的一些問題，所以改選用Android 提供的兩個函式庫 RecognizerIntent 與 TextToSpeech。 \n\n- **CKIP 斷詞工具**：本研究比較兩種斷詞方式，分別是來自中國的 Jieba 與中研院推出 CKIP，發現中研院的 CKIP 是較適合台灣長照相關資料的斷詞方式。 \n\n- **爬蟲**：相比人工的方式，使用爬蟲程式蒐集長照相關的問答資料集，可以自動化地快速擷取所需資料。\n\n- **TF-IDF 演算法**：我們使用 TF-IDF 演算法建立長照問答集的模型，使用餘弦相似性比對使用者的問句和長照問答集。結合 CKIP 斷詞方式，實作了一套可以比對輸入語句和資料集中問答組合的系統。\n\n- **回饋機制**：使用者的問題各式各樣，難免有對應不到的時候，所以我們也提供回饋機制，主動蒐集，使用者若無法找到自己想知道的問題時，便會自動記錄資訊，當作以後擴增和優化的依據。 \n\n本研究亦搭配 API，讓 APP 端可以方便取得最相似問答組合。使用者端的操作介面，以簡單和大字型為重點，方便長者操作。機器人會自動將回覆內容唸出來，就像有專人回答一樣。最後，本研究的目標是期望「藉由科技，建立一個讓長者更容易取得長照資訊的方式」。\n\n# 給未來研究者的建議\n1. 因本系統在執行 API 時，每次都需要把整個斷詞和建立 TF-IDF 的模型的部分執行一遍，經過測試大約耗時 5~8 秒，對使用者體驗不佳，未來可以針對這部分改善。\n2. 本研究嘗試過使用 K-means 分類問答組合，但發現程式的分類方式並不一定適合人類。建議未來可嘗試用其他人工智慧方式，讓分類問答組合自動化，減少維運人員負擔。\n3. 長者慣用語言多為台語，未來可加入台語的語音識別與輸出，更方便長者使用。\n\n# 鐵人賽系列文章目錄\n![鐵人賽](鐵人賽.jpg)\n\n# 結語\n30 天鐵人賽，終於完賽啦~~","source":"_posts/結論-總整理與建議.md","raw":"---\ntitle: '[結論] 總整理與建議'\ndate: 2021-10-14 21:41:26\ntags:\n- 13th鐵人賽\n- 長照\n- 聊天機器人\n---\n\n台灣老年人口的比例越來越高，隨之而來的便是民眾對長照的需求。政府提出了長照 2.0 的計畫，資源與服務眾多，申請方式與條件卻不見得大家都清楚。因此希望藉由 Zenbo 可愛的外型減少長者對 3C 產品的抗拒，語音對話的方式增加易用性，期盼透過「長照小幫手」建立一個讓長者更友善取得長照資訊的方式。\n<!-- more -->\n\n# 研究統整\n![摘要心智圖](摘要心智圖.png)\n\n- **長照問答集**：本研究蒐集網路上的問答資料，整理成問答集，實作並串接聊天機器人，讓民眾可以輕鬆的透過自然語言問答，得到相關的長照資訊。將問答組合分類，幫助使用者更準確地找到符合期待的問答組合。後端系統將詞語與實體對應，也可以使程式比對問句時，更貼近使用者意圖。\n\n- **Zenbo**：近年雖科技發展快速且教育普及，但仍有部分長者不識字或不習慣使用電子產品吸收資訊。為了解決這些長者的需求，因此本研究使用 Zenbo 機器人作為與使用者互動的介面，可愛的外型增加了親切感，也設計了一套APP，使長者可以透過語音的方式與聊天機器人互動。一開始我們使用華碩的 Zenbo SDK 來做語音識別與輸出的部分，但因為發現 Zenbo 無法清楚辨識指令與唸錯破音字的一些問題，所以改選用Android 提供的兩個函式庫 RecognizerIntent 與 TextToSpeech。 \n\n- **CKIP 斷詞工具**：本研究比較兩種斷詞方式，分別是來自中國的 Jieba 與中研院推出 CKIP，發現中研院的 CKIP 是較適合台灣長照相關資料的斷詞方式。 \n\n- **爬蟲**：相比人工的方式，使用爬蟲程式蒐集長照相關的問答資料集，可以自動化地快速擷取所需資料。\n\n- **TF-IDF 演算法**：我們使用 TF-IDF 演算法建立長照問答集的模型，使用餘弦相似性比對使用者的問句和長照問答集。結合 CKIP 斷詞方式，實作了一套可以比對輸入語句和資料集中問答組合的系統。\n\n- **回饋機制**：使用者的問題各式各樣，難免有對應不到的時候，所以我們也提供回饋機制，主動蒐集，使用者若無法找到自己想知道的問題時，便會自動記錄資訊，當作以後擴增和優化的依據。 \n\n本研究亦搭配 API，讓 APP 端可以方便取得最相似問答組合。使用者端的操作介面，以簡單和大字型為重點，方便長者操作。機器人會自動將回覆內容唸出來，就像有專人回答一樣。最後，本研究的目標是期望「藉由科技，建立一個讓長者更容易取得長照資訊的方式」。\n\n# 給未來研究者的建議\n1. 因本系統在執行 API 時，每次都需要把整個斷詞和建立 TF-IDF 的模型的部分執行一遍，經過測試大約耗時 5~8 秒，對使用者體驗不佳，未來可以針對這部分改善。\n2. 本研究嘗試過使用 K-means 分類問答組合，但發現程式的分類方式並不一定適合人類。建議未來可嘗試用其他人工智慧方式，讓分類問答組合自動化，減少維運人員負擔。\n3. 長者慣用語言多為台語，未來可加入台語的語音識別與輸出，更方便長者使用。\n\n# 鐵人賽系列文章目錄\n![鐵人賽](鐵人賽.jpg)\n\n# 結語\n30 天鐵人賽，終於完賽啦~~","slug":"結論-總整理與建議","published":1,"updated":"2024-02-24T08:06:01.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myih0019k0jf6pbj1qiu","content":"<p>台灣老年人口的比例越來越高，隨之而來的便是民眾對長照的需求。政府提出了長照 2.0 的計畫，資源與服務眾多，申請方式與條件卻不見得大家都清楚。因此希望藉由 Zenbo 可愛的外型減少長者對 3C 產品的抗拒，語音對話的方式增加易用性，期盼透過「長照小幫手」建立一個讓長者更友善取得長照資訊的方式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"研究統整\"><a href=\"#研究統整\" class=\"headerlink\" title=\"研究統整\"></a>研究統整</h1><p><img src=\"/2021/10/14/%E7%B5%90%EF%A5%81-%E7%B8%BD%E6%95%B4%E7%90%86%E8%88%87%E5%BB%BA%E8%AD%B0/%E6%91%98%E8%A6%81%E5%BF%83%E6%99%BA%E5%9C%96.png\" alt=\"摘要心智圖\"></p>\n<ul>\n<li><p><strong>長照問答集</strong>：本研究蒐集網路上的問答資料，整理成問答集，實作並串接聊天機器人，讓民眾可以輕鬆的透過自然語言問答，得到相關的長照資訊。將問答組合分類，幫助使用者更準確地找到符合期待的問答組合。後端系統將詞語與實體對應，也可以使程式比對問句時，更貼近使用者意圖。</p>\n</li>\n<li><p><strong>Zenbo</strong>：近年雖科技發展快速且教育普及，但仍有部分長者不識字或不習慣使用電子產品吸收資訊。為了解決這些長者的需求，因此本研究使用 Zenbo 機器人作為與使用者互動的介面，可愛的外型增加了親切感，也設計了一套APP，使長者可以透過語音的方式與聊天機器人互動。一開始我們使用華碩的 Zenbo SDK 來做語音識別與輸出的部分，但因為發現 Zenbo 無法清楚辨識指令與唸錯破音字的一些問題，所以改選用Android 提供的兩個函式庫 RecognizerIntent 與 TextToSpeech。 </p>\n</li>\n<li><p><strong>CKIP 斷詞工具</strong>：本研究比較兩種斷詞方式，分別是來自中國的 Jieba 與中研院推出 CKIP，發現中研院的 CKIP 是較適合台灣長照相關資料的斷詞方式。 </p>\n</li>\n<li><p><strong>爬蟲</strong>：相比人工的方式，使用爬蟲程式蒐集長照相關的問答資料集，可以自動化地快速擷取所需資料。</p>\n</li>\n<li><p><strong>TF-IDF 演算法</strong>：我們使用 TF-IDF 演算法建立長照問答集的模型，使用餘弦相似性比對使用者的問句和長照問答集。結合 CKIP 斷詞方式，實作了一套可以比對輸入語句和資料集中問答組合的系統。</p>\n</li>\n<li><p><strong>回饋機制</strong>：使用者的問題各式各樣，難免有對應不到的時候，所以我們也提供回饋機制，主動蒐集，使用者若無法找到自己想知道的問題時，便會自動記錄資訊，當作以後擴增和優化的依據。 </p>\n</li>\n</ul>\n<p>本研究亦搭配 API，讓 APP 端可以方便取得最相似問答組合。使用者端的操作介面，以簡單和大字型為重點，方便長者操作。機器人會自動將回覆內容唸出來，就像有專人回答一樣。最後，本研究的目標是期望「藉由科技，建立一個讓長者更容易取得長照資訊的方式」。</p>\n<h1 id=\"給未來研究者的建議\"><a href=\"#給未來研究者的建議\" class=\"headerlink\" title=\"給未來研究者的建議\"></a>給未來研究者的建議</h1><ol>\n<li>因本系統在執行 API 時，每次都需要把整個斷詞和建立 TF-IDF 的模型的部分執行一遍，經過測試大約耗時 5~8 秒，對使用者體驗不佳，未來可以針對這部分改善。</li>\n<li>本研究嘗試過使用 K-means 分類問答組合，但發現程式的分類方式並不一定適合人類。建議未來可嘗試用其他人工智慧方式，讓分類問答組合自動化，減少維運人員負擔。</li>\n<li>長者慣用語言多為台語，未來可加入台語的語音識別與輸出，更方便長者使用。</li>\n</ol>\n<h1 id=\"鐵人賽系列文章目錄\"><a href=\"#鐵人賽系列文章目錄\" class=\"headerlink\" title=\"鐵人賽系列文章目錄\"></a>鐵人賽系列文章目錄</h1><p><img src=\"/2021/10/14/%E7%B5%90%EF%A5%81-%E7%B8%BD%E6%95%B4%E7%90%86%E8%88%87%E5%BB%BA%E8%AD%B0/%E9%90%B5%E4%BA%BA%E8%B3%BD.jpg\" alt=\"鐵人賽\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>30 天鐵人賽，終於完賽啦~~</p>\n","site":{"data":{}},"excerpt":"<p>台灣老年人口的比例越來越高，隨之而來的便是民眾對長照的需求。政府提出了長照 2.0 的計畫，資源與服務眾多，申請方式與條件卻不見得大家都清楚。因此希望藉由 Zenbo 可愛的外型減少長者對 3C 產品的抗拒，語音對話的方式增加易用性，期盼透過「長照小幫手」建立一個讓長者更友善取得長照資訊的方式。</p>","more":"<h1 id=\"研究統整\"><a href=\"#研究統整\" class=\"headerlink\" title=\"研究統整\"></a>研究統整</h1><p><img src=\"/2021/10/14/%E7%B5%90%EF%A5%81-%E7%B8%BD%E6%95%B4%E7%90%86%E8%88%87%E5%BB%BA%E8%AD%B0/%E6%91%98%E8%A6%81%E5%BF%83%E6%99%BA%E5%9C%96.png\" alt=\"摘要心智圖\"></p>\n<ul>\n<li><p><strong>長照問答集</strong>：本研究蒐集網路上的問答資料，整理成問答集，實作並串接聊天機器人，讓民眾可以輕鬆的透過自然語言問答，得到相關的長照資訊。將問答組合分類，幫助使用者更準確地找到符合期待的問答組合。後端系統將詞語與實體對應，也可以使程式比對問句時，更貼近使用者意圖。</p>\n</li>\n<li><p><strong>Zenbo</strong>：近年雖科技發展快速且教育普及，但仍有部分長者不識字或不習慣使用電子產品吸收資訊。為了解決這些長者的需求，因此本研究使用 Zenbo 機器人作為與使用者互動的介面，可愛的外型增加了親切感，也設計了一套APP，使長者可以透過語音的方式與聊天機器人互動。一開始我們使用華碩的 Zenbo SDK 來做語音識別與輸出的部分，但因為發現 Zenbo 無法清楚辨識指令與唸錯破音字的一些問題，所以改選用Android 提供的兩個函式庫 RecognizerIntent 與 TextToSpeech。 </p>\n</li>\n<li><p><strong>CKIP 斷詞工具</strong>：本研究比較兩種斷詞方式，分別是來自中國的 Jieba 與中研院推出 CKIP，發現中研院的 CKIP 是較適合台灣長照相關資料的斷詞方式。 </p>\n</li>\n<li><p><strong>爬蟲</strong>：相比人工的方式，使用爬蟲程式蒐集長照相關的問答資料集，可以自動化地快速擷取所需資料。</p>\n</li>\n<li><p><strong>TF-IDF 演算法</strong>：我們使用 TF-IDF 演算法建立長照問答集的模型，使用餘弦相似性比對使用者的問句和長照問答集。結合 CKIP 斷詞方式，實作了一套可以比對輸入語句和資料集中問答組合的系統。</p>\n</li>\n<li><p><strong>回饋機制</strong>：使用者的問題各式各樣，難免有對應不到的時候，所以我們也提供回饋機制，主動蒐集，使用者若無法找到自己想知道的問題時，便會自動記錄資訊，當作以後擴增和優化的依據。 </p>\n</li>\n</ul>\n<p>本研究亦搭配 API，讓 APP 端可以方便取得最相似問答組合。使用者端的操作介面，以簡單和大字型為重點，方便長者操作。機器人會自動將回覆內容唸出來，就像有專人回答一樣。最後，本研究的目標是期望「藉由科技，建立一個讓長者更容易取得長照資訊的方式」。</p>\n<h1 id=\"給未來研究者的建議\"><a href=\"#給未來研究者的建議\" class=\"headerlink\" title=\"給未來研究者的建議\"></a>給未來研究者的建議</h1><ol>\n<li>因本系統在執行 API 時，每次都需要把整個斷詞和建立 TF-IDF 的模型的部分執行一遍，經過測試大約耗時 5~8 秒，對使用者體驗不佳，未來可以針對這部分改善。</li>\n<li>本研究嘗試過使用 K-means 分類問答組合，但發現程式的分類方式並不一定適合人類。建議未來可嘗試用其他人工智慧方式，讓分類問答組合自動化，減少維運人員負擔。</li>\n<li>長者慣用語言多為台語，未來可加入台語的語音識別與輸出，更方便長者使用。</li>\n</ol>\n<h1 id=\"鐵人賽系列文章目錄\"><a href=\"#鐵人賽系列文章目錄\" class=\"headerlink\" title=\"鐵人賽系列文章目錄\"></a>鐵人賽系列文章目錄</h1><p><img src=\"/2021/10/14/%E7%B5%90%EF%A5%81-%E7%B8%BD%E6%95%B4%E7%90%86%E8%88%87%E5%BB%BA%E8%AD%B0/%E9%90%B5%E4%BA%BA%E8%B3%BD.jpg\" alt=\"鐵人賽\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>30 天鐵人賽，終於完賽啦~~</p>"},{"title":"第一個 Kotlin 專案","date":"2017-07-10T12:43:00.000Z","_content":"\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=291](https://blog.cmrdb.cs.pu.edu.tw/?p=291)\n\n2020/11/09 更新:\n現在的 Android Studio 安裝時，都附帶有 Kotlin 了，不需要再另外安裝。\n<!-- more -->\n---\n\n在Google I/O 2017 開發者大會中，Kotlin已被宣布成為Android 程式的官方一級開發語言（First-class language）。Android Studio 3.0之後的版本更直接內建支援Kotlin。\n\nKotlin能與Java在專案中並存，讓開發者能保有原本的專案，也能以Kotlin繼續開發。 \n\n# 安裝外掛\n由於目前的Android Studio還沒內建支援Kotlin，所以我們要安裝Plugin\n\n1. 點選右下 Configure > Plugins\n    ![image13](image13.png) \n\n1. 點選 Browse repositories...\n    ![image12](image12.png) \n\n1. 搜尋 Kotlin\n    ![image11](image11.png) \n\n1. 點選 Install，安裝完成後點 Restart Android Studio，重新開啟 Android Studio\n    ![image10](image10.png) \n\n# 第一支Kotlin程式\n\n1. 開新專案\n    ![image8](image8.png) \n    ![image7](image7.png) \n    ![image6](image6.png) \n\n2. 目前的專案還是Java\n    ![image5](image5.png) \n\n1. 接著我們要把 Java 轉換成 Kotlin，點選上方工具列中 Code > Convert Java File to Kotlin File\n    ![image4](image4.png) \n\n1. 稍待幾秒鐘，轉換完成!!\n    ![image3](image3.png) \n\n1. 在 activity_main.xml 中新增一個 Button 和 TextView\n    ![image2](image2.png) \n\n1. 切換至 MainActivity.kt，宣告變數\n```kotlin\nvar btn = findViewById(R.id.button) as Button\nvar txv = findViewById(R.id.textView) as TextView\n```\n\n1. 設置監聽器，改變TextView文字內容\n```kotlin\nbtn.setOnClickListener { \n            txv.setText(\"Hello World !\")\n}\n```\n\n1. 執行畫面參考\n    ![image1](image1.png) \n    ![image](image.png) \n\n# 程式碼參考\n\n- activity_main.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.kotlinfirst.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"TextView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\" />\n\n</LinearLayout>\n```\n\n- MainActivity.kt\n\n```kotlin\npackage com.example.yr.kotlinfirst\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.widget.Button\nimport android.widget.TextView\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        var btn = findViewById(R.id.button) as Button\n        var txv = findViewById(R.id.textView) as TextView\n\n        btn.setOnClickListener {\n            txv.setText(\"Hello World !\")\n        }\n    }\n}\n```\n","source":"_posts/第一個-Kotlin-專案.md","raw":"---\ntitle: 第一個 Kotlin 專案\ndate: 2017-07-10 20:43:00\ntags:\n- Kotlin\n- Android\n- 行雲部落格\n---\n\n* 本文曾發佈在 [https://blog.cmrdb.cs.pu.edu.tw/?p=291](https://blog.cmrdb.cs.pu.edu.tw/?p=291)\n\n2020/11/09 更新:\n現在的 Android Studio 安裝時，都附帶有 Kotlin 了，不需要再另外安裝。\n<!-- more -->\n---\n\n在Google I/O 2017 開發者大會中，Kotlin已被宣布成為Android 程式的官方一級開發語言（First-class language）。Android Studio 3.0之後的版本更直接內建支援Kotlin。\n\nKotlin能與Java在專案中並存，讓開發者能保有原本的專案，也能以Kotlin繼續開發。 \n\n# 安裝外掛\n由於目前的Android Studio還沒內建支援Kotlin，所以我們要安裝Plugin\n\n1. 點選右下 Configure > Plugins\n    ![image13](image13.png) \n\n1. 點選 Browse repositories...\n    ![image12](image12.png) \n\n1. 搜尋 Kotlin\n    ![image11](image11.png) \n\n1. 點選 Install，安裝完成後點 Restart Android Studio，重新開啟 Android Studio\n    ![image10](image10.png) \n\n# 第一支Kotlin程式\n\n1. 開新專案\n    ![image8](image8.png) \n    ![image7](image7.png) \n    ![image6](image6.png) \n\n2. 目前的專案還是Java\n    ![image5](image5.png) \n\n1. 接著我們要把 Java 轉換成 Kotlin，點選上方工具列中 Code > Convert Java File to Kotlin File\n    ![image4](image4.png) \n\n1. 稍待幾秒鐘，轉換完成!!\n    ![image3](image3.png) \n\n1. 在 activity_main.xml 中新增一個 Button 和 TextView\n    ![image2](image2.png) \n\n1. 切換至 MainActivity.kt，宣告變數\n```kotlin\nvar btn = findViewById(R.id.button) as Button\nvar txv = findViewById(R.id.textView) as TextView\n```\n\n1. 設置監聽器，改變TextView文字內容\n```kotlin\nbtn.setOnClickListener { \n            txv.setText(\"Hello World !\")\n}\n```\n\n1. 執行畫面參考\n    ![image1](image1.png) \n    ![image](image.png) \n\n# 程式碼參考\n\n- activity_main.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.example.yr.kotlinfirst.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"TextView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\" />\n\n</LinearLayout>\n```\n\n- MainActivity.kt\n\n```kotlin\npackage com.example.yr.kotlinfirst\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.widget.Button\nimport android.widget.TextView\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        var btn = findViewById(R.id.button) as Button\n        var txv = findViewById(R.id.textView) as TextView\n\n        btn.setOnClickListener {\n            txv.setText(\"Hello World !\")\n        }\n    }\n}\n```\n","slug":"第一個-Kotlin-專案","published":1,"updated":"2024-02-24T08:06:01.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myih001ak0jf6oj2g9dp","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=291\">https://blog.cmrdb.cs.pu.edu.tw/?p=291</a></li>\n</ul>\n<p>2020/11/09 更新:<br>現在的 Android Studio 安裝時，都附帶有 Kotlin 了，不需要再另外安裝。</p>\n<span id=\"more\"></span>\n<hr>\n<p>在Google I/O 2017 開發者大會中，Kotlin已被宣布成為Android 程式的官方一級開發語言（First-class language）。Android Studio 3.0之後的版本更直接內建支援Kotlin。</p>\n<p>Kotlin能與Java在專案中並存，讓開發者能保有原本的專案，也能以Kotlin繼續開發。 </p>\n<h1 id=\"安裝外掛\"><a href=\"#安裝外掛\" class=\"headerlink\" title=\"安裝外掛\"></a>安裝外掛</h1><p>由於目前的Android Studio還沒內建支援Kotlin，所以我們要安裝Plugin</p>\n<ol>\n<li><p>點選右下 Configure &gt; Plugins<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image13.png\" alt=\"image13\"> </p>\n</li>\n<li><p>點選 Browse repositories…<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image12.png\" alt=\"image12\"> </p>\n</li>\n<li><p>搜尋 Kotlin<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image11.png\" alt=\"image11\"> </p>\n</li>\n<li><p>點選 Install，安裝完成後點 Restart Android Studio，重新開啟 Android Studio<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image10.png\" alt=\"image10\"> </p>\n</li>\n</ol>\n<h1 id=\"第一支Kotlin程式\"><a href=\"#第一支Kotlin程式\" class=\"headerlink\" title=\"第一支Kotlin程式\"></a>第一支Kotlin程式</h1><ol>\n<li><p>開新專案<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image8.png\" alt=\"image8\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image7.png\" alt=\"image7\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image6.png\" alt=\"image6\"> </p>\n</li>\n<li><p>目前的專案還是Java<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image5.png\" alt=\"image5\"> </p>\n</li>\n<li><p>接著我們要把 Java 轉換成 Kotlin，點選上方工具列中 Code &gt; Convert Java File to Kotlin File<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image4.png\" alt=\"image4\"> </p>\n</li>\n<li><p>稍待幾秒鐘，轉換完成!!<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image3.png\" alt=\"image3\"> </p>\n</li>\n<li><p>在 activity_main.xml 中新增一個 Button 和 TextView<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image2.png\" alt=\"image2\"> </p>\n</li>\n<li><p>切換至 MainActivity.kt，宣告變數</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = findViewById(R.id.button) <span class=\"keyword\">as</span> Button</span><br><span class=\"line\"><span class=\"keyword\">var</span> txv = findViewById(R.id.textView) <span class=\"keyword\">as</span> TextView</span><br></pre></td></tr></table></figure></li>\n<li><p>設置監聽器，改變TextView文字內容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener &#123; </span><br><span class=\"line\">            txv.setText(<span class=\"string\">&quot;Hello World !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>執行畫面參考<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image1.png\" alt=\"image1\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image.png\" alt=\"image\"> </p>\n</li>\n</ol>\n<h1 id=\"程式碼參考\"><a href=\"#程式碼參考\" class=\"headerlink\" title=\"程式碼參考\"></a>程式碼參考</h1><ul>\n<li>activity_main.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.kotlinfirst.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;TextView&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Button&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>MainActivity.kt</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.yr.kotlinfirst</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> btn = findViewById(R.id.button) <span class=\"keyword\">as</span> Button</span><br><span class=\"line\">        <span class=\"keyword\">var</span> txv = findViewById(R.id.textView) <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnClickListener &#123;</span><br><span class=\"line\">            txv.setText(<span class=\"string\">&quot;Hello World !&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://blog.cmrdb.cs.pu.edu.tw/?p=291\">https://blog.cmrdb.cs.pu.edu.tw/?p=291</a></li>\n</ul>\n<p>2020/11/09 更新:<br>現在的 Android Studio 安裝時，都附帶有 Kotlin 了，不需要再另外安裝。</p>","more":"<hr>\n<p>在Google I/O 2017 開發者大會中，Kotlin已被宣布成為Android 程式的官方一級開發語言（First-class language）。Android Studio 3.0之後的版本更直接內建支援Kotlin。</p>\n<p>Kotlin能與Java在專案中並存，讓開發者能保有原本的專案，也能以Kotlin繼續開發。 </p>\n<h1 id=\"安裝外掛\"><a href=\"#安裝外掛\" class=\"headerlink\" title=\"安裝外掛\"></a>安裝外掛</h1><p>由於目前的Android Studio還沒內建支援Kotlin，所以我們要安裝Plugin</p>\n<ol>\n<li><p>點選右下 Configure &gt; Plugins<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image13.png\" alt=\"image13\"> </p>\n</li>\n<li><p>點選 Browse repositories…<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image12.png\" alt=\"image12\"> </p>\n</li>\n<li><p>搜尋 Kotlin<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image11.png\" alt=\"image11\"> </p>\n</li>\n<li><p>點選 Install，安裝完成後點 Restart Android Studio，重新開啟 Android Studio<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image10.png\" alt=\"image10\"> </p>\n</li>\n</ol>\n<h1 id=\"第一支Kotlin程式\"><a href=\"#第一支Kotlin程式\" class=\"headerlink\" title=\"第一支Kotlin程式\"></a>第一支Kotlin程式</h1><ol>\n<li><p>開新專案<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image8.png\" alt=\"image8\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image7.png\" alt=\"image7\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image6.png\" alt=\"image6\"> </p>\n</li>\n<li><p>目前的專案還是Java<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image5.png\" alt=\"image5\"> </p>\n</li>\n<li><p>接著我們要把 Java 轉換成 Kotlin，點選上方工具列中 Code &gt; Convert Java File to Kotlin File<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image4.png\" alt=\"image4\"> </p>\n</li>\n<li><p>稍待幾秒鐘，轉換完成!!<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image3.png\" alt=\"image3\"> </p>\n</li>\n<li><p>在 activity_main.xml 中新增一個 Button 和 TextView<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image2.png\" alt=\"image2\"> </p>\n</li>\n<li><p>切換至 MainActivity.kt，宣告變數</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = findViewById(R.id.button) <span class=\"keyword\">as</span> Button</span><br><span class=\"line\"><span class=\"keyword\">var</span> txv = findViewById(R.id.textView) <span class=\"keyword\">as</span> TextView</span><br></pre></td></tr></table></figure></li>\n<li><p>設置監聽器，改變TextView文字內容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener &#123; </span><br><span class=\"line\">            txv.setText(<span class=\"string\">&quot;Hello World !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>執行畫面參考<br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image1.png\" alt=\"image1\"><br> <img src=\"/2017/07/10/%E7%AC%AC%E4%B8%80%E5%80%8B-Kotlin-%E5%B0%88%E6%A1%88/image.png\" alt=\"image\"> </p>\n</li>\n</ol>\n<h1 id=\"程式碼參考\"><a href=\"#程式碼參考\" class=\"headerlink\" title=\"程式碼參考\"></a>程式碼參考</h1><ul>\n<li>activity_main.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;com.example.yr.kotlinfirst.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;TextView&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Button&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>MainActivity.kt</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.yr.kotlinfirst</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> btn = findViewById(R.id.button) <span class=\"keyword\">as</span> Button</span><br><span class=\"line\">        <span class=\"keyword\">var</span> txv = findViewById(R.id.textView) <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.setOnClickListener &#123;</span><br><span class=\"line\">            txv.setText(<span class=\"string\">&quot;Hello World !&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[緒論] 長照小幫手的背景與動機","date":"2021-09-02T10:13:20.000Z","_content":"\n大家好，其實這個長照小幫手是我的論文題目，所以這系列的多文章，會有一大部分來自簡化的論文內容，再加上一些沒有收錄進論文的研究心得。\n\n聊天機器人整套系統都是我一個人開發的，所以這系列文章應該會分為 Zenbo、爬蟲、TF-IDF、API、Android APP 幾個部分來介紹，之後會有一篇介紹整體系統架構。\n\n<!-- more -->\n# 背景\n\n台灣人口老化問題越來越嚴重，預估在 2025 年將進入「超高齡社會」（國家發展委員會，2020）。試著想像全台灣每五人就有一人是老人，比例真的很高，這也造成患有慢性病或失能等長者的照顧需求跟著提升。\n\n- 圖片取自（中華民國人口推估(2020 至2070 年)簡報, 2020）\n    ![人口老化](人口老化.png)\n\n## 動機\n政府提供了很多長照資源，但除了電視和鄰里長的宣傳，長者比較難有管道了解其他適合自己的長照資源。根據統計（財團法人台灣網路資訊中心，2019），台灣有10.8%的民眾未使用網路，且以60歲以上的年齡層居多，其中「**對電腦恐懼或不熟悉**」的理由就佔了27%。\n\n- 民眾未使用網路的原因，數據整理自 2019 台灣網路報告（財團法人台灣網路資訊中心，2019）\n    ![未使用網路原因](未使用網路原因.png)\n\n再加上，內政部統計（內政部統計處，2021），民國 109 年全國不識字的人口還有大概 20 萬，其中有 93% 是 65 歲以上長者。而不識字的老年人口約占全部老年人口的 5%。\n\n- 不識字人口，數據來自於內政部統計處\n    ![不識字人口](不識字人口.png)\n\n## 當前的問題\n我們有人口老化的問題，還有長者「對 3C 產品不熟悉」和「不識字比例高」，那我們該如何讓長者有機會了解政府提供的長照服務呢？\n\n因此我們決定選擇華碩推出的Zenbo機器人。Zenbo 可愛的外型與簡易口令的操作方式，可以降低長者對電子產品的恐懼。還有這次設計的聊天機器人特別加入語音控制功能，可以用語音輸入問句，機器人也會用語音回答。所以就算是不識字的長輩也能操作。\n\n同時，我們也找到另一份文獻（Mary C. Gilly & Valarie A. Zeithaml, 1985），他說老人傳統上被認為是比較抗拒改變的，但是當技術滿足他們的需求，並得到有效的溝通時，老年消費者確實願意改變。\n\n![長者該如何取得長照資訊](長者該如何取得長照資訊.png)\n\n# 走錯路的過程\n\n研究的過程中難免會寫到一半發現不合用的狀況嘛，所以整理一下不同技術的優缺，和我最後使用某個技術的原因。在後續的文章中可能會有比較詳細的說明😃。\n\n## 語音輸入與輸出 - Zenbo SDK vs Android Library\n一開始我使用的是 Zenbo SDK，為了讓 Zenbo 的語音、用字更符合台灣用法，華碩自行建立語音資料庫。但使用的過程中發現，Zenbo SDK 好像不太能處理破音字問題，加上念句子會跳字(某些字跳過沒唸)。所以我後來改用 Android 內建的 RecognizerIntent 和 TextToSpeech，雖然在句子比較複雜的時候，還是有機會唸錯破音字，但機率上好很多。\n\n## 語料模型 - DDE vs DialogFlow vs TF-IDF\n最一開始是使用 ASUS 提供的 DDE 工具，優點是安裝到 Zenob 比較方便，不須外另外串接 API。缺點是每個句子的 rule 都要手動建立，如果 rule 太寬鬆，input 可能會同時符合多個 rule，但是太嚴格，又可能 input 比對不到任何句子。\n\n再來考慮 Engati、DialogFlow 這類可以串接常用通訊軟體的平台，但是發現每個句子都還是要手動建立，我有快 500 個句子，會死掉吧。但是 DialogFlow 提供**模糊比對**，算是解決了 DDE rule 規劃的問題。如果你的句子不多，且又有條件判斷，那 DialogFlow 還是可以推，只是它不符合我這裡的使用。\n\n最後就剩自己建模型的路囉🙃，我的模型最後是選用 TF-IDF，主要程式碼是參考 [MorvanZhou/NLP-Tutorials](https://github.com/MorvanZhou/NLP-Tutorials)，再經過自己的修改。主要是因為研究 NLP 的時候發現主要都是關於句子生成的主題比較多，但我要的是比對句子的相似性，所以 TF-IDF 比較符合我的需求。\n\n## 斷字系統 - Jieba vs CKIP\nJieba 來自中國，CKIP 來自中研院，在使用內建斷詞字典的狀況下，有一些台灣的專有名詞或簡稱，CKIP 表現的比 Jieba 比較好。\n\n# 參考資料\n- 國家發展委員會（2020）。中華民國人口推估(2020 至2070 年)報告。臺北：國家發展委員會。檢自：https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf。\n- 國家發展委員會（2020）。中華民國人口推估(2020 至 2070 年)簡報。檢自：https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf。\n- 財團法人台灣網路資訊中心（2019）。2019 台灣網路報告。財團法人台灣網路資訊中心。檢自：https://report.twnic.tw/2019/。\n- Mary C. Gilly & Valarie A. Zeithaml. (1985). The Elderly Consumer and Adoption of Technologies. Journal of Consumer Research, 12(3), 353-357. DOI:10.1086/208521\n- 內政部統計處（2021）。 15 歲以上教育程度─按區域別、年齡別分. 內政統計查詢網。檢\n自：https://statis.moi.gov.tw/micst/stmain.jsp?sys=100。","source":"_posts/緒論-長照小幫手的背景與動機.md","raw":"---\ntitle: '[緒論] 長照小幫手的背景與動機'\ndate: 2021-09-02 18:13:20\ntags:\n- 13th鐵人賽\n- 長照\n- 聊天機器人\n---\n\n大家好，其實這個長照小幫手是我的論文題目，所以這系列的多文章，會有一大部分來自簡化的論文內容，再加上一些沒有收錄進論文的研究心得。\n\n聊天機器人整套系統都是我一個人開發的，所以這系列文章應該會分為 Zenbo、爬蟲、TF-IDF、API、Android APP 幾個部分來介紹，之後會有一篇介紹整體系統架構。\n\n<!-- more -->\n# 背景\n\n台灣人口老化問題越來越嚴重，預估在 2025 年將進入「超高齡社會」（國家發展委員會，2020）。試著想像全台灣每五人就有一人是老人，比例真的很高，這也造成患有慢性病或失能等長者的照顧需求跟著提升。\n\n- 圖片取自（中華民國人口推估(2020 至2070 年)簡報, 2020）\n    ![人口老化](人口老化.png)\n\n## 動機\n政府提供了很多長照資源，但除了電視和鄰里長的宣傳，長者比較難有管道了解其他適合自己的長照資源。根據統計（財團法人台灣網路資訊中心，2019），台灣有10.8%的民眾未使用網路，且以60歲以上的年齡層居多，其中「**對電腦恐懼或不熟悉**」的理由就佔了27%。\n\n- 民眾未使用網路的原因，數據整理自 2019 台灣網路報告（財團法人台灣網路資訊中心，2019）\n    ![未使用網路原因](未使用網路原因.png)\n\n再加上，內政部統計（內政部統計處，2021），民國 109 年全國不識字的人口還有大概 20 萬，其中有 93% 是 65 歲以上長者。而不識字的老年人口約占全部老年人口的 5%。\n\n- 不識字人口，數據來自於內政部統計處\n    ![不識字人口](不識字人口.png)\n\n## 當前的問題\n我們有人口老化的問題，還有長者「對 3C 產品不熟悉」和「不識字比例高」，那我們該如何讓長者有機會了解政府提供的長照服務呢？\n\n因此我們決定選擇華碩推出的Zenbo機器人。Zenbo 可愛的外型與簡易口令的操作方式，可以降低長者對電子產品的恐懼。還有這次設計的聊天機器人特別加入語音控制功能，可以用語音輸入問句，機器人也會用語音回答。所以就算是不識字的長輩也能操作。\n\n同時，我們也找到另一份文獻（Mary C. Gilly & Valarie A. Zeithaml, 1985），他說老人傳統上被認為是比較抗拒改變的，但是當技術滿足他們的需求，並得到有效的溝通時，老年消費者確實願意改變。\n\n![長者該如何取得長照資訊](長者該如何取得長照資訊.png)\n\n# 走錯路的過程\n\n研究的過程中難免會寫到一半發現不合用的狀況嘛，所以整理一下不同技術的優缺，和我最後使用某個技術的原因。在後續的文章中可能會有比較詳細的說明😃。\n\n## 語音輸入與輸出 - Zenbo SDK vs Android Library\n一開始我使用的是 Zenbo SDK，為了讓 Zenbo 的語音、用字更符合台灣用法，華碩自行建立語音資料庫。但使用的過程中發現，Zenbo SDK 好像不太能處理破音字問題，加上念句子會跳字(某些字跳過沒唸)。所以我後來改用 Android 內建的 RecognizerIntent 和 TextToSpeech，雖然在句子比較複雜的時候，還是有機會唸錯破音字，但機率上好很多。\n\n## 語料模型 - DDE vs DialogFlow vs TF-IDF\n最一開始是使用 ASUS 提供的 DDE 工具，優點是安裝到 Zenob 比較方便，不須外另外串接 API。缺點是每個句子的 rule 都要手動建立，如果 rule 太寬鬆，input 可能會同時符合多個 rule，但是太嚴格，又可能 input 比對不到任何句子。\n\n再來考慮 Engati、DialogFlow 這類可以串接常用通訊軟體的平台，但是發現每個句子都還是要手動建立，我有快 500 個句子，會死掉吧。但是 DialogFlow 提供**模糊比對**，算是解決了 DDE rule 規劃的問題。如果你的句子不多，且又有條件判斷，那 DialogFlow 還是可以推，只是它不符合我這裡的使用。\n\n最後就剩自己建模型的路囉🙃，我的模型最後是選用 TF-IDF，主要程式碼是參考 [MorvanZhou/NLP-Tutorials](https://github.com/MorvanZhou/NLP-Tutorials)，再經過自己的修改。主要是因為研究 NLP 的時候發現主要都是關於句子生成的主題比較多，但我要的是比對句子的相似性，所以 TF-IDF 比較符合我的需求。\n\n## 斷字系統 - Jieba vs CKIP\nJieba 來自中國，CKIP 來自中研院，在使用內建斷詞字典的狀況下，有一些台灣的專有名詞或簡稱，CKIP 表現的比 Jieba 比較好。\n\n# 參考資料\n- 國家發展委員會（2020）。中華民國人口推估(2020 至2070 年)報告。臺北：國家發展委員會。檢自：https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf。\n- 國家發展委員會（2020）。中華民國人口推估(2020 至 2070 年)簡報。檢自：https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf。\n- 財團法人台灣網路資訊中心（2019）。2019 台灣網路報告。財團法人台灣網路資訊中心。檢自：https://report.twnic.tw/2019/。\n- Mary C. Gilly & Valarie A. Zeithaml. (1985). The Elderly Consumer and Adoption of Technologies. Journal of Consumer Research, 12(3), 353-357. DOI:10.1086/208521\n- 內政部統計處（2021）。 15 歲以上教育程度─按區域別、年齡別分. 內政統計查詢網。檢\n自：https://statis.moi.gov.tw/micst/stmain.jsp?sys=100。","slug":"緒論-長照小幫手的背景與動機","published":1,"updated":"2024-02-24T08:06:01.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myih001dk0jf4t68abq1","content":"<p>大家好，其實這個長照小幫手是我的論文題目，所以這系列的多文章，會有一大部分來自簡化的論文內容，再加上一些沒有收錄進論文的研究心得。</p>\n<p>聊天機器人整套系統都是我一個人開發的，所以這系列文章應該會分為 Zenbo、爬蟲、TF-IDF、API、Android APP 幾個部分來介紹，之後會有一篇介紹整體系統架構。</p>\n<span id=\"more\"></span>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>台灣人口老化問題越來越嚴重，預估在 2025 年將進入「超高齡社會」（國家發展委員會，2020）。試著想像全台灣每五人就有一人是老人，比例真的很高，這也造成患有慢性病或失能等長者的照顧需求跟著提升。</p>\n<ul>\n<li>圖片取自（中華民國人口推估(2020 至2070 年)簡報, 2020）<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E4%BA%BA%E5%8F%A3%E8%80%81%E5%8C%96.png\" alt=\"人口老化\"></li>\n</ul>\n<h2 id=\"動機\"><a href=\"#動機\" class=\"headerlink\" title=\"動機\"></a>動機</h2><p>政府提供了很多長照資源，但除了電視和鄰里長的宣傳，長者比較難有管道了解其他適合自己的長照資源。根據統計（財團法人台灣網路資訊中心，2019），台灣有10.8%的民眾未使用網路，且以60歲以上的年齡層居多，其中「<strong>對電腦恐懼或不熟悉</strong>」的理由就佔了27%。</p>\n<ul>\n<li>民眾未使用網路的原因，數據整理自 2019 台灣網路報告（財團法人台灣網路資訊中心，2019）<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%B6%B2%E8%B7%AF%E5%8E%9F%E5%9B%A0.png\" alt=\"未使用網路原因\"></li>\n</ul>\n<p>再加上，內政部統計（內政部統計處，2021），民國 109 年全國不識字的人口還有大概 20 萬，其中有 93% 是 65 歲以上長者。而不識字的老年人口約占全部老年人口的 5%。</p>\n<ul>\n<li>不識字人口，數據來自於內政部統計處<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E4%B8%8D%E8%AD%98%E5%AD%97%E4%BA%BA%E5%8F%A3.png\" alt=\"不識字人口\"></li>\n</ul>\n<h2 id=\"當前的問題\"><a href=\"#當前的問題\" class=\"headerlink\" title=\"當前的問題\"></a>當前的問題</h2><p>我們有人口老化的問題，還有長者「對 3C 產品不熟悉」和「不識字比例高」，那我們該如何讓長者有機會了解政府提供的長照服務呢？</p>\n<p>因此我們決定選擇華碩推出的Zenbo機器人。Zenbo 可愛的外型與簡易口令的操作方式，可以降低長者對電子產品的恐懼。還有這次設計的聊天機器人特別加入語音控制功能，可以用語音輸入問句，機器人也會用語音回答。所以就算是不識字的長輩也能操作。</p>\n<p>同時，我們也找到另一份文獻（Mary C. Gilly &amp; Valarie A. Zeithaml, 1985），他說老人傳統上被認為是比較抗拒改變的，但是當技術滿足他們的需求，並得到有效的溝通時，老年消費者確實願意改變。</p>\n<p><img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E9%95%B7%E8%80%85%E8%A9%B2%E5%A6%82%E4%BD%95%E5%8F%96%E5%BE%97%E9%95%B7%E7%85%A7%E8%B3%87%E8%A8%8A.png\" alt=\"長者該如何取得長照資訊\"></p>\n<h1 id=\"走錯路的過程\"><a href=\"#走錯路的過程\" class=\"headerlink\" title=\"走錯路的過程\"></a>走錯路的過程</h1><p>研究的過程中難免會寫到一半發現不合用的狀況嘛，所以整理一下不同技術的優缺，和我最後使用某個技術的原因。在後續的文章中可能會有比較詳細的說明😃。</p>\n<h2 id=\"語音輸入與輸出-Zenbo-SDK-vs-Android-Library\"><a href=\"#語音輸入與輸出-Zenbo-SDK-vs-Android-Library\" class=\"headerlink\" title=\"語音輸入與輸出 - Zenbo SDK vs Android Library\"></a>語音輸入與輸出 - Zenbo SDK vs Android Library</h2><p>一開始我使用的是 Zenbo SDK，為了讓 Zenbo 的語音、用字更符合台灣用法，華碩自行建立語音資料庫。但使用的過程中發現，Zenbo SDK 好像不太能處理破音字問題，加上念句子會跳字(某些字跳過沒唸)。所以我後來改用 Android 內建的 RecognizerIntent 和 TextToSpeech，雖然在句子比較複雜的時候，還是有機會唸錯破音字，但機率上好很多。</p>\n<h2 id=\"語料模型-DDE-vs-DialogFlow-vs-TF-IDF\"><a href=\"#語料模型-DDE-vs-DialogFlow-vs-TF-IDF\" class=\"headerlink\" title=\"語料模型 - DDE vs DialogFlow vs TF-IDF\"></a>語料模型 - DDE vs DialogFlow vs TF-IDF</h2><p>最一開始是使用 ASUS 提供的 DDE 工具，優點是安裝到 Zenob 比較方便，不須外另外串接 API。缺點是每個句子的 rule 都要手動建立，如果 rule 太寬鬆，input 可能會同時符合多個 rule，但是太嚴格，又可能 input 比對不到任何句子。</p>\n<p>再來考慮 Engati、DialogFlow 這類可以串接常用通訊軟體的平台，但是發現每個句子都還是要手動建立，我有快 500 個句子，會死掉吧。但是 DialogFlow 提供<strong>模糊比對</strong>，算是解決了 DDE rule 規劃的問題。如果你的句子不多，且又有條件判斷，那 DialogFlow 還是可以推，只是它不符合我這裡的使用。</p>\n<p>最後就剩自己建模型的路囉🙃，我的模型最後是選用 TF-IDF，主要程式碼是參考 <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">MorvanZhou/NLP-Tutorials</a>，再經過自己的修改。主要是因為研究 NLP 的時候發現主要都是關於句子生成的主題比較多，但我要的是比對句子的相似性，所以 TF-IDF 比較符合我的需求。</p>\n<h2 id=\"斷字系統-Jieba-vs-CKIP\"><a href=\"#斷字系統-Jieba-vs-CKIP\" class=\"headerlink\" title=\"斷字系統 - Jieba vs CKIP\"></a>斷字系統 - Jieba vs CKIP</h2><p>Jieba 來自中國，CKIP 來自中研院，在使用內建斷詞字典的狀況下，有一些台灣的專有名詞或簡稱，CKIP 表現的比 Jieba 比較好。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>國家發展委員會（2020）。中華民國人口推估(2020 至2070 年)報告。臺北：國家發展委員會。檢自：<a href=\"https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf%E3%80%82\">https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf。</a></li>\n<li>國家發展委員會（2020）。中華民國人口推估(2020 至 2070 年)簡報。檢自：<a href=\"https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf%E3%80%82\">https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf。</a></li>\n<li>財團法人台灣網路資訊中心（2019）。2019 台灣網路報告。財團法人台灣網路資訊中心。檢自：<a href=\"https://report.twnic.tw/2019/%E3%80%82\">https://report.twnic.tw/2019/。</a></li>\n<li>Mary C. Gilly &amp; Valarie A. Zeithaml. (1985). The Elderly Consumer and Adoption of Technologies. Journal of Consumer Research, 12(3), 353-357. DOI:10.1086/208521</li>\n<li>內政部統計處（2021）。 15 歲以上教育程度─按區域別、年齡別分. 內政統計查詢網。檢<br>自：<a href=\"https://statis.moi.gov.tw/micst/stmain.jsp?sys=100%E3%80%82\">https://statis.moi.gov.tw/micst/stmain.jsp?sys=100。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>大家好，其實這個長照小幫手是我的論文題目，所以這系列的多文章，會有一大部分來自簡化的論文內容，再加上一些沒有收錄進論文的研究心得。</p>\n<p>聊天機器人整套系統都是我一個人開發的，所以這系列文章應該會分為 Zenbo、爬蟲、TF-IDF、API、Android APP 幾個部分來介紹，之後會有一篇介紹整體系統架構。</p>","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>台灣人口老化問題越來越嚴重，預估在 2025 年將進入「超高齡社會」（國家發展委員會，2020）。試著想像全台灣每五人就有一人是老人，比例真的很高，這也造成患有慢性病或失能等長者的照顧需求跟著提升。</p>\n<ul>\n<li>圖片取自（中華民國人口推估(2020 至2070 年)簡報, 2020）<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E4%BA%BA%E5%8F%A3%E8%80%81%E5%8C%96.png\" alt=\"人口老化\"></li>\n</ul>\n<h2 id=\"動機\"><a href=\"#動機\" class=\"headerlink\" title=\"動機\"></a>動機</h2><p>政府提供了很多長照資源，但除了電視和鄰里長的宣傳，長者比較難有管道了解其他適合自己的長照資源。根據統計（財團法人台灣網路資訊中心，2019），台灣有10.8%的民眾未使用網路，且以60歲以上的年齡層居多，其中「<strong>對電腦恐懼或不熟悉</strong>」的理由就佔了27%。</p>\n<ul>\n<li>民眾未使用網路的原因，數據整理自 2019 台灣網路報告（財團法人台灣網路資訊中心，2019）<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%B6%B2%E8%B7%AF%E5%8E%9F%E5%9B%A0.png\" alt=\"未使用網路原因\"></li>\n</ul>\n<p>再加上，內政部統計（內政部統計處，2021），民國 109 年全國不識字的人口還有大概 20 萬，其中有 93% 是 65 歲以上長者。而不識字的老年人口約占全部老年人口的 5%。</p>\n<ul>\n<li>不識字人口，數據來自於內政部統計處<br>  <img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E4%B8%8D%E8%AD%98%E5%AD%97%E4%BA%BA%E5%8F%A3.png\" alt=\"不識字人口\"></li>\n</ul>\n<h2 id=\"當前的問題\"><a href=\"#當前的問題\" class=\"headerlink\" title=\"當前的問題\"></a>當前的問題</h2><p>我們有人口老化的問題，還有長者「對 3C 產品不熟悉」和「不識字比例高」，那我們該如何讓長者有機會了解政府提供的長照服務呢？</p>\n<p>因此我們決定選擇華碩推出的Zenbo機器人。Zenbo 可愛的外型與簡易口令的操作方式，可以降低長者對電子產品的恐懼。還有這次設計的聊天機器人特別加入語音控制功能，可以用語音輸入問句，機器人也會用語音回答。所以就算是不識字的長輩也能操作。</p>\n<p>同時，我們也找到另一份文獻（Mary C. Gilly &amp; Valarie A. Zeithaml, 1985），他說老人傳統上被認為是比較抗拒改變的，但是當技術滿足他們的需求，並得到有效的溝通時，老年消費者確實願意改變。</p>\n<p><img src=\"/2021/09/02/%E7%B7%92%E8%AB%96-%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B%E7%9A%84%E8%83%8C%E6%99%AF%E8%88%87%E5%8B%95%E6%A9%9F/%E9%95%B7%E8%80%85%E8%A9%B2%E5%A6%82%E4%BD%95%E5%8F%96%E5%BE%97%E9%95%B7%E7%85%A7%E8%B3%87%E8%A8%8A.png\" alt=\"長者該如何取得長照資訊\"></p>\n<h1 id=\"走錯路的過程\"><a href=\"#走錯路的過程\" class=\"headerlink\" title=\"走錯路的過程\"></a>走錯路的過程</h1><p>研究的過程中難免會寫到一半發現不合用的狀況嘛，所以整理一下不同技術的優缺，和我最後使用某個技術的原因。在後續的文章中可能會有比較詳細的說明😃。</p>\n<h2 id=\"語音輸入與輸出-Zenbo-SDK-vs-Android-Library\"><a href=\"#語音輸入與輸出-Zenbo-SDK-vs-Android-Library\" class=\"headerlink\" title=\"語音輸入與輸出 - Zenbo SDK vs Android Library\"></a>語音輸入與輸出 - Zenbo SDK vs Android Library</h2><p>一開始我使用的是 Zenbo SDK，為了讓 Zenbo 的語音、用字更符合台灣用法，華碩自行建立語音資料庫。但使用的過程中發現，Zenbo SDK 好像不太能處理破音字問題，加上念句子會跳字(某些字跳過沒唸)。所以我後來改用 Android 內建的 RecognizerIntent 和 TextToSpeech，雖然在句子比較複雜的時候，還是有機會唸錯破音字，但機率上好很多。</p>\n<h2 id=\"語料模型-DDE-vs-DialogFlow-vs-TF-IDF\"><a href=\"#語料模型-DDE-vs-DialogFlow-vs-TF-IDF\" class=\"headerlink\" title=\"語料模型 - DDE vs DialogFlow vs TF-IDF\"></a>語料模型 - DDE vs DialogFlow vs TF-IDF</h2><p>最一開始是使用 ASUS 提供的 DDE 工具，優點是安裝到 Zenob 比較方便，不須外另外串接 API。缺點是每個句子的 rule 都要手動建立，如果 rule 太寬鬆，input 可能會同時符合多個 rule，但是太嚴格，又可能 input 比對不到任何句子。</p>\n<p>再來考慮 Engati、DialogFlow 這類可以串接常用通訊軟體的平台，但是發現每個句子都還是要手動建立，我有快 500 個句子，會死掉吧。但是 DialogFlow 提供<strong>模糊比對</strong>，算是解決了 DDE rule 規劃的問題。如果你的句子不多，且又有條件判斷，那 DialogFlow 還是可以推，只是它不符合我這裡的使用。</p>\n<p>最後就剩自己建模型的路囉🙃，我的模型最後是選用 TF-IDF，主要程式碼是參考 <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">MorvanZhou/NLP-Tutorials</a>，再經過自己的修改。主要是因為研究 NLP 的時候發現主要都是關於句子生成的主題比較多，但我要的是比對句子的相似性，所以 TF-IDF 比較符合我的需求。</p>\n<h2 id=\"斷字系統-Jieba-vs-CKIP\"><a href=\"#斷字系統-Jieba-vs-CKIP\" class=\"headerlink\" title=\"斷字系統 - Jieba vs CKIP\"></a>斷字系統 - Jieba vs CKIP</h2><p>Jieba 來自中國，CKIP 來自中研院，在使用內建斷詞字典的狀況下，有一些台灣的專有名詞或簡稱，CKIP 表現的比 Jieba 比較好。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>國家發展委員會（2020）。中華民國人口推估(2020 至2070 年)報告。臺北：國家發展委員會。檢自：<a href=\"https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf%E3%80%82\">https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E5%A0%B1%E5%91%8A.pdf。</a></li>\n<li>國家發展委員會（2020）。中華民國人口推估(2020 至 2070 年)簡報。檢自：<a href=\"https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf%E3%80%82\">https://pop-proj.ndc.gov.tw/upload/download/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E4%BA%BA%E5%8F%A3%E6%8E%A8%E4%BC%B0(2020%E8%87%B32070%E5%B9%B4)%E7%B0%A1%E5%A0%B1.pdf。</a></li>\n<li>財團法人台灣網路資訊中心（2019）。2019 台灣網路報告。財團法人台灣網路資訊中心。檢自：<a href=\"https://report.twnic.tw/2019/%E3%80%82\">https://report.twnic.tw/2019/。</a></li>\n<li>Mary C. Gilly &amp; Valarie A. Zeithaml. (1985). The Elderly Consumer and Adoption of Technologies. Journal of Consumer Research, 12(3), 353-357. DOI:10.1086/208521</li>\n<li>內政部統計處（2021）。 15 歲以上教育程度─按區域別、年齡別分. 內政統計查詢網。檢<br>自：<a href=\"https://statis.moi.gov.tw/micst/stmain.jsp?sys=100%E3%80%82\">https://statis.moi.gov.tw/micst/stmain.jsp?sys=100。</a></li>\n</ul>"},{"title":"[語料庫模型] 03-語料讀取&資料格式轉換","date":"2021-09-26T15:52:34.000Z","_content":"\n今天的主題是介紹如何讀取 CSV (之前從各個網站爬下來的問答集)，並將資料轉成後面製作語料庫模型要用的格式。\n\n先複習一下之前爬下來的格式好了，待會我們要做的是以 `Q` (問題)來製作模型\n<!-- more -->\n![csv_excel](csv_excel.png)\n\n# readwriter\n我將 CSV 整理成 4 種格式\n完整程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py\n\n- `get_field(\"Q\")`: 可以得到 `docs`、`docs_category` 用來製作模型。\n- `to_dict()`: 可以得到 `all_data`、`all_data_category` 用來回傳完整問答組合給 API。\n\n## 四種格式\n1. `docs`: 全部的 `Q`\n    ```\n    [\n        \"如何申請⻑期照顧服務及流程為何?\",\n        \"申請長照服務有什麼條件？\"\n    ]\n    ```\n2. `docs_category`: 依 `category` 分類的 `Q`\n    ```\n    {\n        \"1\":[\n            \"如何申請⻑期照顧服務及流程為何?\",\n            \"申請長照服務有什麼條件？\"\n        ],\n        \"2\":[\n            ...\n        ]\n    }\n    ```\n3. `all_data`: 完整的問答組合\n    ```\n    [\n        {\n            'id':'10',\n            'Q':'護理之家和老人養護所和老人安養院有何分別？'\n            'A':'台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)',\n            'url':'https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/'\n        },\n        {\n            ...\n        }\n    ]\n    ```\n4. `all_data_category`: 依 `category` 分類的問答組合\n    ```\n    {\n        \"1\":[\n            {\n                'id':'10',\n                'Q':'護理之家和老人養護所和老人安養院有何分別？'\n                'A':'台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)',\n                'url':'https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/'\n            },\n            {\n                ...\n            }\n        ],\n        \"2\":[\n            {\n                ...\n            }\n        ]\n    }\n    ```\n\n# main\n介紹完資料整理的部分，我們回到主程式吧~\n完整程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n首先我們要確認用來製作模型的資料來源，當 `CUT_METHOD` 是 `ckip` 或 `jieba` 時，就從 CSV 中讀取資料；若是 `test` 則會使用下方的測試英文句子當來源。\n來源預設是全部的問句或問答組合(`docs`、`all_data`)，若是有輸入分類的編號，則會把相應的資料(`docs_category[q_category]`、`all_data_category[q_category]`)賦值給`docs`、`all_data`，作為新的資料來源。\n\n```python\n\"\"\"\nCUT_METHOD = test | ckip | jieba\n\"\"\"\nCUT_METHOD = 'ckip'\n\n\n\"\"\"Source\"\"\"\nq_category = sys.argv[2]\nif CUT_METHOD in [\"ckip\", \"jieba\"]:\n    docs, docs_category = CsvReader().get_field(\"Q\")\n    all_data, all_data_category = CsvReader().to_dict()\n\n    \"\"\"group qa by category and write json to file\"\"\"\n    if q_category in ['1', '2', '3', '4', '5']:\n        docs = docs_category[q_category]\n        all_data = all_data_category[q_category]\n\nelse:\n    docs = [\n        \"it is a good day, I like to stay here\",\n        \"I am happy to be here\",\n        \"I am bob\",\n        \"it is sunny today\",\n        \"I have a party today\",\n        \"it is a dog and that is a cat\",\n        \"there are dog and cat on the tree\",\n        \"I study hard this morning\",\n        \"today is a good day\",\n        \"tomorrow will be a good day\",\n        \"I like coffee, I like book and I like apple\",\n        \"I do not like it\",\n        \"I am kitty, I like bob\",\n        \"I do not care who like bob, but I like kitty\",\n        \"It is coffee time, bring your cup\",\n    ]\n    all_data = docs\n```\n\n# 結語\n接下來的幾天我們會繼續以這段程式碼延伸，斷詞、加 Label 等前置作業，到後面 TF、IDF、TF-IDF 的建置，一段段講解程式。\n","source":"_posts/語料庫模型-03-語料讀取-資料格式轉換.md","raw":"---\ntitle: '[語料庫模型] 03-語料讀取&資料格式轉換'\ndate: 2021-09-26 23:52:34\ntags:\n- 13th鐵人賽\n- TF-IDF\n- 語料庫\n---\n\n今天的主題是介紹如何讀取 CSV (之前從各個網站爬下來的問答集)，並將資料轉成後面製作語料庫模型要用的格式。\n\n先複習一下之前爬下來的格式好了，待會我們要做的是以 `Q` (問題)來製作模型\n<!-- more -->\n![csv_excel](csv_excel.png)\n\n# readwriter\n我將 CSV 整理成 4 種格式\n完整程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py\n\n- `get_field(\"Q\")`: 可以得到 `docs`、`docs_category` 用來製作模型。\n- `to_dict()`: 可以得到 `all_data`、`all_data_category` 用來回傳完整問答組合給 API。\n\n## 四種格式\n1. `docs`: 全部的 `Q`\n    ```\n    [\n        \"如何申請⻑期照顧服務及流程為何?\",\n        \"申請長照服務有什麼條件？\"\n    ]\n    ```\n2. `docs_category`: 依 `category` 分類的 `Q`\n    ```\n    {\n        \"1\":[\n            \"如何申請⻑期照顧服務及流程為何?\",\n            \"申請長照服務有什麼條件？\"\n        ],\n        \"2\":[\n            ...\n        ]\n    }\n    ```\n3. `all_data`: 完整的問答組合\n    ```\n    [\n        {\n            'id':'10',\n            'Q':'護理之家和老人養護所和老人安養院有何分別？'\n            'A':'台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)',\n            'url':'https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/'\n        },\n        {\n            ...\n        }\n    ]\n    ```\n4. `all_data_category`: 依 `category` 分類的問答組合\n    ```\n    {\n        \"1\":[\n            {\n                'id':'10',\n                'Q':'護理之家和老人養護所和老人安養院有何分別？'\n                'A':'台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)',\n                'url':'https://www.royalnursinghome.com.tw/%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6/'\n            },\n            {\n                ...\n            }\n        ],\n        \"2\":[\n            {\n                ...\n            }\n        ]\n    }\n    ```\n\n# main\n介紹完資料整理的部分，我們回到主程式吧~\n完整程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n首先我們要確認用來製作模型的資料來源，當 `CUT_METHOD` 是 `ckip` 或 `jieba` 時，就從 CSV 中讀取資料；若是 `test` 則會使用下方的測試英文句子當來源。\n來源預設是全部的問句或問答組合(`docs`、`all_data`)，若是有輸入分類的編號，則會把相應的資料(`docs_category[q_category]`、`all_data_category[q_category]`)賦值給`docs`、`all_data`，作為新的資料來源。\n\n```python\n\"\"\"\nCUT_METHOD = test | ckip | jieba\n\"\"\"\nCUT_METHOD = 'ckip'\n\n\n\"\"\"Source\"\"\"\nq_category = sys.argv[2]\nif CUT_METHOD in [\"ckip\", \"jieba\"]:\n    docs, docs_category = CsvReader().get_field(\"Q\")\n    all_data, all_data_category = CsvReader().to_dict()\n\n    \"\"\"group qa by category and write json to file\"\"\"\n    if q_category in ['1', '2', '3', '4', '5']:\n        docs = docs_category[q_category]\n        all_data = all_data_category[q_category]\n\nelse:\n    docs = [\n        \"it is a good day, I like to stay here\",\n        \"I am happy to be here\",\n        \"I am bob\",\n        \"it is sunny today\",\n        \"I have a party today\",\n        \"it is a dog and that is a cat\",\n        \"there are dog and cat on the tree\",\n        \"I study hard this morning\",\n        \"today is a good day\",\n        \"tomorrow will be a good day\",\n        \"I like coffee, I like book and I like apple\",\n        \"I do not like it\",\n        \"I am kitty, I like bob\",\n        \"I do not care who like bob, but I like kitty\",\n        \"It is coffee time, bring your cup\",\n    ]\n    all_data = docs\n```\n\n# 結語\n接下來的幾天我們會繼續以這段程式碼延伸，斷詞、加 Label 等前置作業，到後面 TF、IDF、TF-IDF 的建置，一段段講解程式。\n","slug":"語料庫模型-03-語料讀取-資料格式轉換","published":1,"updated":"2024-02-24T08:06:01.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myih001fk0jf5pdm6m5c","content":"<p>今天的主題是介紹如何讀取 CSV (之前從各個網站爬下來的問答集)，並將資料轉成後面製作語料庫模型要用的格式。</p>\n<p>先複習一下之前爬下來的格式好了，待會我們要做的是以 <code>Q</code> (問題)來製作模型</p>\n<span id=\"more\"></span>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-03-%E8%AA%9E%E6%96%99%E8%AE%80%E5%8F%96-%E8%B3%87%E6%96%99%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B/csv_excel.png\" alt=\"csv_excel\"></p>\n<h1 id=\"readwriter\"><a href=\"#readwriter\" class=\"headerlink\" title=\"readwriter\"></a>readwriter</h1><p>我將 CSV 整理成 4 種格式<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py</a></p>\n<ul>\n<li><code>get_field(&quot;Q&quot;)</code>: 可以得到 <code>docs</code>、<code>docs_category</code> 用來製作模型。</li>\n<li><code>to_dict()</code>: 可以得到 <code>all_data</code>、<code>all_data_category</code> 用來回傳完整問答組合給 API。</li>\n</ul>\n<h2 id=\"四種格式\"><a href=\"#四種格式\" class=\"headerlink\" title=\"四種格式\"></a>四種格式</h2><ol>\n<li><code>docs</code>: 全部的 <code>Q</code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &quot;如何申請⻑期照顧服務及流程為何?&quot;,</span><br><span class=\"line\">    &quot;申請長照服務有什麼條件？&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n<li><code>docs_category</code>: 依 <code>category</code> 分類的 <code>Q</code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:[</span><br><span class=\"line\">        &quot;如何申請⻑期照顧服務及流程為何?&quot;,</span><br><span class=\"line\">        &quot;申請長照服務有什麼條件？&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;2&quot;:[</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>all_data</code>: 完整的問答組合 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#39;id&#39;:&#39;10&#39;,</span><br><span class=\"line\">        &#39;Q&#39;:&#39;護理之家和老人養護所和老人安養院有何分別？&#39;</span><br><span class=\"line\">        &#39;A&#39;:&#39;台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)&#39;,</span><br><span class=\"line\">        &#39;url&#39;:&#39;https:&#x2F;&#x2F;www.royalnursinghome.com.tw&#x2F;%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6&#x2F;&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n<li><code>all_data_category</code>: 依 <code>category</code> 分類的問答組合 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#39;id&#39;:&#39;10&#39;,</span><br><span class=\"line\">            &#39;Q&#39;:&#39;護理之家和老人養護所和老人安養院有何分別？&#39;</span><br><span class=\"line\">            &#39;A&#39;:&#39;台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)&#39;,</span><br><span class=\"line\">            &#39;url&#39;:&#39;https:&#x2F;&#x2F;www.royalnursinghome.com.tw&#x2F;%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6&#x2F;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;2&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h1><p>介紹完資料整理的部分，我們回到主程式吧~<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<p>首先我們要確認用來製作模型的資料來源，當 <code>CUT_METHOD</code> 是 <code>ckip</code> 或 <code>jieba</code> 時，就從 CSV 中讀取資料；若是 <code>test</code> 則會使用下方的測試英文句子當來源。<br>來源預設是全部的問句或問答組合(<code>docs</code>、<code>all_data</code>)，若是有輸入分類的編號，則會把相應的資料(<code>docs_category[q_category]</code>、<code>all_data_category[q_category]</code>)賦值給<code>docs</code>、<code>all_data</code>，作為新的資料來源。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CUT_METHOD = test | ckip | jieba</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">CUT_METHOD = <span class=\"string\">&#x27;ckip&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;Source&quot;&quot;&quot;</span></span><br><span class=\"line\">q_category = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> CUT_METHOD <span class=\"keyword\">in</span> [<span class=\"string\">&quot;ckip&quot;</span>, <span class=\"string\">&quot;jieba&quot;</span>]:</span><br><span class=\"line\">    docs, docs_category = CsvReader().get_field(<span class=\"string\">&quot;Q&quot;</span>)</span><br><span class=\"line\">    all_data, all_data_category = CsvReader().to_dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;group qa by category and write json to file&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> q_category <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>]:</span><br><span class=\"line\">        docs = docs_category[q_category]</span><br><span class=\"line\">        all_data = all_data_category[q_category]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    docs = [</span><br><span class=\"line\">        <span class=\"string\">&quot;it is a good day, I like to stay here&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am happy to be here&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am bob&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;it is sunny today&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I have a party today&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;it is a dog and that is a cat&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;there are dog and cat on the tree&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I study hard this morning&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;today is a good day&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tomorrow will be a good day&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I like coffee, I like book and I like apple&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I do not like it&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am kitty, I like bob&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I do not care who like bob, but I like kitty&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;It is coffee time, bring your cup&quot;</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    all_data = docs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>接下來的幾天我們會繼續以這段程式碼延伸，斷詞、加 Label 等前置作業，到後面 TF、IDF、TF-IDF 的建置，一段段講解程式。</p>\n","site":{"data":{}},"excerpt":"<p>今天的主題是介紹如何讀取 CSV (之前從各個網站爬下來的問答集)，並將資料轉成後面製作語料庫模型要用的格式。</p>\n<p>先複習一下之前爬下來的格式好了，待會我們要做的是以 <code>Q</code> (問題)來製作模型</p>","more":"<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-03-%E8%AA%9E%E6%96%99%E8%AE%80%E5%8F%96-%E8%B3%87%E6%96%99%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B/csv_excel.png\" alt=\"csv_excel\"></p>\n<h1 id=\"readwriter\"><a href=\"#readwriter\" class=\"headerlink\" title=\"readwriter\"></a>readwriter</h1><p>我將 CSV 整理成 4 種格式<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/readwriter.py</a></p>\n<ul>\n<li><code>get_field(&quot;Q&quot;)</code>: 可以得到 <code>docs</code>、<code>docs_category</code> 用來製作模型。</li>\n<li><code>to_dict()</code>: 可以得到 <code>all_data</code>、<code>all_data_category</code> 用來回傳完整問答組合給 API。</li>\n</ul>\n<h2 id=\"四種格式\"><a href=\"#四種格式\" class=\"headerlink\" title=\"四種格式\"></a>四種格式</h2><ol>\n<li><code>docs</code>: 全部的 <code>Q</code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &quot;如何申請⻑期照顧服務及流程為何?&quot;,</span><br><span class=\"line\">    &quot;申請長照服務有什麼條件？&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n<li><code>docs_category</code>: 依 <code>category</code> 分類的 <code>Q</code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:[</span><br><span class=\"line\">        &quot;如何申請⻑期照顧服務及流程為何?&quot;,</span><br><span class=\"line\">        &quot;申請長照服務有什麼條件？&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;2&quot;:[</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>all_data</code>: 完整的問答組合 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#39;id&#39;:&#39;10&#39;,</span><br><span class=\"line\">        &#39;Q&#39;:&#39;護理之家和老人養護所和老人安養院有何分別？&#39;</span><br><span class=\"line\">        &#39;A&#39;:&#39;台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)&#39;,</span><br><span class=\"line\">        &#39;url&#39;:&#39;https:&#x2F;&#x2F;www.royalnursinghome.com.tw&#x2F;%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6&#x2F;&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n<li><code>all_data_category</code>: 依 <code>category</code> 分類的問答組合 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#39;id&#39;:&#39;10&#39;,</span><br><span class=\"line\">            &#39;Q&#39;:&#39;護理之家和老人養護所和老人安養院有何分別？&#39;</span><br><span class=\"line\">            &#39;A&#39;:&#39;台灣照顧老人的老人福利機構一般來說分成三個等級：1.安養院：只能照顧生活可以完全自理的長者，亦即是健康的老人家。2.養護所：可以照顧有鼻胃管、尿管或者完全臥床的患者。 唯，不能收有氣切之患者。(年齡限制：須滿60歲以上)3.護理之家：從最重症【鼻胃管、尿管、氣切】到最輕微【只是安養的長者】都能給予全方位的生活及護理照護。(年齡無限制)&#39;,</span><br><span class=\"line\">            &#39;url&#39;:&#39;https:&#x2F;&#x2F;www.royalnursinghome.com.tw&#x2F;%e8%ad%b7%e7%90%86%e4%b9%8b%e5%ae%b6&#x2F;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;2&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h1><p>介紹完資料整理的部分，我們回到主程式吧~<br>完整程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<p>首先我們要確認用來製作模型的資料來源，當 <code>CUT_METHOD</code> 是 <code>ckip</code> 或 <code>jieba</code> 時，就從 CSV 中讀取資料；若是 <code>test</code> 則會使用下方的測試英文句子當來源。<br>來源預設是全部的問句或問答組合(<code>docs</code>、<code>all_data</code>)，若是有輸入分類的編號，則會把相應的資料(<code>docs_category[q_category]</code>、<code>all_data_category[q_category]</code>)賦值給<code>docs</code>、<code>all_data</code>，作為新的資料來源。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CUT_METHOD = test | ckip | jieba</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">CUT_METHOD = <span class=\"string\">&#x27;ckip&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;Source&quot;&quot;&quot;</span></span><br><span class=\"line\">q_category = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> CUT_METHOD <span class=\"keyword\">in</span> [<span class=\"string\">&quot;ckip&quot;</span>, <span class=\"string\">&quot;jieba&quot;</span>]:</span><br><span class=\"line\">    docs, docs_category = CsvReader().get_field(<span class=\"string\">&quot;Q&quot;</span>)</span><br><span class=\"line\">    all_data, all_data_category = CsvReader().to_dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;group qa by category and write json to file&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> q_category <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>]:</span><br><span class=\"line\">        docs = docs_category[q_category]</span><br><span class=\"line\">        all_data = all_data_category[q_category]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    docs = [</span><br><span class=\"line\">        <span class=\"string\">&quot;it is a good day, I like to stay here&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am happy to be here&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am bob&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;it is sunny today&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I have a party today&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;it is a dog and that is a cat&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;there are dog and cat on the tree&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I study hard this morning&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;today is a good day&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tomorrow will be a good day&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I like coffee, I like book and I like apple&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I do not like it&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I am kitty, I like bob&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;I do not care who like bob, but I like kitty&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;It is coffee time, bring your cup&quot;</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    all_data = docs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>接下來的幾天我們會繼續以這段程式碼延伸，斷詞、加 Label 等前置作業，到後面 TF、IDF、TF-IDF 的建置，一段段講解程式。</p>"},{"title":"聊天機器人的分類與比較","date":"2021-09-04T11:15:18.000Z","_content":"\n隨著科技的發展，人工智慧近年來也越來越普及。人工智慧可以協助人們處理很多事情，如：車牌辨識、自駕車，影像辨識...等等，而聊天機器人也是人工智慧的一項重要應用。\n\n聊天機器人是一種模擬溝通的電腦程式。透過聊天機器人，使用者可以輕鬆地使用自然語言來獲取資訊。自然語言就是像我們一般的講話方式，可以跟聊天機器人說「可以幫我開燈嗎」，而不是指令式的說「開燈」。\n<!-- more -->\n\n聊天機器人的分類方式很多，以知識領域劃分，可分為開放領域（Open Domain）和封閉領域（Close Domain），前者指聊天機器人有基本知識可以回答一般性、閒聊類的問題；後者，聊天機器人的知識則限定在某特定領域，例如：長照、消防...等。本研究將建置一個可以回答長照相關問題的聊天機器人，屬於封閉領域。透過語音的方式 Zenbo 可以和長者互動，亦能適時回答長者對長照的問題。\n\n若以聊天機器外觀來分類主要可以分為兩種，有實體型聊天機器人和平台型聊天機器人。\n\n# 實體型聊天機器人\n實體型機器人有獨立硬體裝置，常見的形式有智慧音箱或陪伴型機器人，例如：ASUS Zenbo、Softbank Pepper、小米的小愛同學、遠傳的愛講智慧音箱...等。通常會搭配智慧家庭應用，可以用語音的方式控制家電、播放音樂、播報新聞...等多種應用。\n\n![實體型聊天機器人](實體型聊天機器人.png)\n\n本研究使用的 Zenbo 機器人即屬於這個類型，Zenbo 具有可愛的外型與內建多項有趣功能，如跟隨、摸頭時會出現害羞表情、講故事...等等。平時在家就能陪伴長者，又能以語音的方式回答長者對於長照的相關的問題，相較於平台型聊天機器人，使用者與機器人間大多透過手機以文字溝通，Zenbo 可愛的外型與語音互動的方式對長者來說更加友善。\n\n## Softbank Pepper vs. ASUS Zenbo\n以同樣都有一個平板的 Pepper 和 Zenbo 來比較。\n\nPepper 的產品定位是服務型機器人，主打的是商用，他可以站在店門口，幫忙接待消費者、介紹產品，或是依據消費者的特徵，推薦商品。Zenbo 的定位是陪伴型機器人，可以播放音樂、講故事給小朋友聽，還有與藥局配合，可以語音預約，外送處方箋到宅的服務。\n\n它們提供給開發者的功能也都很豐富。Pepper 分有「開發用途」及「商業用途」兩種販售模式。如果想開發使用《機器人App》的功能，就要用開發用的Pepper，一台 425000。相對的，Zenbo 就平價很多，儲存容量比較大的版本也只要 24900。\n\n||![pepper](pepper.png)<br>Softbank Pepper|![zenbo](zenbo.png)<br>ASUS Zenbo|\n|---|---|---|\n|產品定位|服務型機器人|陪伴型機器人|\n|主要應用場景|商用，B2B 為主(客戶喜好分析、推薦產品)|家庭(娛樂、教育、健康照護)|\n|觸控螢幕|V|V|\n|客製開發功能| - 使用 ROS 開發<br>- Choregraph 原廠提供的圖形化開發工具<br>- Bluemix 雲端開發平台<br>- 使用 C++ 或 Python 直接控制<br>- 用 Android Studio 開發<br>(Pojenlai, 2016)|- 使用 Android Studio 開發<br>- App Builder 原廠提供的圖形化開發工具<br>- DDE Editor 可以自行設計語料庫，安裝到 Zenbo<br>- Story Editor 故事編輯器|\n|售價|425,000 元 (開發版)<br>26,888 元/月 (商用租賃)|19,900 元 (32GB)<br>24,900 元 (128GB)|\n\n而我們最後選擇 Zenbo 的主要原因是有兩個。第一，他本來主打的就是陪伴，所以有提供很多陪伴長者跟小孩的功能。第二，考量價格，Zenbo 比Pepper 便宜很多，對使用者的負擔也相對較小。\n\nZenbo 是華碩公司於 2017 年推出的陪伴型機器人。內建教育、娛樂、健康照護...等豐富功能，使用者可以用語音的方式與機器人互動。特別的是，相比國外的機器人，因為華碩自建語音資料庫，Zenbo 的用字與發音更符合台灣人習慣。華碩也提供一系列工具，包括：Zenbo SDK、DDE 語音編輯器（DDE Editor）、APP 建置器（Zenbo APP Builder）、故事編輯器（Zenbo Story Editor），讓開發者們能自己撰寫功能。\n\n## 平台型聊天機器人\n平台型聊天機器人通常使用手機 APP 或網頁存取，使用者通常使用文字方式與聊天機器人溝通。Facebook Messenger、Line、Telegram 都是常見的平台，可以協助客服人回覆部分常見問題。平台提供API 讓開發者串接，可以自訂回覆內容。\n\n![平台型聊天機器人](平台型聊天機器人.png)\n\n# 參考資料\n- 沛博科技（無日期）。 Pepper 程式安全性審查說明: 開發指南。檢自：http://www.perobot.com.tw/develop/page/download。\n- pojenlai(2016)。pepper robot 程式開發的幾種選擇。檢自：https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/。\n","source":"_posts/聊天機器人的分類與比較.md","raw":"---\ntitle: 聊天機器人的分類與比較\ndate: 2021-09-04 19:15:18\ntags:\n- 13th鐵人賽\n- 聊天機器人\n- Zenbo\n- Pepper\n---\n\n隨著科技的發展，人工智慧近年來也越來越普及。人工智慧可以協助人們處理很多事情，如：車牌辨識、自駕車，影像辨識...等等，而聊天機器人也是人工智慧的一項重要應用。\n\n聊天機器人是一種模擬溝通的電腦程式。透過聊天機器人，使用者可以輕鬆地使用自然語言來獲取資訊。自然語言就是像我們一般的講話方式，可以跟聊天機器人說「可以幫我開燈嗎」，而不是指令式的說「開燈」。\n<!-- more -->\n\n聊天機器人的分類方式很多，以知識領域劃分，可分為開放領域（Open Domain）和封閉領域（Close Domain），前者指聊天機器人有基本知識可以回答一般性、閒聊類的問題；後者，聊天機器人的知識則限定在某特定領域，例如：長照、消防...等。本研究將建置一個可以回答長照相關問題的聊天機器人，屬於封閉領域。透過語音的方式 Zenbo 可以和長者互動，亦能適時回答長者對長照的問題。\n\n若以聊天機器外觀來分類主要可以分為兩種，有實體型聊天機器人和平台型聊天機器人。\n\n# 實體型聊天機器人\n實體型機器人有獨立硬體裝置，常見的形式有智慧音箱或陪伴型機器人，例如：ASUS Zenbo、Softbank Pepper、小米的小愛同學、遠傳的愛講智慧音箱...等。通常會搭配智慧家庭應用，可以用語音的方式控制家電、播放音樂、播報新聞...等多種應用。\n\n![實體型聊天機器人](實體型聊天機器人.png)\n\n本研究使用的 Zenbo 機器人即屬於這個類型，Zenbo 具有可愛的外型與內建多項有趣功能，如跟隨、摸頭時會出現害羞表情、講故事...等等。平時在家就能陪伴長者，又能以語音的方式回答長者對於長照的相關的問題，相較於平台型聊天機器人，使用者與機器人間大多透過手機以文字溝通，Zenbo 可愛的外型與語音互動的方式對長者來說更加友善。\n\n## Softbank Pepper vs. ASUS Zenbo\n以同樣都有一個平板的 Pepper 和 Zenbo 來比較。\n\nPepper 的產品定位是服務型機器人，主打的是商用，他可以站在店門口，幫忙接待消費者、介紹產品，或是依據消費者的特徵，推薦商品。Zenbo 的定位是陪伴型機器人，可以播放音樂、講故事給小朋友聽，還有與藥局配合，可以語音預約，外送處方箋到宅的服務。\n\n它們提供給開發者的功能也都很豐富。Pepper 分有「開發用途」及「商業用途」兩種販售模式。如果想開發使用《機器人App》的功能，就要用開發用的Pepper，一台 425000。相對的，Zenbo 就平價很多，儲存容量比較大的版本也只要 24900。\n\n||![pepper](pepper.png)<br>Softbank Pepper|![zenbo](zenbo.png)<br>ASUS Zenbo|\n|---|---|---|\n|產品定位|服務型機器人|陪伴型機器人|\n|主要應用場景|商用，B2B 為主(客戶喜好分析、推薦產品)|家庭(娛樂、教育、健康照護)|\n|觸控螢幕|V|V|\n|客製開發功能| - 使用 ROS 開發<br>- Choregraph 原廠提供的圖形化開發工具<br>- Bluemix 雲端開發平台<br>- 使用 C++ 或 Python 直接控制<br>- 用 Android Studio 開發<br>(Pojenlai, 2016)|- 使用 Android Studio 開發<br>- App Builder 原廠提供的圖形化開發工具<br>- DDE Editor 可以自行設計語料庫，安裝到 Zenbo<br>- Story Editor 故事編輯器|\n|售價|425,000 元 (開發版)<br>26,888 元/月 (商用租賃)|19,900 元 (32GB)<br>24,900 元 (128GB)|\n\n而我們最後選擇 Zenbo 的主要原因是有兩個。第一，他本來主打的就是陪伴，所以有提供很多陪伴長者跟小孩的功能。第二，考量價格，Zenbo 比Pepper 便宜很多，對使用者的負擔也相對較小。\n\nZenbo 是華碩公司於 2017 年推出的陪伴型機器人。內建教育、娛樂、健康照護...等豐富功能，使用者可以用語音的方式與機器人互動。特別的是，相比國外的機器人，因為華碩自建語音資料庫，Zenbo 的用字與發音更符合台灣人習慣。華碩也提供一系列工具，包括：Zenbo SDK、DDE 語音編輯器（DDE Editor）、APP 建置器（Zenbo APP Builder）、故事編輯器（Zenbo Story Editor），讓開發者們能自己撰寫功能。\n\n## 平台型聊天機器人\n平台型聊天機器人通常使用手機 APP 或網頁存取，使用者通常使用文字方式與聊天機器人溝通。Facebook Messenger、Line、Telegram 都是常見的平台，可以協助客服人回覆部分常見問題。平台提供API 讓開發者串接，可以自訂回覆內容。\n\n![平台型聊天機器人](平台型聊天機器人.png)\n\n# 參考資料\n- 沛博科技（無日期）。 Pepper 程式安全性審查說明: 開發指南。檢自：http://www.perobot.com.tw/develop/page/download。\n- pojenlai(2016)。pepper robot 程式開發的幾種選擇。檢自：https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/。\n","slug":"聊天機器人的分類與比較","published":1,"updated":"2024-02-24T08:06:01.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myii001ik0jf8c8z1fg0","content":"<p>隨著科技的發展，人工智慧近年來也越來越普及。人工智慧可以協助人們處理很多事情，如：車牌辨識、自駕車，影像辨識…等等，而聊天機器人也是人工智慧的一項重要應用。</p>\n<p>聊天機器人是一種模擬溝通的電腦程式。透過聊天機器人，使用者可以輕鬆地使用自然語言來獲取資訊。自然語言就是像我們一般的講話方式，可以跟聊天機器人說「可以幫我開燈嗎」，而不是指令式的說「開燈」。</p>\n<span id=\"more\"></span>\n\n<p>聊天機器人的分類方式很多，以知識領域劃分，可分為開放領域（Open Domain）和封閉領域（Close Domain），前者指聊天機器人有基本知識可以回答一般性、閒聊類的問題；後者，聊天機器人的知識則限定在某特定領域，例如：長照、消防…等。本研究將建置一個可以回答長照相關問題的聊天機器人，屬於封閉領域。透過語音的方式 Zenbo 可以和長者互動，亦能適時回答長者對長照的問題。</p>\n<p>若以聊天機器外觀來分類主要可以分為兩種，有實體型聊天機器人和平台型聊天機器人。</p>\n<h1 id=\"實體型聊天機器人\"><a href=\"#實體型聊天機器人\" class=\"headerlink\" title=\"實體型聊天機器人\"></a>實體型聊天機器人</h1><p>實體型機器人有獨立硬體裝置，常見的形式有智慧音箱或陪伴型機器人，例如：ASUS Zenbo、Softbank Pepper、小米的小愛同學、遠傳的愛講智慧音箱…等。通常會搭配智慧家庭應用，可以用語音的方式控制家電、播放音樂、播報新聞…等多種應用。</p>\n<p><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/%E5%AF%A6%E9%AB%94%E5%9E%8B%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA.png\" alt=\"實體型聊天機器人\"></p>\n<p>本研究使用的 Zenbo 機器人即屬於這個類型，Zenbo 具有可愛的外型與內建多項有趣功能，如跟隨、摸頭時會出現害羞表情、講故事…等等。平時在家就能陪伴長者，又能以語音的方式回答長者對於長照的相關的問題，相較於平台型聊天機器人，使用者與機器人間大多透過手機以文字溝通，Zenbo 可愛的外型與語音互動的方式對長者來說更加友善。</p>\n<h2 id=\"Softbank-Pepper-vs-ASUS-Zenbo\"><a href=\"#Softbank-Pepper-vs-ASUS-Zenbo\" class=\"headerlink\" title=\"Softbank Pepper vs. ASUS Zenbo\"></a>Softbank Pepper vs. ASUS Zenbo</h2><p>以同樣都有一個平板的 Pepper 和 Zenbo 來比較。</p>\n<p>Pepper 的產品定位是服務型機器人，主打的是商用，他可以站在店門口，幫忙接待消費者、介紹產品，或是依據消費者的特徵，推薦商品。Zenbo 的定位是陪伴型機器人，可以播放音樂、講故事給小朋友聽，還有與藥局配合，可以語音預約，外送處方箋到宅的服務。</p>\n<p>它們提供給開發者的功能也都很豐富。Pepper 分有「開發用途」及「商業用途」兩種販售模式。如果想開發使用《機器人App》的功能，就要用開發用的Pepper，一台 425000。相對的，Zenbo 就平價很多，儲存容量比較大的版本也只要 24900。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/pepper.png\" alt=\"pepper\"><br>Softbank Pepper</th>\n<th><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/zenbo.png\" alt=\"zenbo\"><br>ASUS Zenbo</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>產品定位</td>\n<td>服務型機器人</td>\n<td>陪伴型機器人</td>\n</tr>\n<tr>\n<td>主要應用場景</td>\n<td>商用，B2B 為主(客戶喜好分析、推薦產品)</td>\n<td>家庭(娛樂、教育、健康照護)</td>\n</tr>\n<tr>\n<td>觸控螢幕</td>\n<td>V</td>\n<td>V</td>\n</tr>\n<tr>\n<td>客製開發功能</td>\n<td>- 使用 ROS 開發<br>- Choregraph 原廠提供的圖形化開發工具<br>- Bluemix 雲端開發平台<br>- 使用 C++ 或 Python 直接控制<br>- 用 Android Studio 開發<br>(Pojenlai, 2016)</td>\n<td>- 使用 Android Studio 開發<br>- App Builder 原廠提供的圖形化開發工具<br>- DDE Editor 可以自行設計語料庫，安裝到 Zenbo<br>- Story Editor 故事編輯器</td>\n</tr>\n<tr>\n<td>售價</td>\n<td>425,000 元 (開發版)<br>26,888 元/月 (商用租賃)</td>\n<td>19,900 元 (32GB)<br>24,900 元 (128GB)</td>\n</tr>\n</tbody></table>\n<p>而我們最後選擇 Zenbo 的主要原因是有兩個。第一，他本來主打的就是陪伴，所以有提供很多陪伴長者跟小孩的功能。第二，考量價格，Zenbo 比Pepper 便宜很多，對使用者的負擔也相對較小。</p>\n<p>Zenbo 是華碩公司於 2017 年推出的陪伴型機器人。內建教育、娛樂、健康照護…等豐富功能，使用者可以用語音的方式與機器人互動。特別的是，相比國外的機器人，因為華碩自建語音資料庫，Zenbo 的用字與發音更符合台灣人習慣。華碩也提供一系列工具，包括：Zenbo SDK、DDE 語音編輯器（DDE Editor）、APP 建置器（Zenbo APP Builder）、故事編輯器（Zenbo Story Editor），讓開發者們能自己撰寫功能。</p>\n<h2 id=\"平台型聊天機器人\"><a href=\"#平台型聊天機器人\" class=\"headerlink\" title=\"平台型聊天機器人\"></a>平台型聊天機器人</h2><p>平台型聊天機器人通常使用手機 APP 或網頁存取，使用者通常使用文字方式與聊天機器人溝通。Facebook Messenger、Line、Telegram 都是常見的平台，可以協助客服人回覆部分常見問題。平台提供API 讓開發者串接，可以自訂回覆內容。</p>\n<p><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/%E5%B9%B3%E5%8F%B0%E5%9E%8B%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA.png\" alt=\"平台型聊天機器人\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>沛博科技（無日期）。 Pepper 程式安全性審查說明: 開發指南。檢自：<a href=\"http://www.perobot.com.tw/develop/page/download%E3%80%82\">http://www.perobot.com.tw/develop/page/download。</a></li>\n<li>pojenlai(2016)。pepper robot 程式開發的幾種選擇。檢自：<a href=\"https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/%E3%80%82\">https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>隨著科技的發展，人工智慧近年來也越來越普及。人工智慧可以協助人們處理很多事情，如：車牌辨識、自駕車，影像辨識…等等，而聊天機器人也是人工智慧的一項重要應用。</p>\n<p>聊天機器人是一種模擬溝通的電腦程式。透過聊天機器人，使用者可以輕鬆地使用自然語言來獲取資訊。自然語言就是像我們一般的講話方式，可以跟聊天機器人說「可以幫我開燈嗎」，而不是指令式的說「開燈」。</p>","more":"<p>聊天機器人的分類方式很多，以知識領域劃分，可分為開放領域（Open Domain）和封閉領域（Close Domain），前者指聊天機器人有基本知識可以回答一般性、閒聊類的問題；後者，聊天機器人的知識則限定在某特定領域，例如：長照、消防…等。本研究將建置一個可以回答長照相關問題的聊天機器人，屬於封閉領域。透過語音的方式 Zenbo 可以和長者互動，亦能適時回答長者對長照的問題。</p>\n<p>若以聊天機器外觀來分類主要可以分為兩種，有實體型聊天機器人和平台型聊天機器人。</p>\n<h1 id=\"實體型聊天機器人\"><a href=\"#實體型聊天機器人\" class=\"headerlink\" title=\"實體型聊天機器人\"></a>實體型聊天機器人</h1><p>實體型機器人有獨立硬體裝置，常見的形式有智慧音箱或陪伴型機器人，例如：ASUS Zenbo、Softbank Pepper、小米的小愛同學、遠傳的愛講智慧音箱…等。通常會搭配智慧家庭應用，可以用語音的方式控制家電、播放音樂、播報新聞…等多種應用。</p>\n<p><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/%E5%AF%A6%E9%AB%94%E5%9E%8B%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA.png\" alt=\"實體型聊天機器人\"></p>\n<p>本研究使用的 Zenbo 機器人即屬於這個類型，Zenbo 具有可愛的外型與內建多項有趣功能，如跟隨、摸頭時會出現害羞表情、講故事…等等。平時在家就能陪伴長者，又能以語音的方式回答長者對於長照的相關的問題，相較於平台型聊天機器人，使用者與機器人間大多透過手機以文字溝通，Zenbo 可愛的外型與語音互動的方式對長者來說更加友善。</p>\n<h2 id=\"Softbank-Pepper-vs-ASUS-Zenbo\"><a href=\"#Softbank-Pepper-vs-ASUS-Zenbo\" class=\"headerlink\" title=\"Softbank Pepper vs. ASUS Zenbo\"></a>Softbank Pepper vs. ASUS Zenbo</h2><p>以同樣都有一個平板的 Pepper 和 Zenbo 來比較。</p>\n<p>Pepper 的產品定位是服務型機器人，主打的是商用，他可以站在店門口，幫忙接待消費者、介紹產品，或是依據消費者的特徵，推薦商品。Zenbo 的定位是陪伴型機器人，可以播放音樂、講故事給小朋友聽，還有與藥局配合，可以語音預約，外送處方箋到宅的服務。</p>\n<p>它們提供給開發者的功能也都很豐富。Pepper 分有「開發用途」及「商業用途」兩種販售模式。如果想開發使用《機器人App》的功能，就要用開發用的Pepper，一台 425000。相對的，Zenbo 就平價很多，儲存容量比較大的版本也只要 24900。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/pepper.png\" alt=\"pepper\"><br>Softbank Pepper</th>\n<th><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/zenbo.png\" alt=\"zenbo\"><br>ASUS Zenbo</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>產品定位</td>\n<td>服務型機器人</td>\n<td>陪伴型機器人</td>\n</tr>\n<tr>\n<td>主要應用場景</td>\n<td>商用，B2B 為主(客戶喜好分析、推薦產品)</td>\n<td>家庭(娛樂、教育、健康照護)</td>\n</tr>\n<tr>\n<td>觸控螢幕</td>\n<td>V</td>\n<td>V</td>\n</tr>\n<tr>\n<td>客製開發功能</td>\n<td>- 使用 ROS 開發<br>- Choregraph 原廠提供的圖形化開發工具<br>- Bluemix 雲端開發平台<br>- 使用 C++ 或 Python 直接控制<br>- 用 Android Studio 開發<br>(Pojenlai, 2016)</td>\n<td>- 使用 Android Studio 開發<br>- App Builder 原廠提供的圖形化開發工具<br>- DDE Editor 可以自行設計語料庫，安裝到 Zenbo<br>- Story Editor 故事編輯器</td>\n</tr>\n<tr>\n<td>售價</td>\n<td>425,000 元 (開發版)<br>26,888 元/月 (商用租賃)</td>\n<td>19,900 元 (32GB)<br>24,900 元 (128GB)</td>\n</tr>\n</tbody></table>\n<p>而我們最後選擇 Zenbo 的主要原因是有兩個。第一，他本來主打的就是陪伴，所以有提供很多陪伴長者跟小孩的功能。第二，考量價格，Zenbo 比Pepper 便宜很多，對使用者的負擔也相對較小。</p>\n<p>Zenbo 是華碩公司於 2017 年推出的陪伴型機器人。內建教育、娛樂、健康照護…等豐富功能，使用者可以用語音的方式與機器人互動。特別的是，相比國外的機器人，因為華碩自建語音資料庫，Zenbo 的用字與發音更符合台灣人習慣。華碩也提供一系列工具，包括：Zenbo SDK、DDE 語音編輯器（DDE Editor）、APP 建置器（Zenbo APP Builder）、故事編輯器（Zenbo Story Editor），讓開發者們能自己撰寫功能。</p>\n<h2 id=\"平台型聊天機器人\"><a href=\"#平台型聊天機器人\" class=\"headerlink\" title=\"平台型聊天機器人\"></a>平台型聊天機器人</h2><p>平台型聊天機器人通常使用手機 APP 或網頁存取，使用者通常使用文字方式與聊天機器人溝通。Facebook Messenger、Line、Telegram 都是常見的平台，可以協助客服人回覆部分常見問題。平台提供API 讓開發者串接，可以自訂回覆內容。</p>\n<p><img src=\"/2021/09/04/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E7%9A%84%E5%88%86%E9%A1%9E%E8%88%87%E6%AF%94%E8%BC%83/%E5%B9%B3%E5%8F%B0%E5%9E%8B%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA.png\" alt=\"平台型聊天機器人\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>沛博科技（無日期）。 Pepper 程式安全性審查說明: 開發指南。檢自：<a href=\"http://www.perobot.com.tw/develop/page/download%E3%80%82\">http://www.perobot.com.tw/develop/page/download。</a></li>\n<li>pojenlai(2016)。pepper robot 程式開發的幾種選擇。檢自：<a href=\"https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/%E3%80%82\">https://pojenlai.wordpress.com/2016/07/05/pepper-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E7%9A%84%E5%B9%BE%E7%A8%AE%E9%81%B8%E6%93%87/。</a></li>\n</ul>"},{"title":"[語料庫模型] 01-TF-IDF與餘弦相似性","date":"2021-09-17T15:44:30.000Z","_content":"\nTF-IDF（Term Frequency - Inverse Document Frequency）和餘弦相似性是整套系統很重要的部分，主要用來建立整個問答集的模型，還有比對使用者輸入的句子和問答集的哪一句最相似。\n\n<!-- more -->\n\n# 簡介\nTF-IDF\n- 常用在資訊檢索與文字探勘的加權方式，是一種統計方法，用來評估一個詞在句子或文件中的重要程度。\n- 應用於中文時，由於中文字詞間不如英文有空白相隔，因此中文語句需先經過適當**斷詞**。\n- 假設**出現越多次的詞是越不重要的詞**。\n\nTF-IDF 分為兩個部分，TF 和 IDF。(IDF 由 DF 轉換而來)\n- TF（詞頻）：一個詞在一個句子中出現的頻率。\n- DF（文件頻率）：是指一個詞出現在幾個句子中。\n- IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。\n\n# TF-IDF 實例說明\n以五個擷取自問答集的問句為例，經過斷詞之後，問句會變成表中的格式。\n\n- 表1\n|編號|問句|\n|---|---| \n|0|['如何', '申請', '長期', '照顧', '服務', '及', '流程', '為', '何', '?']|\n|1|['申請', '長照', '服務', '有', '什麼', '條件', '？']|\n|2|['長期', '照顧', '服務', '項目', '有', '哪些', '？']|\n|3|['何謂', '是', '「', '居家', '服務', '」', '？']|\n|4|['何謂', '「', '喘息', '服務', '」', '？']|\n\n首先，我們會把所有的詞整理成一個集合（圖 1）。再統計每個詞出現在句子中的頻率，例如，「有」出現在第 1、2 句（參考 表格 1、圖 1 綠框、圖 2 綠框）。再統計一個詞出現在幾個句子中，例如，「服務」在五個句子都有，所以相對的 IDF 值就會比較小（參考 表格 1、圖 1 橘框、圖 3 橘框）。IDF 可以被當作是一個權重，用來表示這個詞的重要程度，把 TF * IDF 就會得到這個資料集的模型（圖 4）。\n\n- 圖1\n    ![5例句_WordSet](5例句_WordSet.png)\n- 圖2\n    ![5例句_TF](5例句_TF.png)\n- 圖3\n    ![5例句_DF+IDF](5例句_DF+IDF.png)\n- 圖4\n    ![5例句_TFIDF](5例句_TFIDF.png)\n\nTF-IDF 使用餘弦相似性公式計算出輸入的問句與問答集中每個問題的相似性，再找出相似性最高的前三筆，回傳給使用者端 APP 使用。\n\n# TF-IDF 矩陣\nTF-IDF 可以計算出每個詞在句子中權重分布的狀況，再透過餘弦相似性比較輸入的句子與問答集中每個問題的相似性，最後找到與輸入句子最相符的問答組合。\n\n我們用程式畫了一張圖，每一列代表一個句子，每一欄代表一個詞，顏色深淺代表這個詞在這個句子中的重要性。如截圖所示，欄位個別代表一個句子，每一列則代表每一個詞，由這個矩陣可以觀察到所有權重的分佈狀況。\n\n![category3](category3.png)\n\n> 因整個問答集的問句及詞語太多，完整的截圖放在文中不易閱讀，因此本文中僅使用部分問句與詞語生成圖表示意。\n\n# 餘弦相似性\n這些句子都可以當成是一個一個的向量，當然他的維度比較高，我們這邊就以二維的做示意圖，餘弦相似度無關乎向量大小，重點是向量之間的方向。\n\n本文以二維示意圖說明，假設資料集中有 A、B 兩個句子，C 是要比對的句子。當把 C 放進來一起比較就可以看出，C 和 B 的餘弦相似性比 C 和 A 大。\n\n![餘弦相似性二維示意圖](餘弦相似性二維示意圖.png)\n\n# 結語\n透過 TF-IDF 建立模型，再使用餘弦相似性比對句子間的相似性。基本上本系統最核心的部分就是這兩個部分了。","source":"_posts/語料庫模型-01-TF-IDF與餘弦相似性.md","raw":"---\ntitle: '[語料庫模型] 01-TF-IDF與餘弦相似性'\ndate: 2021-09-17 23:44:30\ntags:\n- 13th鐵人賽\n- TF-IDF\n- 語料庫\n---\n\nTF-IDF（Term Frequency - Inverse Document Frequency）和餘弦相似性是整套系統很重要的部分，主要用來建立整個問答集的模型，還有比對使用者輸入的句子和問答集的哪一句最相似。\n\n<!-- more -->\n\n# 簡介\nTF-IDF\n- 常用在資訊檢索與文字探勘的加權方式，是一種統計方法，用來評估一個詞在句子或文件中的重要程度。\n- 應用於中文時，由於中文字詞間不如英文有空白相隔，因此中文語句需先經過適當**斷詞**。\n- 假設**出現越多次的詞是越不重要的詞**。\n\nTF-IDF 分為兩個部分，TF 和 IDF。(IDF 由 DF 轉換而來)\n- TF（詞頻）：一個詞在一個句子中出現的頻率。\n- DF（文件頻率）：是指一個詞出現在幾個句子中。\n- IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。\n\n# TF-IDF 實例說明\n以五個擷取自問答集的問句為例，經過斷詞之後，問句會變成表中的格式。\n\n- 表1\n|編號|問句|\n|---|---| \n|0|['如何', '申請', '長期', '照顧', '服務', '及', '流程', '為', '何', '?']|\n|1|['申請', '長照', '服務', '有', '什麼', '條件', '？']|\n|2|['長期', '照顧', '服務', '項目', '有', '哪些', '？']|\n|3|['何謂', '是', '「', '居家', '服務', '」', '？']|\n|4|['何謂', '「', '喘息', '服務', '」', '？']|\n\n首先，我們會把所有的詞整理成一個集合（圖 1）。再統計每個詞出現在句子中的頻率，例如，「有」出現在第 1、2 句（參考 表格 1、圖 1 綠框、圖 2 綠框）。再統計一個詞出現在幾個句子中，例如，「服務」在五個句子都有，所以相對的 IDF 值就會比較小（參考 表格 1、圖 1 橘框、圖 3 橘框）。IDF 可以被當作是一個權重，用來表示這個詞的重要程度，把 TF * IDF 就會得到這個資料集的模型（圖 4）。\n\n- 圖1\n    ![5例句_WordSet](5例句_WordSet.png)\n- 圖2\n    ![5例句_TF](5例句_TF.png)\n- 圖3\n    ![5例句_DF+IDF](5例句_DF+IDF.png)\n- 圖4\n    ![5例句_TFIDF](5例句_TFIDF.png)\n\nTF-IDF 使用餘弦相似性公式計算出輸入的問句與問答集中每個問題的相似性，再找出相似性最高的前三筆，回傳給使用者端 APP 使用。\n\n# TF-IDF 矩陣\nTF-IDF 可以計算出每個詞在句子中權重分布的狀況，再透過餘弦相似性比較輸入的句子與問答集中每個問題的相似性，最後找到與輸入句子最相符的問答組合。\n\n我們用程式畫了一張圖，每一列代表一個句子，每一欄代表一個詞，顏色深淺代表這個詞在這個句子中的重要性。如截圖所示，欄位個別代表一個句子，每一列則代表每一個詞，由這個矩陣可以觀察到所有權重的分佈狀況。\n\n![category3](category3.png)\n\n> 因整個問答集的問句及詞語太多，完整的截圖放在文中不易閱讀，因此本文中僅使用部分問句與詞語生成圖表示意。\n\n# 餘弦相似性\n這些句子都可以當成是一個一個的向量，當然他的維度比較高，我們這邊就以二維的做示意圖，餘弦相似度無關乎向量大小，重點是向量之間的方向。\n\n本文以二維示意圖說明，假設資料集中有 A、B 兩個句子，C 是要比對的句子。當把 C 放進來一起比較就可以看出，C 和 B 的餘弦相似性比 C 和 A 大。\n\n![餘弦相似性二維示意圖](餘弦相似性二維示意圖.png)\n\n# 結語\n透過 TF-IDF 建立模型，再使用餘弦相似性比對句子間的相似性。基本上本系統最核心的部分就是這兩個部分了。","slug":"語料庫模型-01-TF-IDF與餘弦相似性","published":1,"updated":"2024-02-24T08:06:01.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myii001jk0jfca9ogdoa","content":"<p>TF-IDF（Term Frequency - Inverse Document Frequency）和餘弦相似性是整套系統很重要的部分，主要用來建立整個問答集的模型，還有比對使用者輸入的句子和問答集的哪一句最相似。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>TF-IDF</p>\n<ul>\n<li>常用在資訊檢索與文字探勘的加權方式，是一種統計方法，用來評估一個詞在句子或文件中的重要程度。</li>\n<li>應用於中文時，由於中文字詞間不如英文有空白相隔，因此中文語句需先經過適當<strong>斷詞</strong>。</li>\n<li>假設<strong>出現越多次的詞是越不重要的詞</strong>。</li>\n</ul>\n<p>TF-IDF 分為兩個部分，TF 和 IDF。(IDF 由 DF 轉換而來)</p>\n<ul>\n<li>TF（詞頻）：一個詞在一個句子中出現的頻率。</li>\n<li>DF（文件頻率）：是指一個詞出現在幾個句子中。</li>\n<li>IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。</li>\n</ul>\n<h1 id=\"TF-IDF-實例說明\"><a href=\"#TF-IDF-實例說明\" class=\"headerlink\" title=\"TF-IDF 實例說明\"></a>TF-IDF 實例說明</h1><p>以五個擷取自問答集的問句為例，經過斷詞之後，問句會變成表中的格式。</p>\n<ul>\n<li>表1<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>問句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>[‘如何’, ‘申請’, ‘長期’, ‘照顧’, ‘服務’, ‘及’, ‘流程’, ‘為’, ‘何’, ‘?’]</td>\n</tr>\n<tr>\n<td>1</td>\n<td>[‘申請’, ‘長照’, ‘服務’, ‘有’, ‘什麼’, ‘條件’, ‘？’]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[‘長期’, ‘照顧’, ‘服務’, ‘項目’, ‘有’, ‘哪些’, ‘？’]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[‘何謂’, ‘是’, ‘「’, ‘居家’, ‘服務’, ‘」’, ‘？’]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[‘何謂’, ‘「’, ‘喘息’, ‘服務’, ‘」’, ‘？’]</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>首先，我們會把所有的詞整理成一個集合（圖 1）。再統計每個詞出現在句子中的頻率，例如，「有」出現在第 1、2 句（參考 表格 1、圖 1 綠框、圖 2 綠框）。再統計一個詞出現在幾個句子中，例如，「服務」在五個句子都有，所以相對的 IDF 值就會比較小（參考 表格 1、圖 1 橘框、圖 3 橘框）。IDF 可以被當作是一個權重，用來表示這個詞的重要程度，把 TF * IDF 就會得到這個資料集的模型（圖 4）。</p>\n<ul>\n<li>圖1<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_WordSet.png\" alt=\"5例句_WordSet\"></li>\n<li>圖2<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_TF.png\" alt=\"5例句_TF\"></li>\n<li>圖3<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_DF+IDF.png\" alt=\"5例句_DF+IDF\"></li>\n<li>圖4<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_TFIDF.png\" alt=\"5例句_TFIDF\"></li>\n</ul>\n<p>TF-IDF 使用餘弦相似性公式計算出輸入的問句與問答集中每個問題的相似性，再找出相似性最高的前三筆，回傳給使用者端 APP 使用。</p>\n<h1 id=\"TF-IDF-矩陣\"><a href=\"#TF-IDF-矩陣\" class=\"headerlink\" title=\"TF-IDF 矩陣\"></a>TF-IDF 矩陣</h1><p>TF-IDF 可以計算出每個詞在句子中權重分布的狀況，再透過餘弦相似性比較輸入的句子與問答集中每個問題的相似性，最後找到與輸入句子最相符的問答組合。</p>\n<p>我們用程式畫了一張圖，每一列代表一個句子，每一欄代表一個詞，顏色深淺代表這個詞在這個句子中的重要性。如截圖所示，欄位個別代表一個句子，每一列則代表每一個詞，由這個矩陣可以觀察到所有權重的分佈狀況。</p>\n<p><img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/category3.png\" alt=\"category3\"></p>\n<blockquote>\n<p>因整個問答集的問句及詞語太多，完整的截圖放在文中不易閱讀，因此本文中僅使用部分問句與詞語生成圖表示意。</p>\n</blockquote>\n<h1 id=\"餘弦相似性\"><a href=\"#餘弦相似性\" class=\"headerlink\" title=\"餘弦相似性\"></a>餘弦相似性</h1><p>這些句子都可以當成是一個一個的向量，當然他的維度比較高，我們這邊就以二維的做示意圖，餘弦相似度無關乎向量大小，重點是向量之間的方向。</p>\n<p>本文以二維示意圖說明，假設資料集中有 A、B 兩個句子，C 是要比對的句子。當把 C 放進來一起比較就可以看出，C 和 B 的餘弦相似性比 C 和 A 大。</p>\n<p><img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7%E4%BA%8C%E7%B6%AD%E7%A4%BA%E6%84%8F%E5%9C%96.png\" alt=\"餘弦相似性二維示意圖\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>透過 TF-IDF 建立模型，再使用餘弦相似性比對句子間的相似性。基本上本系統最核心的部分就是這兩個部分了。</p>\n","site":{"data":{}},"excerpt":"<p>TF-IDF（Term Frequency - Inverse Document Frequency）和餘弦相似性是整套系統很重要的部分，主要用來建立整個問答集的模型，還有比對使用者輸入的句子和問答集的哪一句最相似。</p>","more":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>TF-IDF</p>\n<ul>\n<li>常用在資訊檢索與文字探勘的加權方式，是一種統計方法，用來評估一個詞在句子或文件中的重要程度。</li>\n<li>應用於中文時，由於中文字詞間不如英文有空白相隔，因此中文語句需先經過適當<strong>斷詞</strong>。</li>\n<li>假設<strong>出現越多次的詞是越不重要的詞</strong>。</li>\n</ul>\n<p>TF-IDF 分為兩個部分，TF 和 IDF。(IDF 由 DF 轉換而來)</p>\n<ul>\n<li>TF（詞頻）：一個詞在一個句子中出現的頻率。</li>\n<li>DF（文件頻率）：是指一個詞出現在幾個句子中。</li>\n<li>IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。</li>\n</ul>\n<h1 id=\"TF-IDF-實例說明\"><a href=\"#TF-IDF-實例說明\" class=\"headerlink\" title=\"TF-IDF 實例說明\"></a>TF-IDF 實例說明</h1><p>以五個擷取自問答集的問句為例，經過斷詞之後，問句會變成表中的格式。</p>\n<ul>\n<li>表1<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>問句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>[‘如何’, ‘申請’, ‘長期’, ‘照顧’, ‘服務’, ‘及’, ‘流程’, ‘為’, ‘何’, ‘?’]</td>\n</tr>\n<tr>\n<td>1</td>\n<td>[‘申請’, ‘長照’, ‘服務’, ‘有’, ‘什麼’, ‘條件’, ‘？’]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[‘長期’, ‘照顧’, ‘服務’, ‘項目’, ‘有’, ‘哪些’, ‘？’]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[‘何謂’, ‘是’, ‘「’, ‘居家’, ‘服務’, ‘」’, ‘？’]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[‘何謂’, ‘「’, ‘喘息’, ‘服務’, ‘」’, ‘？’]</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>首先，我們會把所有的詞整理成一個集合（圖 1）。再統計每個詞出現在句子中的頻率，例如，「有」出現在第 1、2 句（參考 表格 1、圖 1 綠框、圖 2 綠框）。再統計一個詞出現在幾個句子中，例如，「服務」在五個句子都有，所以相對的 IDF 值就會比較小（參考 表格 1、圖 1 橘框、圖 3 橘框）。IDF 可以被當作是一個權重，用來表示這個詞的重要程度，把 TF * IDF 就會得到這個資料集的模型（圖 4）。</p>\n<ul>\n<li>圖1<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_WordSet.png\" alt=\"5例句_WordSet\"></li>\n<li>圖2<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_TF.png\" alt=\"5例句_TF\"></li>\n<li>圖3<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_DF+IDF.png\" alt=\"5例句_DF+IDF\"></li>\n<li>圖4<br>  <img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/5%E4%BE%8B%E5%8F%A5_TFIDF.png\" alt=\"5例句_TFIDF\"></li>\n</ul>\n<p>TF-IDF 使用餘弦相似性公式計算出輸入的問句與問答集中每個問題的相似性，再找出相似性最高的前三筆，回傳給使用者端 APP 使用。</p>\n<h1 id=\"TF-IDF-矩陣\"><a href=\"#TF-IDF-矩陣\" class=\"headerlink\" title=\"TF-IDF 矩陣\"></a>TF-IDF 矩陣</h1><p>TF-IDF 可以計算出每個詞在句子中權重分布的狀況，再透過餘弦相似性比較輸入的句子與問答集中每個問題的相似性，最後找到與輸入句子最相符的問答組合。</p>\n<p>我們用程式畫了一張圖，每一列代表一個句子，每一欄代表一個詞，顏色深淺代表這個詞在這個句子中的重要性。如截圖所示，欄位個別代表一個句子，每一列則代表每一個詞，由這個矩陣可以觀察到所有權重的分佈狀況。</p>\n<p><img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/category3.png\" alt=\"category3\"></p>\n<blockquote>\n<p>因整個問答集的問句及詞語太多，完整的截圖放在文中不易閱讀，因此本文中僅使用部分問句與詞語生成圖表示意。</p>\n</blockquote>\n<h1 id=\"餘弦相似性\"><a href=\"#餘弦相似性\" class=\"headerlink\" title=\"餘弦相似性\"></a>餘弦相似性</h1><p>這些句子都可以當成是一個一個的向量，當然他的維度比較高，我們這邊就以二維的做示意圖，餘弦相似度無關乎向量大小，重點是向量之間的方向。</p>\n<p>本文以二維示意圖說明，假設資料集中有 A、B 兩個句子，C 是要比對的句子。當把 C 放進來一起比較就可以看出，C 和 B 的餘弦相似性比 C 和 A 大。</p>\n<p><img src=\"/2021/09/17/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-01-TF-IDF%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7%E4%BA%8C%E7%B6%AD%E7%A4%BA%E6%84%8F%E5%9C%96.png\" alt=\"餘弦相似性二維示意圖\"></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>透過 TF-IDF 建立模型，再使用餘弦相似性比對句子間的相似性。基本上本系統最核心的部分就是這兩個部分了。</p>"},{"title":"[語料庫模型] 02-問答組合分類方式","date":"2021-09-23T14:09:51.000Z","_content":"\n還記得前幾天用爬蟲蒐集到的問答集嗎? 今天我們要來幫這些問答組合分類哦!\n\n> **名詞定義**:\n> 問答組合: 指一組問題+回答，和其他有關於這個問答的相關資訊(來源URL、編號、分類)。\n> 問答集: 多個「問答組合」組成問答集。\n\n<!-- more -->\n\n# Why 為什麼要分類?\n\n我們為什麼要把問答組合分類呢?\n因為他可以幫助我們更精準地找到期望的問答組合。\n\n例如，同樣輸入「我要申請長照」，如果沒有選擇分類，那就會找到「我家人急著要使用輔具，我可以先買再提出申請補助嗎？」，可能的原因是，「長照」這個詞已經在整個問答集裡面出現太多次了，所以就變得不那麼重要。如果是選擇「長照服務介紹與申請」分類，就會找到「如何申請長照服務及流程為何？」，比較符合我們想問的問題。可見將問答組合分類可以提高找到更相符問答組合的機會。\n\n![why](why.jpg)\n\n# What 分成那些類?\n經過整理問答組合可分為五類，分別是長照據點與機構、長照服務介紹與申請、輔具服務、外籍看護相關規範、長照人員培訓與相關規範。使用者可事先選擇要找哪一類的問題，系統會針對該類別的問答組合做搜尋，可找到與使用者輸入的句子更相符的問題。經過分類後，各類別問答組合的數量，請參考表格。\n\n![chart](chart.jpg)\n\n類別的分法，是有個資料來源是「臺中市輔具資源整合網」，所以有很多輔具相關的問題，因此把他們分作一類。外籍看護相關規範的分類是因為生活經驗中，常聽到長輩在討論相關問題，所以特別分出來。其他的分類則參考衛福部常見問題的分類。\n\n|編號|名稱|說明|數量|\n|---|---|---|---|\n|1|長照據點與機構|關於各類長照據點與機構的說明、評鑑、相關法令|139|\n|2|長照服務介紹與申請|不同長照服務介紹、申請資格、服務費用、規範|84|\n|3|輔具服務|輔具租借或購買的資格、補助條件|48|\n|4|外籍看護相關規範|外籍看護的申請資格、申請方式|8|\n|5|長照人員培訓與相關規範|長照人員培訓規範、個案使用服務的認定|177|\n|總計| | |456|\n\n# How 如何分類?\n目前都是採人工分類\n## 單一類別與多個類別比較\n分類過程中會發現有些題目可能同時屬於兩個甚至多個類別。為了比較兩種分類方式，本研究將資料集複製了兩份，一份只有單一類別，並盡量以問題的主要意圖分類；另一份則是列出與問題相關的所有類別。\n\n問答集:\n- 單一分類: https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n- 多個分類: https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n\n分別以兩個問句在單一類別與多個類別時，搜尋到的結果做比較。本研究選擇兩個不同場景可能會出現的問句，比對結果請參考下表。\n\n1. 「我想借輔具」，比較可能是由長者或其家屬提出，且依常理可預期使用者詢問時，會選擇第 3 類別（輔具服務），而此類別在單一類別和多個類別搜尋結果是一樣的。\n\n    **問句: 我想借輔具**\n\n    |類別|單一分類|多個類別|\n    |---|---|---|\n    |0 全部（所有分類）|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|\n    |1 長照據點與機構|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|\n    |2 長照服務介紹與申請|長照服務四包錢是什麼？我可以領到多少錢？(2)|長照服務四包錢是什麼？我可以領到多少錢？(2)|\n    |3 輔具服務|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|\n    |4 外籍看護相關規範|請問何謂可聘僱外籍家庭看護工之特定身障項目重度(或極重度)或鑑定向度?(4)|總則(給付五)_聘僱外籍看護工之長照需要者，特別是身心障礙者不應排除輔具及居家無障礙服務、交通接送等服務。(2;4)|\n    |5 長照人員培訓與相關規範|EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(5)|EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(3;5)|\n\n    > 說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。\n\n2. 「已死亡，還可以申請輔具請款嗎」，這問題有兩種情況，一是家屬不確定長者死亡後，原預計申請的輔具是否還能請領補助款；二是長照相關人員不確定，當長者死亡是否還能核定申請。此時不同身分者選擇的類別可能不相同，家屬可能會選擇第  3  類別（輔具服務），而長照相關人員則可能選擇第  5  類別（長照人員培訓與相關規範）。在這種狀況下，多個類別的分類方式確實可讓使用者在第  5  類別找到答案。\n\n    **問句: 已死亡，還可以申請輔具請款嗎**\n\n    |類別|單一分類|多個類別|\n    |---|---|---|\n    |0 全部（所有分類）|如果請款時，身障者已死亡，如何處理？(3)|如果請款時，身障者已死亡，如何處理？(3;5)|\n    |1 長照據點與機構|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|\n    |2 長照服務介紹與申請|使用長照居家服務需要付錢嗎？(2)|家裡有長輩行動不便，但不符合身障輔具補助資格，有其他的申請管道嗎？(2;3)|\n    |3 輔具服務|如果請款時，身障者已死亡，如何處理？(3)|如果請款時，身障者已死亡，如何處理？(3;5)|\n    |4 外籍看護相關規範|雇主申請補發許可函，是否需要繳交審查費？(4)|雇主申請補發許可函，是否需要繳交審查費？(4)|\n    |5 長照人員培訓與相關規範|點選評估總結確認後，量表內容還可以更改嗎？(5)|如果請款時，身障者已死亡，如何處理？(3;5)|\n\n    > 說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。\n    > 補充: 民眾若需要申請輔具補助，應先提出申請，取得核定公文後，購買輔具才可補助。若有急需可先找輔具資源中心租借。（臺中市輔具資源整合網, 2015）\n\n有兩個原因，使本研究最後選擇「單一類別」的分類方式。\n1. 選擇「所有類別」的時候可以發現，其實有蠻大的機率可以找到預期的問題，所以我們較推薦不知道如何選擇分類時，可以選擇「全部」（所有分類）。\n2. 分類過程中發現，雖然一個問題可能同時屬於多個類別，但還是會比較偏向某個類別。以上述例子為例，「已死亡，還可以申請輔具請款嗎」與輔具補助款相關，依舊比較偏向第 3 類別。\n\n# Why Not 為什麼不自動分類?\n\n**先說結論，我們試用過 K-means 自動分類問答組合，但機器的分類方式不一定適合人類。**\n\nK-means 又叫「K-平均演算法」，是一種常見的非監督式分類演算法。可以將點（資料）分為幾個聚類，而每個點都屬於離它最近的均值點的聚類（k-平均演算法, 2021）。\n\n嘗試使用微軟的 Machine Learning Studio 將全部的問答組合分成 2、3、5 類，發現大概分成 2~3 類應該是比較剛好的，但因為人工分類時是分成五類，所以也把 K-means 分五類的效果拿來比較。\n\n![AzureKmeans_統整](AzureKmeans_統整.png)\n\n下圖中可以看到，最左邊這欄（全部）是人工分類的結果。\n- 分兩類，可以發現 K-means 的 Cluster 0，差不多是人工分類的第5 類、一半的第 2 類、第 3 類；cluster 1 大概是人工的第 1 類、一半的第 2 和第 4 類。\n- 分三類，K-means 把人工分類的第 5 類，拆分到 Cluster 0、Cluster 1；人工分類的第 2 類則分散在三個 Cluster 裡。\n- 分五類的狀況就更分散了，幾乎每個人工分類的類別都被打散到各個 Cluster 中。\n\n![AzureKmeans與人工分類比較](AzureKmeans與人工分類比較.jpg)\n\n雖然 K-means 也能分類，但是程式是依據句子中詞語的相似性分類的，這種分類方式不一定適合人類。我們也發現我們只能稱呼 K-means 的類別做 Cluster 0、Cluster 1，而很難以文字給一個 Cluster 訂下名稱。\n\n> 當然 AI 技術如此發達，要做這種分類應該也是有方法，但本研究中，就只以 K-means 做測試。\n\n# 參考資料\n- 臺中市輔具資源整合網（2015）。常見問題。檢自：https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。\n- 維基百科（2021）。K-平均演算法。檢自：https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95。","source":"_posts/語料庫模型-02-問答組合分類方式.md","raw":"---\ntitle: '[語料庫模型] 02-問答組合分類方式'\ndate: 2021-09-23 22:09:51\ntags:\n- 語料庫\n- 聊天機器人\n- 13th鐵人賽\n---\n\n還記得前幾天用爬蟲蒐集到的問答集嗎? 今天我們要來幫這些問答組合分類哦!\n\n> **名詞定義**:\n> 問答組合: 指一組問題+回答，和其他有關於這個問答的相關資訊(來源URL、編號、分類)。\n> 問答集: 多個「問答組合」組成問答集。\n\n<!-- more -->\n\n# Why 為什麼要分類?\n\n我們為什麼要把問答組合分類呢?\n因為他可以幫助我們更精準地找到期望的問答組合。\n\n例如，同樣輸入「我要申請長照」，如果沒有選擇分類，那就會找到「我家人急著要使用輔具，我可以先買再提出申請補助嗎？」，可能的原因是，「長照」這個詞已經在整個問答集裡面出現太多次了，所以就變得不那麼重要。如果是選擇「長照服務介紹與申請」分類，就會找到「如何申請長照服務及流程為何？」，比較符合我們想問的問題。可見將問答組合分類可以提高找到更相符問答組合的機會。\n\n![why](why.jpg)\n\n# What 分成那些類?\n經過整理問答組合可分為五類，分別是長照據點與機構、長照服務介紹與申請、輔具服務、外籍看護相關規範、長照人員培訓與相關規範。使用者可事先選擇要找哪一類的問題，系統會針對該類別的問答組合做搜尋，可找到與使用者輸入的句子更相符的問題。經過分類後，各類別問答組合的數量，請參考表格。\n\n![chart](chart.jpg)\n\n類別的分法，是有個資料來源是「臺中市輔具資源整合網」，所以有很多輔具相關的問題，因此把他們分作一類。外籍看護相關規範的分類是因為生活經驗中，常聽到長輩在討論相關問題，所以特別分出來。其他的分類則參考衛福部常見問題的分類。\n\n|編號|名稱|說明|數量|\n|---|---|---|---|\n|1|長照據點與機構|關於各類長照據點與機構的說明、評鑑、相關法令|139|\n|2|長照服務介紹與申請|不同長照服務介紹、申請資格、服務費用、規範|84|\n|3|輔具服務|輔具租借或購買的資格、補助條件|48|\n|4|外籍看護相關規範|外籍看護的申請資格、申請方式|8|\n|5|長照人員培訓與相關規範|長照人員培訓規範、個案使用服務的認定|177|\n|總計| | |456|\n\n# How 如何分類?\n目前都是採人工分類\n## 單一類別與多個類別比較\n分類過程中會發現有些題目可能同時屬於兩個甚至多個類別。為了比較兩種分類方式，本研究將資料集複製了兩份，一份只有單一類別，並盡量以問題的主要意圖分類；另一份則是列出與問題相關的所有類別。\n\n問答集:\n- 單一分類: https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n- 多個分類: https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n\n分別以兩個問句在單一類別與多個類別時，搜尋到的結果做比較。本研究選擇兩個不同場景可能會出現的問句，比對結果請參考下表。\n\n1. 「我想借輔具」，比較可能是由長者或其家屬提出，且依常理可預期使用者詢問時，會選擇第 3 類別（輔具服務），而此類別在單一類別和多個類別搜尋結果是一樣的。\n\n    **問句: 我想借輔具**\n\n    |類別|單一分類|多個類別|\n    |---|---|---|\n    |0 全部（所有分類）|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|\n    |1 長照據點與機構|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|\n    |2 長照服務介紹與申請|長照服務四包錢是什麼？我可以領到多少錢？(2)|長照服務四包錢是什麼？我可以領到多少錢？(2)|\n    |3 輔具服務|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)|\n    |4 外籍看護相關規範|請問何謂可聘僱外籍家庭看護工之特定身障項目重度(或極重度)或鑑定向度?(4)|總則(給付五)_聘僱外籍看護工之長照需要者，特別是身心障礙者不應排除輔具及居家無障礙服務、交通接送等服務。(2;4)|\n    |5 長照人員培訓與相關規範|EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(5)|EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(3;5)|\n\n    > 說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。\n\n2. 「已死亡，還可以申請輔具請款嗎」，這問題有兩種情況，一是家屬不確定長者死亡後，原預計申請的輔具是否還能請領補助款；二是長照相關人員不確定，當長者死亡是否還能核定申請。此時不同身分者選擇的類別可能不相同，家屬可能會選擇第  3  類別（輔具服務），而長照相關人員則可能選擇第  5  類別（長照人員培訓與相關規範）。在這種狀況下，多個類別的分類方式確實可讓使用者在第  5  類別找到答案。\n\n    **問句: 已死亡，還可以申請輔具請款嗎**\n\n    |類別|單一分類|多個類別|\n    |---|---|---|\n    |0 全部（所有分類）|如果請款時，身障者已死亡，如何處理？(3)|如果請款時，身障者已死亡，如何處理？(3;5)|\n    |1 長照據點與機構|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)|\n    |2 長照服務介紹與申請|使用長照居家服務需要付錢嗎？(2)|家裡有長輩行動不便，但不符合身障輔具補助資格，有其他的申請管道嗎？(2;3)|\n    |3 輔具服務|如果請款時，身障者已死亡，如何處理？(3)|如果請款時，身障者已死亡，如何處理？(3;5)|\n    |4 外籍看護相關規範|雇主申請補發許可函，是否需要繳交審查費？(4)|雇主申請補發許可函，是否需要繳交審查費？(4)|\n    |5 長照人員培訓與相關規範|點選評估總結確認後，量表內容還可以更改嗎？(5)|如果請款時，身障者已死亡，如何處理？(3;5)|\n\n    > 說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。\n    > 補充: 民眾若需要申請輔具補助，應先提出申請，取得核定公文後，購買輔具才可補助。若有急需可先找輔具資源中心租借。（臺中市輔具資源整合網, 2015）\n\n有兩個原因，使本研究最後選擇「單一類別」的分類方式。\n1. 選擇「所有類別」的時候可以發現，其實有蠻大的機率可以找到預期的問題，所以我們較推薦不知道如何選擇分類時，可以選擇「全部」（所有分類）。\n2. 分類過程中發現，雖然一個問題可能同時屬於多個類別，但還是會比較偏向某個類別。以上述例子為例，「已死亡，還可以申請輔具請款嗎」與輔具補助款相關，依舊比較偏向第 3 類別。\n\n# Why Not 為什麼不自動分類?\n\n**先說結論，我們試用過 K-means 自動分類問答組合，但機器的分類方式不一定適合人類。**\n\nK-means 又叫「K-平均演算法」，是一種常見的非監督式分類演算法。可以將點（資料）分為幾個聚類，而每個點都屬於離它最近的均值點的聚類（k-平均演算法, 2021）。\n\n嘗試使用微軟的 Machine Learning Studio 將全部的問答組合分成 2、3、5 類，發現大概分成 2~3 類應該是比較剛好的，但因為人工分類時是分成五類，所以也把 K-means 分五類的效果拿來比較。\n\n![AzureKmeans_統整](AzureKmeans_統整.png)\n\n下圖中可以看到，最左邊這欄（全部）是人工分類的結果。\n- 分兩類，可以發現 K-means 的 Cluster 0，差不多是人工分類的第5 類、一半的第 2 類、第 3 類；cluster 1 大概是人工的第 1 類、一半的第 2 和第 4 類。\n- 分三類，K-means 把人工分類的第 5 類，拆分到 Cluster 0、Cluster 1；人工分類的第 2 類則分散在三個 Cluster 裡。\n- 分五類的狀況就更分散了，幾乎每個人工分類的類別都被打散到各個 Cluster 中。\n\n![AzureKmeans與人工分類比較](AzureKmeans與人工分類比較.jpg)\n\n雖然 K-means 也能分類，但是程式是依據句子中詞語的相似性分類的，這種分類方式不一定適合人類。我們也發現我們只能稱呼 K-means 的類別做 Cluster 0、Cluster 1，而很難以文字給一個 Cluster 訂下名稱。\n\n> 當然 AI 技術如此發達，要做這種分類應該也是有方法，但本研究中，就只以 K-means 做測試。\n\n# 參考資料\n- 臺中市輔具資源整合網（2015）。常見問題。檢自：https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。\n- 維基百科（2021）。K-平均演算法。檢自：https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95。","slug":"語料庫模型-02-問答組合分類方式","published":1,"updated":"2024-02-24T08:06:01.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myii001lk0jfa7ey3k0k","content":"<p>還記得前幾天用爬蟲蒐集到的問答集嗎? 今天我們要來幫這些問答組合分類哦!</p>\n<blockquote>\n<p><strong>名詞定義</strong>:<br>問答組合: 指一組問題+回答，和其他有關於這個問答的相關資訊(來源URL、編號、分類)。<br>問答集: 多個「問答組合」組成問答集。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"Why-為什麼要分類\"><a href=\"#Why-為什麼要分類\" class=\"headerlink\" title=\"Why 為什麼要分類?\"></a>Why 為什麼要分類?</h1><p>我們為什麼要把問答組合分類呢?<br>因為他可以幫助我們更精準地找到期望的問答組合。</p>\n<p>例如，同樣輸入「我要申請長照」，如果沒有選擇分類，那就會找到「我家人急著要使用輔具，我可以先買再提出申請補助嗎？」，可能的原因是，「長照」這個詞已經在整個問答集裡面出現太多次了，所以就變得不那麼重要。如果是選擇「長照服務介紹與申請」分類，就會找到「如何申請長照服務及流程為何？」，比較符合我們想問的問題。可見將問答組合分類可以提高找到更相符問答組合的機會。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/why.jpg\" alt=\"why\"></p>\n<h1 id=\"What-分成那些類\"><a href=\"#What-分成那些類\" class=\"headerlink\" title=\"What 分成那些類?\"></a>What 分成那些類?</h1><p>經過整理問答組合可分為五類，分別是長照據點與機構、長照服務介紹與申請、輔具服務、外籍看護相關規範、長照人員培訓與相關規範。使用者可事先選擇要找哪一類的問題，系統會針對該類別的問答組合做搜尋，可找到與使用者輸入的句子更相符的問題。經過分類後，各類別問答組合的數量，請參考表格。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/chart.jpg\" alt=\"chart\"></p>\n<p>類別的分法，是有個資料來源是「臺中市輔具資源整合網」，所以有很多輔具相關的問題，因此把他們分作一類。外籍看護相關規範的分類是因為生活經驗中，常聽到長輩在討論相關問題，所以特別分出來。其他的分類則參考衛福部常見問題的分類。</p>\n<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>名稱</th>\n<th>說明</th>\n<th>數量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>長照據點與機構</td>\n<td>關於各類長照據點與機構的說明、評鑑、相關法令</td>\n<td>139</td>\n</tr>\n<tr>\n<td>2</td>\n<td>長照服務介紹與申請</td>\n<td>不同長照服務介紹、申請資格、服務費用、規範</td>\n<td>84</td>\n</tr>\n<tr>\n<td>3</td>\n<td>輔具服務</td>\n<td>輔具租借或購買的資格、補助條件</td>\n<td>48</td>\n</tr>\n<tr>\n<td>4</td>\n<td>外籍看護相關規範</td>\n<td>外籍看護的申請資格、申請方式</td>\n<td>8</td>\n</tr>\n<tr>\n<td>5</td>\n<td>長照人員培訓與相關規範</td>\n<td>長照人員培訓規範、個案使用服務的認定</td>\n<td>177</td>\n</tr>\n<tr>\n<td>總計</td>\n<td></td>\n<td></td>\n<td>456</td>\n</tr>\n</tbody></table>\n<h1 id=\"How-如何分類\"><a href=\"#How-如何分類\" class=\"headerlink\" title=\"How 如何分類?\"></a>How 如何分類?</h1><p>目前都是採人工分類</p>\n<h2 id=\"單一類別與多個類別比較\"><a href=\"#單一類別與多個類別比較\" class=\"headerlink\" title=\"單一類別與多個類別比較\"></a>單一類別與多個類別比較</h2><p>分類過程中會發現有些題目可能同時屬於兩個甚至多個類別。為了比較兩種分類方式，本研究將資料集複製了兩份，一份只有單一類別，並盡量以問題的主要意圖分類；另一份則是列出與問題相關的所有類別。</p>\n<p>問答集:</p>\n<ul>\n<li>單一分類: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></li>\n<li>多個分類: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></li>\n</ul>\n<p>分別以兩個問句在單一類別與多個類別時，搜尋到的結果做比較。本研究選擇兩個不同場景可能會出現的問句，比對結果請參考下表。</p>\n<ol>\n<li><p>「我想借輔具」，比較可能是由長者或其家屬提出，且依常理可預期使用者詢問時，會選擇第 3 類別（輔具服務），而此類別在單一類別和多個類別搜尋結果是一樣的。</p>\n<p> <strong>問句: 我想借輔具</strong></p>\n<table>\n<thead>\n<tr>\n<th>類別</th>\n<th>單一分類</th>\n<th>多個類別</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 全部（所有分類）</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n</tr>\n<tr>\n<td>1 長照據點與機構</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n</tr>\n<tr>\n<td>2 長照服務介紹與申請</td>\n<td>長照服務四包錢是什麼？我可以領到多少錢？(2)</td>\n<td>長照服務四包錢是什麼？我可以領到多少錢？(2)</td>\n</tr>\n<tr>\n<td>3 輔具服務</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n</tr>\n<tr>\n<td>4 外籍看護相關規範</td>\n<td>請問何謂可聘僱外籍家庭看護工之特定身障項目重度(或極重度)或鑑定向度?(4)</td>\n<td>總則(給付五)_聘僱外籍看護工之長照需要者，特別是身心障礙者不應排除輔具及居家無障礙服務、交通接送等服務。(2;4)</td>\n</tr>\n<tr>\n<td>5 長照人員培訓與相關規範</td>\n<td>EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(5)</td>\n<td>EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(3;5)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。</p>\n</blockquote>\n</li>\n<li><p>「已死亡，還可以申請輔具請款嗎」，這問題有兩種情況，一是家屬不確定長者死亡後，原預計申請的輔具是否還能請領補助款；二是長照相關人員不確定，當長者死亡是否還能核定申請。此時不同身分者選擇的類別可能不相同，家屬可能會選擇第  3  類別（輔具服務），而長照相關人員則可能選擇第  5  類別（長照人員培訓與相關規範）。在這種狀況下，多個類別的分類方式確實可讓使用者在第  5  類別找到答案。</p>\n<p> <strong>問句: 已死亡，還可以申請輔具請款嗎</strong></p>\n<table>\n<thead>\n<tr>\n<th>類別</th>\n<th>單一分類</th>\n<th>多個類別</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 全部（所有分類）</td>\n<td>如果請款時，身障者已死亡，如何處理？(3)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n<tr>\n<td>1 長照據點與機構</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n</tr>\n<tr>\n<td>2 長照服務介紹與申請</td>\n<td>使用長照居家服務需要付錢嗎？(2)</td>\n<td>家裡有長輩行動不便，但不符合身障輔具補助資格，有其他的申請管道嗎？(2;3)</td>\n</tr>\n<tr>\n<td>3 輔具服務</td>\n<td>如果請款時，身障者已死亡，如何處理？(3)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n<tr>\n<td>4 外籍看護相關規範</td>\n<td>雇主申請補發許可函，是否需要繳交審查費？(4)</td>\n<td>雇主申請補發許可函，是否需要繳交審查費？(4)</td>\n</tr>\n<tr>\n<td>5 長照人員培訓與相關規範</td>\n<td>點選評估總結確認後，量表內容還可以更改嗎？(5)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。<br>補充: 民眾若需要申請輔具補助，應先提出申請，取得核定公文後，購買輔具才可補助。若有急需可先找輔具資源中心租借。（臺中市輔具資源整合網, 2015）</p>\n</blockquote>\n</li>\n</ol>\n<p>有兩個原因，使本研究最後選擇「單一類別」的分類方式。</p>\n<ol>\n<li>選擇「所有類別」的時候可以發現，其實有蠻大的機率可以找到預期的問題，所以我們較推薦不知道如何選擇分類時，可以選擇「全部」（所有分類）。</li>\n<li>分類過程中發現，雖然一個問題可能同時屬於多個類別，但還是會比較偏向某個類別。以上述例子為例，「已死亡，還可以申請輔具請款嗎」與輔具補助款相關，依舊比較偏向第 3 類別。</li>\n</ol>\n<h1 id=\"Why-Not-為什麼不自動分類\"><a href=\"#Why-Not-為什麼不自動分類\" class=\"headerlink\" title=\"Why Not 為什麼不自動分類?\"></a>Why Not 為什麼不自動分類?</h1><p><strong>先說結論，我們試用過 K-means 自動分類問答組合，但機器的分類方式不一定適合人類。</strong></p>\n<p>K-means 又叫「K-平均演算法」，是一種常見的非監督式分類演算法。可以將點（資料）分為幾個聚類，而每個點都屬於離它最近的均值點的聚類（k-平均演算法, 2021）。</p>\n<p>嘗試使用微軟的 Machine Learning Studio 將全部的問答組合分成 2、3、5 類，發現大概分成 2~3 類應該是比較剛好的，但因為人工分類時是分成五類，所以也把 K-means 分五類的效果拿來比較。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/AzureKmeans_%E7%B5%B1%E6%95%B4.png\" alt=\"AzureKmeans_統整\"></p>\n<p>下圖中可以看到，最左邊這欄（全部）是人工分類的結果。</p>\n<ul>\n<li>分兩類，可以發現 K-means 的 Cluster 0，差不多是人工分類的第5 類、一半的第 2 類、第 3 類；cluster 1 大概是人工的第 1 類、一半的第 2 和第 4 類。</li>\n<li>分三類，K-means 把人工分類的第 5 類，拆分到 Cluster 0、Cluster 1；人工分類的第 2 類則分散在三個 Cluster 裡。</li>\n<li>分五類的狀況就更分散了，幾乎每個人工分類的類別都被打散到各個 Cluster 中。</li>\n</ul>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/AzureKmeans%E8%88%87%E4%BA%BA%E5%B7%A5%E5%88%86%E9%A1%9E%E6%AF%94%E8%BC%83.jpg\" alt=\"AzureKmeans與人工分類比較\"></p>\n<p>雖然 K-means 也能分類，但是程式是依據句子中詞語的相似性分類的，這種分類方式不一定適合人類。我們也發現我們只能稱呼 K-means 的類別做 Cluster 0、Cluster 1，而很難以文字給一個 Cluster 訂下名稱。</p>\n<blockquote>\n<p>當然 AI 技術如此發達，要做這種分類應該也是有方法，但本研究中，就只以 K-means 做測試。</p>\n</blockquote>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>臺中市輔具資源整合網（2015）。常見問題。檢自：<a href=\"https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E3%80%82\">https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。</a></li>\n<li>維基百科（2021）。K-平均演算法。檢自：<a href=\"https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95%E3%80%82\">https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>還記得前幾天用爬蟲蒐集到的問答集嗎? 今天我們要來幫這些問答組合分類哦!</p>\n<blockquote>\n<p><strong>名詞定義</strong>:<br>問答組合: 指一組問題+回答，和其他有關於這個問答的相關資訊(來源URL、編號、分類)。<br>問答集: 多個「問答組合」組成問答集。</p>\n</blockquote>","more":"<h1 id=\"Why-為什麼要分類\"><a href=\"#Why-為什麼要分類\" class=\"headerlink\" title=\"Why 為什麼要分類?\"></a>Why 為什麼要分類?</h1><p>我們為什麼要把問答組合分類呢?<br>因為他可以幫助我們更精準地找到期望的問答組合。</p>\n<p>例如，同樣輸入「我要申請長照」，如果沒有選擇分類，那就會找到「我家人急著要使用輔具，我可以先買再提出申請補助嗎？」，可能的原因是，「長照」這個詞已經在整個問答集裡面出現太多次了，所以就變得不那麼重要。如果是選擇「長照服務介紹與申請」分類，就會找到「如何申請長照服務及流程為何？」，比較符合我們想問的問題。可見將問答組合分類可以提高找到更相符問答組合的機會。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/why.jpg\" alt=\"why\"></p>\n<h1 id=\"What-分成那些類\"><a href=\"#What-分成那些類\" class=\"headerlink\" title=\"What 分成那些類?\"></a>What 分成那些類?</h1><p>經過整理問答組合可分為五類，分別是長照據點與機構、長照服務介紹與申請、輔具服務、外籍看護相關規範、長照人員培訓與相關規範。使用者可事先選擇要找哪一類的問題，系統會針對該類別的問答組合做搜尋，可找到與使用者輸入的句子更相符的問題。經過分類後，各類別問答組合的數量，請參考表格。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/chart.jpg\" alt=\"chart\"></p>\n<p>類別的分法，是有個資料來源是「臺中市輔具資源整合網」，所以有很多輔具相關的問題，因此把他們分作一類。外籍看護相關規範的分類是因為生活經驗中，常聽到長輩在討論相關問題，所以特別分出來。其他的分類則參考衛福部常見問題的分類。</p>\n<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>名稱</th>\n<th>說明</th>\n<th>數量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>長照據點與機構</td>\n<td>關於各類長照據點與機構的說明、評鑑、相關法令</td>\n<td>139</td>\n</tr>\n<tr>\n<td>2</td>\n<td>長照服務介紹與申請</td>\n<td>不同長照服務介紹、申請資格、服務費用、規範</td>\n<td>84</td>\n</tr>\n<tr>\n<td>3</td>\n<td>輔具服務</td>\n<td>輔具租借或購買的資格、補助條件</td>\n<td>48</td>\n</tr>\n<tr>\n<td>4</td>\n<td>外籍看護相關規範</td>\n<td>外籍看護的申請資格、申請方式</td>\n<td>8</td>\n</tr>\n<tr>\n<td>5</td>\n<td>長照人員培訓與相關規範</td>\n<td>長照人員培訓規範、個案使用服務的認定</td>\n<td>177</td>\n</tr>\n<tr>\n<td>總計</td>\n<td></td>\n<td></td>\n<td>456</td>\n</tr>\n</tbody></table>\n<h1 id=\"How-如何分類\"><a href=\"#How-如何分類\" class=\"headerlink\" title=\"How 如何分類?\"></a>How 如何分類?</h1><p>目前都是採人工分類</p>\n<h2 id=\"單一類別與多個類別比較\"><a href=\"#單一類別與多個類別比較\" class=\"headerlink\" title=\"單一類別與多個類別比較\"></a>單一類別與多個類別比較</h2><p>分類過程中會發現有些題目可能同時屬於兩個甚至多個類別。為了比較兩種分類方式，本研究將資料集複製了兩份，一份只有單一類別，並盡量以問題的主要意圖分類；另一份則是列出與問題相關的所有類別。</p>\n<p>問答集:</p>\n<ul>\n<li>單一分類: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/dev/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></li>\n<li>多個分類: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/Feature/multi-categories/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a></li>\n</ul>\n<p>分別以兩個問句在單一類別與多個類別時，搜尋到的結果做比較。本研究選擇兩個不同場景可能會出現的問句，比對結果請參考下表。</p>\n<ol>\n<li><p>「我想借輔具」，比較可能是由長者或其家屬提出，且依常理可預期使用者詢問時，會選擇第 3 類別（輔具服務），而此類別在單一類別和多個類別搜尋結果是一樣的。</p>\n<p> <strong>問句: 我想借輔具</strong></p>\n<table>\n<thead>\n<tr>\n<th>類別</th>\n<th>單一分類</th>\n<th>多個類別</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 全部（所有分類）</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n</tr>\n<tr>\n<td>1 長照據點與機構</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n</tr>\n<tr>\n<td>2 長照服務介紹與申請</td>\n<td>長照服務四包錢是什麼？我可以領到多少錢？(2)</td>\n<td>長照服務四包錢是什麼？我可以領到多少錢？(2)</td>\n</tr>\n<tr>\n<td>3 輔具服務</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n<td>我家人急著要使用輔具，我可以先買再提出申請補助嗎？(3)</td>\n</tr>\n<tr>\n<td>4 外籍看護相關規範</td>\n<td>請問何謂可聘僱外籍家庭看護工之特定身障項目重度(或極重度)或鑑定向度?(4)</td>\n<td>總則(給付五)_聘僱外籍看護工之長照需要者，特別是身心障礙者不應排除輔具及居家無障礙服務、交通接送等服務。(2;4)</td>\n</tr>\n<tr>\n<td>5 長照人員培訓與相關規範</td>\n<td>EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(5)</td>\n<td>EA01_為何多項輔具載明「本項輔具選配服務得由輔具銷售人員逕行提供」？部分輔具為何不能短期租賃？如何運用二手輔具？(3;5)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。</p>\n</blockquote>\n</li>\n<li><p>「已死亡，還可以申請輔具請款嗎」，這問題有兩種情況，一是家屬不確定長者死亡後，原預計申請的輔具是否還能請領補助款；二是長照相關人員不確定，當長者死亡是否還能核定申請。此時不同身分者選擇的類別可能不相同，家屬可能會選擇第  3  類別（輔具服務），而長照相關人員則可能選擇第  5  類別（長照人員培訓與相關規範）。在這種狀況下，多個類別的分類方式確實可讓使用者在第  5  類別找到答案。</p>\n<p> <strong>問句: 已死亡，還可以申請輔具請款嗎</strong></p>\n<table>\n<thead>\n<tr>\n<th>類別</th>\n<th>單一分類</th>\n<th>多個類別</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 全部（所有分類）</td>\n<td>如果請款時，身障者已死亡，如何處理？(3)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n<tr>\n<td>1 長照據點與機構</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n<td>提供輔具、交通接送或緊急救援之服務單位是否需設立長照機構？(1)</td>\n</tr>\n<tr>\n<td>2 長照服務介紹與申請</td>\n<td>使用長照居家服務需要付錢嗎？(2)</td>\n<td>家裡有長輩行動不便，但不符合身障輔具補助資格，有其他的申請管道嗎？(2;3)</td>\n</tr>\n<tr>\n<td>3 輔具服務</td>\n<td>如果請款時，身障者已死亡，如何處理？(3)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n<tr>\n<td>4 外籍看護相關規範</td>\n<td>雇主申請補發許可函，是否需要繳交審查費？(4)</td>\n<td>雇主申請補發許可函，是否需要繳交審查費？(4)</td>\n</tr>\n<tr>\n<td>5 長照人員培訓與相關規範</td>\n<td>點選評估總結確認後，量表內容還可以更改嗎？(5)</td>\n<td>如果請款時，身障者已死亡，如何處理？(3;5)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>說明: 比對結果的問句後方括號內是該問句的類別，若有多個類別則以分號（；）區隔。<br>補充: 民眾若需要申請輔具補助，應先提出申請，取得核定公文後，購買輔具才可補助。若有急需可先找輔具資源中心租借。（臺中市輔具資源整合網, 2015）</p>\n</blockquote>\n</li>\n</ol>\n<p>有兩個原因，使本研究最後選擇「單一類別」的分類方式。</p>\n<ol>\n<li>選擇「所有類別」的時候可以發現，其實有蠻大的機率可以找到預期的問題，所以我們較推薦不知道如何選擇分類時，可以選擇「全部」（所有分類）。</li>\n<li>分類過程中發現，雖然一個問題可能同時屬於多個類別，但還是會比較偏向某個類別。以上述例子為例，「已死亡，還可以申請輔具請款嗎」與輔具補助款相關，依舊比較偏向第 3 類別。</li>\n</ol>\n<h1 id=\"Why-Not-為什麼不自動分類\"><a href=\"#Why-Not-為什麼不自動分類\" class=\"headerlink\" title=\"Why Not 為什麼不自動分類?\"></a>Why Not 為什麼不自動分類?</h1><p><strong>先說結論，我們試用過 K-means 自動分類問答組合，但機器的分類方式不一定適合人類。</strong></p>\n<p>K-means 又叫「K-平均演算法」，是一種常見的非監督式分類演算法。可以將點（資料）分為幾個聚類，而每個點都屬於離它最近的均值點的聚類（k-平均演算法, 2021）。</p>\n<p>嘗試使用微軟的 Machine Learning Studio 將全部的問答組合分成 2、3、5 類，發現大概分成 2~3 類應該是比較剛好的，但因為人工分類時是分成五類，所以也把 K-means 分五類的效果拿來比較。</p>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/AzureKmeans_%E7%B5%B1%E6%95%B4.png\" alt=\"AzureKmeans_統整\"></p>\n<p>下圖中可以看到，最左邊這欄（全部）是人工分類的結果。</p>\n<ul>\n<li>分兩類，可以發現 K-means 的 Cluster 0，差不多是人工分類的第5 類、一半的第 2 類、第 3 類；cluster 1 大概是人工的第 1 類、一半的第 2 和第 4 類。</li>\n<li>分三類，K-means 把人工分類的第 5 類，拆分到 Cluster 0、Cluster 1；人工分類的第 2 類則分散在三個 Cluster 裡。</li>\n<li>分五類的狀況就更分散了，幾乎每個人工分類的類別都被打散到各個 Cluster 中。</li>\n</ul>\n<p><img src=\"/2021/09/23/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-02-%E5%95%8F%E7%AD%94%E7%B5%84%E5%90%88%E5%88%86%E9%A1%9E%E6%96%B9%E5%BC%8F/AzureKmeans%E8%88%87%E4%BA%BA%E5%B7%A5%E5%88%86%E9%A1%9E%E6%AF%94%E8%BC%83.jpg\" alt=\"AzureKmeans與人工分類比較\"></p>\n<p>雖然 K-means 也能分類，但是程式是依據句子中詞語的相似性分類的，這種分類方式不一定適合人類。我們也發現我們只能稱呼 K-means 的類別做 Cluster 0、Cluster 1，而很難以文字給一個 Cluster 訂下名稱。</p>\n<blockquote>\n<p>當然 AI 技術如此發達，要做這種分類應該也是有方法，但本研究中，就只以 K-means 做測試。</p>\n</blockquote>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>臺中市輔具資源整合網（2015）。常見問題。檢自：<a href=\"https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E3%80%82\">https://www.tatrc-taichung.com.tw/QuestionAnswer?SearchForm.QuestionAnswerType=%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c。</a></li>\n<li>維基百科（2021）。K-平均演算法。檢自：<a href=\"https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95%E3%80%82\">https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95。</a></li>\n</ul>"},{"title":"[語料庫模型] 04-斷詞工具比較 Jieba vs CKIP","date":"2021-09-26T11:53:41.000Z","_content":"\n我們前面說過，中文不像英文，字與字中間與空白相間，所以中文句子要搭配 TF-IDF 前，需要先經過適當的斷詞。中文斷詞領域最常見的兩套工具就是 Jieba（結巴）和 CKIP 了。今天主要介紹我選擇 CKIP 而非 Jieba 的原因。\n<!-- more -->\n\nJieba 來自中國，而 CKIP 來自中研院，我們發現同樣的句子，將「長」、「照」判斷為兩個詞，而 CKIP 則是將「長照」視為一個詞，可能原因是台灣與中國用語不同。考慮問答集中可能會有較多台灣用語，所以本研究最終選擇使用中研院製作的 CKIP。\n\n![長照斷詞](長照斷詞.jpg)\n\n接著分別以TF-IDF搭配Jieba和CKIP，比較以「長照」為關鍵字搜尋最接近的問句，使用Jieba斷詞的結果，系統找到的是「什麼是定點乾燥?」；使用CKIP斷詞的結果，系統找到的是「長照服務專線」。很明顯使用CKIP斷詞，系統能找到更貼切的問句。\n\n![斷詞與TFIDF](斷詞與TFIDF.jpg)\n","source":"_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP.md","raw":"---\ntitle: '[語料庫模型] 04-斷詞工具比較 Jieba vs CKIP'\ndate: 2021-09-26 19:53:41\ntags:\n- 斷詞\n- CKIP\n- Jieba\n- 13th鐵人賽\n- 語料庫\n---\n\n我們前面說過，中文不像英文，字與字中間與空白相間，所以中文句子要搭配 TF-IDF 前，需要先經過適當的斷詞。中文斷詞領域最常見的兩套工具就是 Jieba（結巴）和 CKIP 了。今天主要介紹我選擇 CKIP 而非 Jieba 的原因。\n<!-- more -->\n\nJieba 來自中國，而 CKIP 來自中研院，我們發現同樣的句子，將「長」、「照」判斷為兩個詞，而 CKIP 則是將「長照」視為一個詞，可能原因是台灣與中國用語不同。考慮問答集中可能會有較多台灣用語，所以本研究最終選擇使用中研院製作的 CKIP。\n\n![長照斷詞](長照斷詞.jpg)\n\n接著分別以TF-IDF搭配Jieba和CKIP，比較以「長照」為關鍵字搜尋最接近的問句，使用Jieba斷詞的結果，系統找到的是「什麼是定點乾燥?」；使用CKIP斷詞的結果，系統找到的是「長照服務專線」。很明顯使用CKIP斷詞，系統能找到更貼切的問句。\n\n![斷詞與TFIDF](斷詞與TFIDF.jpg)\n","slug":"語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP","published":1,"updated":"2024-02-24T08:06:01.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myii001nk0jfbexm0v2g","content":"<p>我們前面說過，中文不像英文，字與字中間與空白相間，所以中文句子要搭配 TF-IDF 前，需要先經過適當的斷詞。中文斷詞領域最常見的兩套工具就是 Jieba（結巴）和 CKIP 了。今天主要介紹我選擇 CKIP 而非 Jieba 的原因。</p>\n<span id=\"more\"></span>\n\n<p>Jieba 來自中國，而 CKIP 來自中研院，我們發現同樣的句子，將「長」、「照」判斷為兩個詞，而 CKIP 則是將「長照」視為一個詞，可能原因是台灣與中國用語不同。考慮問答集中可能會有較多台灣用語，所以本研究最終選擇使用中研院製作的 CKIP。</p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/%E9%95%B7%E7%85%A7%E6%96%B7%E8%A9%9E.jpg\" alt=\"長照斷詞\"></p>\n<p>接著分別以TF-IDF搭配Jieba和CKIP，比較以「長照」為關鍵字搜尋最接近的問句，使用Jieba斷詞的結果，系統找到的是「什麼是定點乾燥?」；使用CKIP斷詞的結果，系統找到的是「長照服務專線」。很明顯使用CKIP斷詞，系統能找到更貼切的問句。</p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/%E6%96%B7%E8%A9%9E%E8%88%87TFIDF.jpg\" alt=\"斷詞與TFIDF\"></p>\n","site":{"data":{}},"excerpt":"<p>我們前面說過，中文不像英文，字與字中間與空白相間，所以中文句子要搭配 TF-IDF 前，需要先經過適當的斷詞。中文斷詞領域最常見的兩套工具就是 Jieba（結巴）和 CKIP 了。今天主要介紹我選擇 CKIP 而非 Jieba 的原因。</p>","more":"<p>Jieba 來自中國，而 CKIP 來自中研院，我們發現同樣的句子，將「長」、「照」判斷為兩個詞，而 CKIP 則是將「長照」視為一個詞，可能原因是台灣與中國用語不同。考慮問答集中可能會有較多台灣用語，所以本研究最終選擇使用中研院製作的 CKIP。</p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/%E9%95%B7%E7%85%A7%E6%96%B7%E8%A9%9E.jpg\" alt=\"長照斷詞\"></p>\n<p>接著分別以TF-IDF搭配Jieba和CKIP，比較以「長照」為關鍵字搜尋最接近的問句，使用Jieba斷詞的結果，系統找到的是「什麼是定點乾燥?」；使用CKIP斷詞的結果，系統找到的是「長照服務專線」。很明顯使用CKIP斷詞，系統能找到更貼切的問句。</p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/%E6%96%B7%E8%A9%9E%E8%88%87TFIDF.jpg\" alt=\"斷詞與TFIDF\"></p>"},{"title":"[語料庫模型] 05-實體對應","date":"2021-09-26T13:57:31.000Z","_content":"\n在語句中常會出現概念相似的詞，包括某類物品、地名、時間...等。例如，輪椅、拐杖、助行器、電動床都屬於輔具實體；早上、中午、下午、傍晚屬於時間實體。將這些詞語對應到所屬的類別，可以使程式判斷使用者意圖時更貼近。\n<!-- more -->\n\n本研究使用 JSON 檔案紀錄詞語及其實體，並在程式完成斷詞後，將詞語一一對應到實體。需要增加實體時，可以直接修改檔案。\n實體對應設定檔: https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json\n\n![部分實體對應截圖](部分實體對應截圖.png)\n\n# 程式講解\n完整程式在這邊: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n## 設定是否加標籤\n首先我在最上方的設計了一個變數，控制是否要為問句加上標籤。\n```python\n\"\"\"\nLABEL = True | False\ndefault: True\n\"\"\"\nLABEL = True\n```\n\n## 判斷是否加標籤\n接著程式會判斷本次製作模型，是否需要加標籤。若是，執行下方程式碼；若否跳過此段不執行。\n```python\n\"\"\"use labeled or unlabeled\"\"\"\nif LABEL:\n    label_conf = json.load(open(\"/home/yr/PycharmProjects/nlp/docs/entities_config.json\", \"r\"))\n    docs_words_labeled = list()\n    for doc_words in docs_words:\n        doc_labeled = add_label(doc_words, label_conf)\n    docs_words = docs_words_labeled\n```\n`open(\"檔案位址\", \"讀取模式\")` 是開啟前面我們設計好的設定檔。因為剛讀入的設定檔是純文字，因此接著使用 `json.load()` 將它轉成 json 格式。接下來使用迴圈為每一句問句加上標籤，並存入 `docs_words_labeled` 的 list 之中。\n\n## 加標籤函式\n主要負責為句子加上標籤。\n```python\ndef add_label(doc,\n              label_config=json.load(open(\"/home/yr/PycharmProjects/nlp/docs/entities_config.json\", \"r\"))):\n    \"\"\"labeling\"\"\"\n    doc_tmp = list()\n    for word in doc:\n        word_tmp = word\n        for entity_name in label_config:\n            if word in label_config[entity_name]:\n                word_tmp = entity_name\n        doc_tmp.append(word_tmp)\n    docs_words_labeled.append(doc_tmp)\n    if LOG:\n        print(\"before labeling:\\t{}\".format(doc))\n        print(\"after labeling:\\t\\t{}\".format(doc_tmp))\n    return doc_tmp\n```\n先講參數部分\n- `doc`: 要加標籤的句子\n- `label_config`: 標籤的設定檔。這邊是 Python 的一個特別的寫法，當沒有傳入參數時，直接使用預設值。\n\n昨天我們先斷過詞了，所以接下是把每詞拿出來和設定檔比對若有符合，就把詞的部分改成標籤。像是這樣:\n\n```\nBefore: [\"請問\", \"哪裡\", \"可以\", \"借\", \"輪椅\"]\nAfter:  [\"請問\", \"哪裡\", \"可以\", \"借\", \"<輔具>\"]\n```\n如此一來，不管今天使用者想借的是什麼輔具，都可以對應到問題囉!\n","source":"_posts/語料庫模型-05-實體對應.md","raw":"---\ntitle: '[語料庫模型] 05-實體對應'\ndate: 2021-09-26 21:57:31\ntags:\n- 語料庫\n- 聊天機器人\n- 13th鐵人賽\n---\n\n在語句中常會出現概念相似的詞，包括某類物品、地名、時間...等。例如，輪椅、拐杖、助行器、電動床都屬於輔具實體；早上、中午、下午、傍晚屬於時間實體。將這些詞語對應到所屬的類別，可以使程式判斷使用者意圖時更貼近。\n<!-- more -->\n\n本研究使用 JSON 檔案紀錄詞語及其實體，並在程式完成斷詞後，將詞語一一對應到實體。需要增加實體時，可以直接修改檔案。\n實體對應設定檔: https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json\n\n![部分實體對應截圖](部分實體對應截圖.png)\n\n# 程式講解\n完整程式在這邊: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n## 設定是否加標籤\n首先我在最上方的設計了一個變數，控制是否要為問句加上標籤。\n```python\n\"\"\"\nLABEL = True | False\ndefault: True\n\"\"\"\nLABEL = True\n```\n\n## 判斷是否加標籤\n接著程式會判斷本次製作模型，是否需要加標籤。若是，執行下方程式碼；若否跳過此段不執行。\n```python\n\"\"\"use labeled or unlabeled\"\"\"\nif LABEL:\n    label_conf = json.load(open(\"/home/yr/PycharmProjects/nlp/docs/entities_config.json\", \"r\"))\n    docs_words_labeled = list()\n    for doc_words in docs_words:\n        doc_labeled = add_label(doc_words, label_conf)\n    docs_words = docs_words_labeled\n```\n`open(\"檔案位址\", \"讀取模式\")` 是開啟前面我們設計好的設定檔。因為剛讀入的設定檔是純文字，因此接著使用 `json.load()` 將它轉成 json 格式。接下來使用迴圈為每一句問句加上標籤，並存入 `docs_words_labeled` 的 list 之中。\n\n## 加標籤函式\n主要負責為句子加上標籤。\n```python\ndef add_label(doc,\n              label_config=json.load(open(\"/home/yr/PycharmProjects/nlp/docs/entities_config.json\", \"r\"))):\n    \"\"\"labeling\"\"\"\n    doc_tmp = list()\n    for word in doc:\n        word_tmp = word\n        for entity_name in label_config:\n            if word in label_config[entity_name]:\n                word_tmp = entity_name\n        doc_tmp.append(word_tmp)\n    docs_words_labeled.append(doc_tmp)\n    if LOG:\n        print(\"before labeling:\\t{}\".format(doc))\n        print(\"after labeling:\\t\\t{}\".format(doc_tmp))\n    return doc_tmp\n```\n先講參數部分\n- `doc`: 要加標籤的句子\n- `label_config`: 標籤的設定檔。這邊是 Python 的一個特別的寫法，當沒有傳入參數時，直接使用預設值。\n\n昨天我們先斷過詞了，所以接下是把每詞拿出來和設定檔比對若有符合，就把詞的部分改成標籤。像是這樣:\n\n```\nBefore: [\"請問\", \"哪裡\", \"可以\", \"借\", \"輪椅\"]\nAfter:  [\"請問\", \"哪裡\", \"可以\", \"借\", \"<輔具>\"]\n```\n如此一來，不管今天使用者想借的是什麼輔具，都可以對應到問題囉!\n","slug":"語料庫模型-05-實體對應","published":1,"updated":"2024-02-24T08:06:01.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myii001qk0jfe6gw1fkn","content":"<p>在語句中常會出現概念相似的詞，包括某類物品、地名、時間…等。例如，輪椅、拐杖、助行器、電動床都屬於輔具實體；早上、中午、下午、傍晚屬於時間實體。將這些詞語對應到所屬的類別，可以使程式判斷使用者意圖時更貼近。</p>\n<span id=\"more\"></span>\n\n<p>本研究使用 JSON 檔案紀錄詞語及其實體，並在程式完成斷詞後，將詞語一一對應到實體。需要增加實體時，可以直接修改檔案。<br>實體對應設定檔: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json</a></p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-05-%E5%AF%A6%E9%AB%94%E5%B0%8D%E6%87%89/%E9%83%A8%E5%88%86%E5%AF%A6%E9%AB%94%E5%B0%8D%E6%87%89%E6%88%AA%E5%9C%96.png\" alt=\"部分實體對應截圖\"></p>\n<h1 id=\"程式講解\"><a href=\"#程式講解\" class=\"headerlink\" title=\"程式講解\"></a>程式講解</h1><p>完整程式在這邊: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<h2 id=\"設定是否加標籤\"><a href=\"#設定是否加標籤\" class=\"headerlink\" title=\"設定是否加標籤\"></a>設定是否加標籤</h2><p>首先我在最上方的設計了一個變數，控制是否要為問句加上標籤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">LABEL = True | False</span></span><br><span class=\"line\"><span class=\"string\">default: True</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">LABEL = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判斷是否加標籤\"><a href=\"#判斷是否加標籤\" class=\"headerlink\" title=\"判斷是否加標籤\"></a>判斷是否加標籤</h2><p>接著程式會判斷本次製作模型，是否需要加標籤。若是，執行下方程式碼；若否跳過此段不執行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;use labeled or unlabeled&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> LABEL:</span><br><span class=\"line\">    label_conf = json.load(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/docs/entities_config.json&quot;</span>, <span class=\"string\">&quot;r&quot;</span>))</span><br><span class=\"line\">    docs_words_labeled = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> doc_words <span class=\"keyword\">in</span> docs_words:</span><br><span class=\"line\">        doc_labeled = add_label(doc_words, label_conf)</span><br><span class=\"line\">    docs_words = docs_words_labeled</span><br></pre></td></tr></table></figure>\n<p><code>open(&quot;檔案位址&quot;, &quot;讀取模式&quot;)</code> 是開啟前面我們設計好的設定檔。因為剛讀入的設定檔是純文字，因此接著使用 <code>json.load()</code> 將它轉成 json 格式。接下來使用迴圈為每一句問句加上標籤，並存入 <code>docs_words_labeled</code> 的 list 之中。</p>\n<h2 id=\"加標籤函式\"><a href=\"#加標籤函式\" class=\"headerlink\" title=\"加標籤函式\"></a>加標籤函式</h2><p>主要負責為句子加上標籤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_label</span>(<span class=\"params\">doc,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              label_config=json.load(<span class=\"params\"><span class=\"built_in\">open</span>(<span class=\"params\"><span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/docs/entities_config.json&quot;</span>, <span class=\"string\">&quot;r&quot;</span></span>)</span>)</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;labeling&quot;&quot;&quot;</span></span><br><span class=\"line\">    doc_tmp = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> doc:</span><br><span class=\"line\">        word_tmp = word</span><br><span class=\"line\">        <span class=\"keyword\">for</span> entity_name <span class=\"keyword\">in</span> label_config:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> label_config[entity_name]:</span><br><span class=\"line\">                word_tmp = entity_name</span><br><span class=\"line\">        doc_tmp.append(word_tmp)</span><br><span class=\"line\">    docs_words_labeled.append(doc_tmp)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;before labeling:\\t&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(doc))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;after labeling:\\t\\t&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(doc_tmp))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doc_tmp</span><br></pre></td></tr></table></figure>\n<p>先講參數部分</p>\n<ul>\n<li><code>doc</code>: 要加標籤的句子</li>\n<li><code>label_config</code>: 標籤的設定檔。這邊是 Python 的一個特別的寫法，當沒有傳入參數時，直接使用預設值。</li>\n</ul>\n<p>昨天我們先斷過詞了，所以接下是把每詞拿出來和設定檔比對若有符合，就把詞的部分改成標籤。像是這樣:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before: [&quot;請問&quot;, &quot;哪裡&quot;, &quot;可以&quot;, &quot;借&quot;, &quot;輪椅&quot;]</span><br><span class=\"line\">After:  [&quot;請問&quot;, &quot;哪裡&quot;, &quot;可以&quot;, &quot;借&quot;, &quot;&lt;輔具&gt;&quot;]</span><br></pre></td></tr></table></figure>\n<p>如此一來，不管今天使用者想借的是什麼輔具，都可以對應到問題囉!</p>\n","site":{"data":{}},"excerpt":"<p>在語句中常會出現概念相似的詞，包括某類物品、地名、時間…等。例如，輪椅、拐杖、助行器、電動床都屬於輔具實體；早上、中午、下午、傍晚屬於時間實體。將這些詞語對應到所屬的類別，可以使程式判斷使用者意圖時更貼近。</p>","more":"<p>本研究使用 JSON 檔案紀錄詞語及其實體，並在程式完成斷詞後，將詞語一一對應到實體。需要增加實體時，可以直接修改檔案。<br>實體對應設定檔: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/entities_config.json</a></p>\n<p><img src=\"/2021/09/26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-05-%E5%AF%A6%E9%AB%94%E5%B0%8D%E6%87%89/%E9%83%A8%E5%88%86%E5%AF%A6%E9%AB%94%E5%B0%8D%E6%87%89%E6%88%AA%E5%9C%96.png\" alt=\"部分實體對應截圖\"></p>\n<h1 id=\"程式講解\"><a href=\"#程式講解\" class=\"headerlink\" title=\"程式講解\"></a>程式講解</h1><p>完整程式在這邊: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<h2 id=\"設定是否加標籤\"><a href=\"#設定是否加標籤\" class=\"headerlink\" title=\"設定是否加標籤\"></a>設定是否加標籤</h2><p>首先我在最上方的設計了一個變數，控制是否要為問句加上標籤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">LABEL = True | False</span></span><br><span class=\"line\"><span class=\"string\">default: True</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">LABEL = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判斷是否加標籤\"><a href=\"#判斷是否加標籤\" class=\"headerlink\" title=\"判斷是否加標籤\"></a>判斷是否加標籤</h2><p>接著程式會判斷本次製作模型，是否需要加標籤。若是，執行下方程式碼；若否跳過此段不執行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;use labeled or unlabeled&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> LABEL:</span><br><span class=\"line\">    label_conf = json.load(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/docs/entities_config.json&quot;</span>, <span class=\"string\">&quot;r&quot;</span>))</span><br><span class=\"line\">    docs_words_labeled = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> doc_words <span class=\"keyword\">in</span> docs_words:</span><br><span class=\"line\">        doc_labeled = add_label(doc_words, label_conf)</span><br><span class=\"line\">    docs_words = docs_words_labeled</span><br></pre></td></tr></table></figure>\n<p><code>open(&quot;檔案位址&quot;, &quot;讀取模式&quot;)</code> 是開啟前面我們設計好的設定檔。因為剛讀入的設定檔是純文字，因此接著使用 <code>json.load()</code> 將它轉成 json 格式。接下來使用迴圈為每一句問句加上標籤，並存入 <code>docs_words_labeled</code> 的 list 之中。</p>\n<h2 id=\"加標籤函式\"><a href=\"#加標籤函式\" class=\"headerlink\" title=\"加標籤函式\"></a>加標籤函式</h2><p>主要負責為句子加上標籤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_label</span>(<span class=\"params\">doc,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              label_config=json.load(<span class=\"params\"><span class=\"built_in\">open</span>(<span class=\"params\"><span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/docs/entities_config.json&quot;</span>, <span class=\"string\">&quot;r&quot;</span></span>)</span>)</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;labeling&quot;&quot;&quot;</span></span><br><span class=\"line\">    doc_tmp = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> doc:</span><br><span class=\"line\">        word_tmp = word</span><br><span class=\"line\">        <span class=\"keyword\">for</span> entity_name <span class=\"keyword\">in</span> label_config:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> label_config[entity_name]:</span><br><span class=\"line\">                word_tmp = entity_name</span><br><span class=\"line\">        doc_tmp.append(word_tmp)</span><br><span class=\"line\">    docs_words_labeled.append(doc_tmp)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;before labeling:\\t&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(doc))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;after labeling:\\t\\t&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(doc_tmp))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doc_tmp</span><br></pre></td></tr></table></figure>\n<p>先講參數部分</p>\n<ul>\n<li><code>doc</code>: 要加標籤的句子</li>\n<li><code>label_config</code>: 標籤的設定檔。這邊是 Python 的一個特別的寫法，當沒有傳入參數時，直接使用預設值。</li>\n</ul>\n<p>昨天我們先斷過詞了，所以接下是把每詞拿出來和設定檔比對若有符合，就把詞的部分改成標籤。像是這樣:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before: [&quot;請問&quot;, &quot;哪裡&quot;, &quot;可以&quot;, &quot;借&quot;, &quot;輪椅&quot;]</span><br><span class=\"line\">After:  [&quot;請問&quot;, &quot;哪裡&quot;, &quot;可以&quot;, &quot;借&quot;, &quot;&lt;輔具&gt;&quot;]</span><br></pre></td></tr></table></figure>\n<p>如此一來，不管今天使用者想借的是什麼輔具，都可以對應到問題囉!</p>"},{"title":"[語料庫模型] 08-繪製語料庫模型Heatmap圖","date":"2021-10-04T14:00:37.000Z","_content":"\n莫煩 Python 的原版程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n今天要來介紹繪製語料庫模型分布狀況的 Heatmap，成果圖大概會長這樣\n<!-- more -->\n\n- 圖片截自 [莫煩Pythton](https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/)\n    ![tfidf_matrix](tfidf_matrix.png)\n- 以我的語料庫之第三類別繪製\n    ![category3](category3.png)\n\n認真觀察圖片，以詞的部分來看，可以發現越常出現的詞，會呈現 **淺色+多格**；少出現的詞會呈現 **深色+少格**。\n以一個句子來看，每個有出現在句中的詞，會呈現深淺不一的顏色，其中**顏色越深的部分，代表這個句子中越重要的詞**。\n> TF-IDF 假設出現越多次的詞越不重要\n\n# 程式碼\n```python\nplt.rcParams['font.sans-serif'] = ['simhei']\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['axes.unicode_minus'] = False\n\n\ndef show_tfidf(tfidf, vocb, filename):\n    # [n_vocab, n_doc]\n    plt.imshow(tfidf, cmap=\"YlGn\", vmin=tfidf.min(), vmax=tfidf.max())\n    plt.xticks(np.arange(tfidf.shape[1]), vocb, fontsize=6, rotation=90)\n    plt.yticks(np.arange(tfidf.shape[0]), np.arange(1, tfidf.shape[1] + 1), fontsize=6)\n    plt.tight_layout()\n    plt.savefig(\"./visual/results/%s_%d.png\" % (filename, calendar.timegm(time.gmtime())), format=\"png\", dpi=500)\n    plt.rcParams['font.family'] = 'AR PL UKai CN'\n    plt.show()\n```\n\n## 遇到的問題\n\n在執行的過程中，其實遇到一些問題，所以這段程式碼是根據莫煩 Python 的範例修改的。\n\n由於我的語料庫是中文為主，所以使用預設字體時遇到中文缺字很嚴重的狀況，幾乎全都變成方框。後來參考了這篇文章 [centos下python使用matplotlib绘图出现中文乱码](https://blog.csdn.net/zhuxian2009/article/details/100149759)，修改了預設字體後，才能正常顯示。\n> BTW，我的環境是 Ubuntu 20.04\n\n另外，還有另一個問題，一開始我用來畫 Heatmap 的資料是整個語料庫，就變成用 matplot 的小視窗可以看到完整版，但截圖下來所有的字就會全擠在一起，可讀性很差，所以後來才改成只用第三類的資料來畫。\n\n最後，為了可以保存每次執行生成的圖片，不會被洗掉，我修改了檔名的格式，可以依當下的 timestamp 生成，就不會重複了。\n\n# 結語\n畫圖的部分滿有趣的，平常只看數據，不一定看得出詞權重的關係，一旦畫成了 Heatmap，可以更視覺化的了解 TF-IDF 的意義。\n\n# 參考資料\n- [MorvanZhou/NLP-Tutorials](https://github.com/MorvanZhou/NLP-Tutorials)\n- [统计学让搜索速度起飞 | 莫煩Pytthon](https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/)\n- [centos下python使用matplotlib绘图出现中文乱码](https://blog.csdn.net/zhuxian2009/article/details/100149759)\n","source":"_posts/語料庫模型-08-繪製語料庫模型Heatmap圖.md","raw":"---\ntitle: '[語料庫模型] 08-繪製語料庫模型Heatmap圖'\ndate: 2021-10-04 22:00:37\ntags:\n- 語料庫\n- 13th鐵人賽\n- matplotlib\n---\n\n莫煩 Python 的原版程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n今天要來介紹繪製語料庫模型分布狀況的 Heatmap，成果圖大概會長這樣\n<!-- more -->\n\n- 圖片截自 [莫煩Pythton](https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/)\n    ![tfidf_matrix](tfidf_matrix.png)\n- 以我的語料庫之第三類別繪製\n    ![category3](category3.png)\n\n認真觀察圖片，以詞的部分來看，可以發現越常出現的詞，會呈現 **淺色+多格**；少出現的詞會呈現 **深色+少格**。\n以一個句子來看，每個有出現在句中的詞，會呈現深淺不一的顏色，其中**顏色越深的部分，代表這個句子中越重要的詞**。\n> TF-IDF 假設出現越多次的詞越不重要\n\n# 程式碼\n```python\nplt.rcParams['font.sans-serif'] = ['simhei']\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['axes.unicode_minus'] = False\n\n\ndef show_tfidf(tfidf, vocb, filename):\n    # [n_vocab, n_doc]\n    plt.imshow(tfidf, cmap=\"YlGn\", vmin=tfidf.min(), vmax=tfidf.max())\n    plt.xticks(np.arange(tfidf.shape[1]), vocb, fontsize=6, rotation=90)\n    plt.yticks(np.arange(tfidf.shape[0]), np.arange(1, tfidf.shape[1] + 1), fontsize=6)\n    plt.tight_layout()\n    plt.savefig(\"./visual/results/%s_%d.png\" % (filename, calendar.timegm(time.gmtime())), format=\"png\", dpi=500)\n    plt.rcParams['font.family'] = 'AR PL UKai CN'\n    plt.show()\n```\n\n## 遇到的問題\n\n在執行的過程中，其實遇到一些問題，所以這段程式碼是根據莫煩 Python 的範例修改的。\n\n由於我的語料庫是中文為主，所以使用預設字體時遇到中文缺字很嚴重的狀況，幾乎全都變成方框。後來參考了這篇文章 [centos下python使用matplotlib绘图出现中文乱码](https://blog.csdn.net/zhuxian2009/article/details/100149759)，修改了預設字體後，才能正常顯示。\n> BTW，我的環境是 Ubuntu 20.04\n\n另外，還有另一個問題，一開始我用來畫 Heatmap 的資料是整個語料庫，就變成用 matplot 的小視窗可以看到完整版，但截圖下來所有的字就會全擠在一起，可讀性很差，所以後來才改成只用第三類的資料來畫。\n\n最後，為了可以保存每次執行生成的圖片，不會被洗掉，我修改了檔名的格式，可以依當下的 timestamp 生成，就不會重複了。\n\n# 結語\n畫圖的部分滿有趣的，平常只看數據，不一定看得出詞權重的關係，一旦畫成了 Heatmap，可以更視覺化的了解 TF-IDF 的意義。\n\n# 參考資料\n- [MorvanZhou/NLP-Tutorials](https://github.com/MorvanZhou/NLP-Tutorials)\n- [统计学让搜索速度起飞 | 莫煩Pytthon](https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/)\n- [centos下python使用matplotlib绘图出现中文乱码](https://blog.csdn.net/zhuxian2009/article/details/100149759)\n","slug":"語料庫模型-08-繪製語料庫模型Heatmap圖","published":1,"updated":"2024-02-24T08:06:01.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myij001sk0jfb3encnxr","content":"<p>莫煩 Python 的原版程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a><br>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<p>今天要來介紹繪製語料庫模型分布狀況的 Heatmap，成果圖大概會長這樣</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>圖片截自 <a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/\">莫煩Pythton</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-08-%E7%B9%AA%E8%A3%BD%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8BHeatmap%E5%9C%96/tfidf_matrix.png\" alt=\"tfidf_matrix\"></li>\n<li>以我的語料庫之第三類別繪製<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-08-%E7%B9%AA%E8%A3%BD%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8BHeatmap%E5%9C%96/category3.png\" alt=\"category3\"></li>\n</ul>\n<p>認真觀察圖片，以詞的部分來看，可以發現越常出現的詞，會呈現 <strong>淺色+多格</strong>；少出現的詞會呈現 <strong>深色+少格</strong>。<br>以一個句子來看，每個有出現在句中的詞，會呈現深淺不一的顏色，其中<strong>顏色越深的部分，代表這個句子中越重要的詞</strong>。</p>\n<blockquote>\n<p>TF-IDF 假設出現越多次的詞越不重要</p>\n</blockquote>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;simhei&#x27;</span>]</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.family&#x27;</span>] = <span class=\"string\">&#x27;sans-serif&#x27;</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_tfidf</span>(<span class=\"params\">tfidf, vocb, filename</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># [n_vocab, n_doc]</span></span><br><span class=\"line\">    plt.imshow(tfidf, cmap=<span class=\"string\">&quot;YlGn&quot;</span>, vmin=tfidf.<span class=\"built_in\">min</span>(), vmax=tfidf.<span class=\"built_in\">max</span>())</span><br><span class=\"line\">    plt.xticks(np.arange(tfidf.shape[<span class=\"number\">1</span>]), vocb, fontsize=<span class=\"number\">6</span>, rotation=<span class=\"number\">90</span>)</span><br><span class=\"line\">    plt.yticks(np.arange(tfidf.shape[<span class=\"number\">0</span>]), np.arange(<span class=\"number\">1</span>, tfidf.shape[<span class=\"number\">1</span>] + <span class=\"number\">1</span>), fontsize=<span class=\"number\">6</span>)</span><br><span class=\"line\">    plt.tight_layout()</span><br><span class=\"line\">    plt.savefig(<span class=\"string\">&quot;./visual/results/%s_%d.png&quot;</span> % (filename, calendar.timegm(time.gmtime())), <span class=\"built_in\">format</span>=<span class=\"string\">&quot;png&quot;</span>, dpi=<span class=\"number\">500</span>)</span><br><span class=\"line\">    plt.rcParams[<span class=\"string\">&#x27;font.family&#x27;</span>] = <span class=\"string\">&#x27;AR PL UKai CN&#x27;</span></span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的問題\"><a href=\"#遇到的問題\" class=\"headerlink\" title=\"遇到的問題\"></a>遇到的問題</h2><p>在執行的過程中，其實遇到一些問題，所以這段程式碼是根據莫煩 Python 的範例修改的。</p>\n<p>由於我的語料庫是中文為主，所以使用預設字體時遇到中文缺字很嚴重的狀況，幾乎全都變成方框。後來參考了這篇文章 <a href=\"https://blog.csdn.net/zhuxian2009/article/details/100149759\">centos下python使用matplotlib绘图出现中文乱码</a>，修改了預設字體後，才能正常顯示。</p>\n<blockquote>\n<p>BTW，我的環境是 Ubuntu 20.04</p>\n</blockquote>\n<p>另外，還有另一個問題，一開始我用來畫 Heatmap 的資料是整個語料庫，就變成用 matplot 的小視窗可以看到完整版，但截圖下來所有的字就會全擠在一起，可讀性很差，所以後來才改成只用第三類的資料來畫。</p>\n<p>最後，為了可以保存每次執行生成的圖片，不會被洗掉，我修改了檔名的格式，可以依當下的 timestamp 生成，就不會重複了。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>畫圖的部分滿有趣的，平常只看數據，不一定看得出詞權重的關係，一旦畫成了 Heatmap，可以更視覺化的了解 TF-IDF 的意義。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">MorvanZhou/NLP-Tutorials</a></li>\n<li><a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/\">统计学让搜索速度起飞 | 莫煩Pytthon</a></li>\n<li><a href=\"https://blog.csdn.net/zhuxian2009/article/details/100149759\">centos下python使用matplotlib绘图出现中文乱码</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>莫煩 Python 的原版程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a><br>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<p>今天要來介紹繪製語料庫模型分布狀況的 Heatmap，成果圖大概會長這樣</p>","more":"<ul>\n<li>圖片截自 <a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/\">莫煩Pythton</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-08-%E7%B9%AA%E8%A3%BD%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8BHeatmap%E5%9C%96/tfidf_matrix.png\" alt=\"tfidf_matrix\"></li>\n<li>以我的語料庫之第三類別繪製<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-08-%E7%B9%AA%E8%A3%BD%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8BHeatmap%E5%9C%96/category3.png\" alt=\"category3\"></li>\n</ul>\n<p>認真觀察圖片，以詞的部分來看，可以發現越常出現的詞，會呈現 <strong>淺色+多格</strong>；少出現的詞會呈現 <strong>深色+少格</strong>。<br>以一個句子來看，每個有出現在句中的詞，會呈現深淺不一的顏色，其中<strong>顏色越深的部分，代表這個句子中越重要的詞</strong>。</p>\n<blockquote>\n<p>TF-IDF 假設出現越多次的詞越不重要</p>\n</blockquote>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;simhei&#x27;</span>]</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.family&#x27;</span>] = <span class=\"string\">&#x27;sans-serif&#x27;</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_tfidf</span>(<span class=\"params\">tfidf, vocb, filename</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># [n_vocab, n_doc]</span></span><br><span class=\"line\">    plt.imshow(tfidf, cmap=<span class=\"string\">&quot;YlGn&quot;</span>, vmin=tfidf.<span class=\"built_in\">min</span>(), vmax=tfidf.<span class=\"built_in\">max</span>())</span><br><span class=\"line\">    plt.xticks(np.arange(tfidf.shape[<span class=\"number\">1</span>]), vocb, fontsize=<span class=\"number\">6</span>, rotation=<span class=\"number\">90</span>)</span><br><span class=\"line\">    plt.yticks(np.arange(tfidf.shape[<span class=\"number\">0</span>]), np.arange(<span class=\"number\">1</span>, tfidf.shape[<span class=\"number\">1</span>] + <span class=\"number\">1</span>), fontsize=<span class=\"number\">6</span>)</span><br><span class=\"line\">    plt.tight_layout()</span><br><span class=\"line\">    plt.savefig(<span class=\"string\">&quot;./visual/results/%s_%d.png&quot;</span> % (filename, calendar.timegm(time.gmtime())), <span class=\"built_in\">format</span>=<span class=\"string\">&quot;png&quot;</span>, dpi=<span class=\"number\">500</span>)</span><br><span class=\"line\">    plt.rcParams[<span class=\"string\">&#x27;font.family&#x27;</span>] = <span class=\"string\">&#x27;AR PL UKai CN&#x27;</span></span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的問題\"><a href=\"#遇到的問題\" class=\"headerlink\" title=\"遇到的問題\"></a>遇到的問題</h2><p>在執行的過程中，其實遇到一些問題，所以這段程式碼是根據莫煩 Python 的範例修改的。</p>\n<p>由於我的語料庫是中文為主，所以使用預設字體時遇到中文缺字很嚴重的狀況，幾乎全都變成方框。後來參考了這篇文章 <a href=\"https://blog.csdn.net/zhuxian2009/article/details/100149759\">centos下python使用matplotlib绘图出现中文乱码</a>，修改了預設字體後，才能正常顯示。</p>\n<blockquote>\n<p>BTW，我的環境是 Ubuntu 20.04</p>\n</blockquote>\n<p>另外，還有另一個問題，一開始我用來畫 Heatmap 的資料是整個語料庫，就變成用 matplot 的小視窗可以看到完整版，但截圖下來所有的字就會全擠在一起，可讀性很差，所以後來才改成只用第三類的資料來畫。</p>\n<p>最後，為了可以保存每次執行生成的圖片，不會被洗掉，我修改了檔名的格式，可以依當下的 timestamp 生成，就不會重複了。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>畫圖的部分滿有趣的，平常只看數據，不一定看得出詞權重的關係，一旦畫成了 Heatmap，可以更視覺化的了解 TF-IDF 的意義。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">MorvanZhou/NLP-Tutorials</a></li>\n<li><a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/tfidf/\">统计学让搜索速度起飞 | 莫煩Pytthon</a></li>\n<li><a href=\"https://blog.csdn.net/zhuxian2009/article/details/100149759\">centos下python使用matplotlib绘图出现中文乱码</a></li>\n</ul>"},{"title":"[語料庫模型] 06-程式碼: TF、IDF、TF-IDF","date":"2021-09-28T14:35:37.000Z","_content":"\n今天和明天的主題會以講解程式碼為主，其中 TF-IDF 演算法主要來自莫煩 Pythton。\n莫煩 Python 原版程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n<!-- more -->\n\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n> 不確定我改了哪些東西(我也不記得了QQ)，大部分應該只有加上印 log 的部分吧。\n\n很重要，再提醒一次，中文要做 TF-IDF 要先經過斷詞，作法請參考[前天的文章](../../26/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/)。 今天的 code 建議大家可以搭配 debug 模式使用，一行一行執行可以更清楚運作的步驟唷。\n\n# 預處理\n1. 讀檔\n2. 斷詞\n3. 將詞做成 set\n    ```\n    v2i = {'word': index}\n    i2v = {index: 'word'}\n    ```\n\n# 計算 TF(Term Frequency)\n代表一個詞在一篇文章(一個句子)中出現的頻率。\n\n## 程式碼\n```python\ndef get_tf(method=\"log\"):\n    \"\"\"term frequency: how frequent a word appears in a doc\"\"\"\n    _tf = np.zeros((len(vocab), len(docs)), dtype=np.float64)  # [n_vocab, n_doc]\n    for i, d in enumerate(docs_words):\n        counter = Counter(d)\n        for v in counter.keys():\n            _tf[v2i[v], i] = counter[v] / counter.most_common(1)[0][1]\n\n    weighted_tf = tf_methods.get(method, None)\n    if weighted_tf is None:\n        raise ValueError\n\n    return weighted_tf(_tf)\n```\n\n## 步驟\n1. 先建一個2維矩陣 `_tf = [詞數, 句子數]`\n2. 依序填入\n    ![formula](formula.png)\n    ![tf_](tf_.png)\n3. 每個欄位都取自然對數\n    ![tf](tf.png)\n    > **why 取對數?**\n    > [處理資料時，對資料取對數的意義](https://www.itread01.com/content/1543225745.html)\n    > log 以 e 為底的圖\n    > ![log](log.png)\n    > 取log優點\n    > - 縮小資料的絕對數值，方便計算。\n    > - 對數值小的部分差異的敏感程度比數值大的部分的差異敏感程度更高。\n    > - 取對數之後不會改變資料的性質和相關關係，但壓縮了變數的尺度，資料更加平穩\n\n# 算 IDF\n- DF（文件頻率）：是指一個詞出現在幾個句子中。\n- IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。\n\n## 程式碼\n```python\ndef get_idf(method=\"log\"):\n    \"\"\"df: document frequency\"\"\"\n    \"\"\"inverse document frequency: low idf for a word appears in more docs, mean less important\"\"\"\n    df = np.zeros((len(i2v), 1))  # [n_vocab, 1]\n    for i in range(len(i2v)):\n        d_count = 0\n        for d in docs_words:\n            d_count += 1 if i2v[i] in d else 0\n        df[i, 0] = d_count\n    if LOG:\n        print(\"\\ndf samples:\\n\", df)\n        \"\"\"print df to a csv file\"\"\"\n        csv_writer = CsvWriter(\"df\")\n        csv_writer.write_head(list(v2i))\n        csv_writer.write_row(df)\n\n    idf_fn = idf_methods.get(method, None)\n    if idf_fn is None:\n        raise ValueError\n    return idf_fn(df)\n```\n\n## 步驟\n1. 先算 df\n    1. 建一個2維矩陣 `df = [n_vocab, 1]`\n    2. 依序填入\n        ![formula1](formula1.png)\n2. 轉成 idf\n   1. 逐一帶入公式\n        ![formula2](formula2.png)\n    > 如果詞語不在資料中，就導致分母為零，因此分母通常會加一\n    > — from wiki https://zh.wikipedia.org/wiki/Tf-idf\n\n注意觀察兩張圖，在 df 的數字越大，在 idf\n![df](df.png)\n![idf](idf.png)\n\n# 算 TF-IDF\nTF-IDF 其實就是將 TF 加權 IDF 後的結果。\n\n公式: `tf_idf = tf * idf`\n\n注意這邊是「乘」，不是矩陣乘法的那個 dot 哦。兩者在 Python 裡的寫法不一樣。\n\n看個示意圖:\na 的第一列都乘以 c 的第一列\na 的第二列都乘以 c 的第二列\n...\n![示意圖](示意圖.png)\n\n\n對應到程式碼裡的幾個陣列，他們的 size 分別是這樣的:\n```\ntf [n_vocab, n_doc]\ndf [n_vocab, 1]\ntf-idf [n_vocab, n_doc]\n```\n\n將 `tf` * `idf` 就會等於 `tf_idf` 囉!\n\n\n# 結語\n到這邊，語料庫模型(`tf_idf`)就建完了。明天會介紹，當我們接收到一個新句子，要如何比較它和其他句子的相似性。\n\n好了，明天見！\n","source":"_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF.md","raw":"---\ntitle: '[語料庫模型] 06-程式碼: TF、IDF、TF-IDF'\ndate: 2021-09-28 22:35:37\ntags:\n- 13th鐵人賽\n- TF-IDF\n- 語料庫\n---\n\n今天和明天的主題會以講解程式碼為主，其中 TF-IDF 演算法主要來自莫煩 Pythton。\n莫煩 Python 原版程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n<!-- more -->\n\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n> 不確定我改了哪些東西(我也不記得了QQ)，大部分應該只有加上印 log 的部分吧。\n\n很重要，再提醒一次，中文要做 TF-IDF 要先經過斷詞，作法請參考[前天的文章](../../26/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/)。 今天的 code 建議大家可以搭配 debug 模式使用，一行一行執行可以更清楚運作的步驟唷。\n\n# 預處理\n1. 讀檔\n2. 斷詞\n3. 將詞做成 set\n    ```\n    v2i = {'word': index}\n    i2v = {index: 'word'}\n    ```\n\n# 計算 TF(Term Frequency)\n代表一個詞在一篇文章(一個句子)中出現的頻率。\n\n## 程式碼\n```python\ndef get_tf(method=\"log\"):\n    \"\"\"term frequency: how frequent a word appears in a doc\"\"\"\n    _tf = np.zeros((len(vocab), len(docs)), dtype=np.float64)  # [n_vocab, n_doc]\n    for i, d in enumerate(docs_words):\n        counter = Counter(d)\n        for v in counter.keys():\n            _tf[v2i[v], i] = counter[v] / counter.most_common(1)[0][1]\n\n    weighted_tf = tf_methods.get(method, None)\n    if weighted_tf is None:\n        raise ValueError\n\n    return weighted_tf(_tf)\n```\n\n## 步驟\n1. 先建一個2維矩陣 `_tf = [詞數, 句子數]`\n2. 依序填入\n    ![formula](formula.png)\n    ![tf_](tf_.png)\n3. 每個欄位都取自然對數\n    ![tf](tf.png)\n    > **why 取對數?**\n    > [處理資料時，對資料取對數的意義](https://www.itread01.com/content/1543225745.html)\n    > log 以 e 為底的圖\n    > ![log](log.png)\n    > 取log優點\n    > - 縮小資料的絕對數值，方便計算。\n    > - 對數值小的部分差異的敏感程度比數值大的部分的差異敏感程度更高。\n    > - 取對數之後不會改變資料的性質和相關關係，但壓縮了變數的尺度，資料更加平穩\n\n# 算 IDF\n- DF（文件頻率）：是指一個詞出現在幾個句子中。\n- IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。\n\n## 程式碼\n```python\ndef get_idf(method=\"log\"):\n    \"\"\"df: document frequency\"\"\"\n    \"\"\"inverse document frequency: low idf for a word appears in more docs, mean less important\"\"\"\n    df = np.zeros((len(i2v), 1))  # [n_vocab, 1]\n    for i in range(len(i2v)):\n        d_count = 0\n        for d in docs_words:\n            d_count += 1 if i2v[i] in d else 0\n        df[i, 0] = d_count\n    if LOG:\n        print(\"\\ndf samples:\\n\", df)\n        \"\"\"print df to a csv file\"\"\"\n        csv_writer = CsvWriter(\"df\")\n        csv_writer.write_head(list(v2i))\n        csv_writer.write_row(df)\n\n    idf_fn = idf_methods.get(method, None)\n    if idf_fn is None:\n        raise ValueError\n    return idf_fn(df)\n```\n\n## 步驟\n1. 先算 df\n    1. 建一個2維矩陣 `df = [n_vocab, 1]`\n    2. 依序填入\n        ![formula1](formula1.png)\n2. 轉成 idf\n   1. 逐一帶入公式\n        ![formula2](formula2.png)\n    > 如果詞語不在資料中，就導致分母為零，因此分母通常會加一\n    > — from wiki https://zh.wikipedia.org/wiki/Tf-idf\n\n注意觀察兩張圖，在 df 的數字越大，在 idf\n![df](df.png)\n![idf](idf.png)\n\n# 算 TF-IDF\nTF-IDF 其實就是將 TF 加權 IDF 後的結果。\n\n公式: `tf_idf = tf * idf`\n\n注意這邊是「乘」，不是矩陣乘法的那個 dot 哦。兩者在 Python 裡的寫法不一樣。\n\n看個示意圖:\na 的第一列都乘以 c 的第一列\na 的第二列都乘以 c 的第二列\n...\n![示意圖](示意圖.png)\n\n\n對應到程式碼裡的幾個陣列，他們的 size 分別是這樣的:\n```\ntf [n_vocab, n_doc]\ndf [n_vocab, 1]\ntf-idf [n_vocab, n_doc]\n```\n\n將 `tf` * `idf` 就會等於 `tf_idf` 囉!\n\n\n# 結語\n到這邊，語料庫模型(`tf_idf`)就建完了。明天會介紹，當我們接收到一個新句子，要如何比較它和其他句子的相似性。\n\n好了，明天見！\n","slug":"語料庫模型-06-程式碼-TF、IDF、TF-IDF","published":1,"updated":"2024-02-24T08:06:01.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myij001uk0jf8j6z8lk3","content":"<p>今天和明天的主題會以講解程式碼為主，其中 TF-IDF 演算法主要來自莫煩 Pythton。<br>莫煩 Python 原版程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a></p>\n<span id=\"more\"></span>\n\n<p>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<blockquote>\n<p>不確定我改了哪些東西(我也不記得了QQ)，大部分應該只有加上印 log 的部分吧。</p>\n</blockquote>\n<p>很重要，再提醒一次，中文要做 TF-IDF 要先經過斷詞，作法請參考<a href=\"../../26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/\">前天的文章</a>。 今天的 code 建議大家可以搭配 debug 模式使用，一行一行執行可以更清楚運作的步驟唷。</p>\n<h1 id=\"預處理\"><a href=\"#預處理\" class=\"headerlink\" title=\"預處理\"></a>預處理</h1><ol>\n<li>讀檔</li>\n<li>斷詞</li>\n<li>將詞做成 set <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v2i &#x3D; &#123;&#39;word&#39;: index&#125;</span><br><span class=\"line\">i2v &#x3D; &#123;index: &#39;word&#39;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"計算-TF-Term-Frequency\"><a href=\"#計算-TF-Term-Frequency\" class=\"headerlink\" title=\"計算 TF(Term Frequency)\"></a>計算 TF(Term Frequency)</h1><p>代表一個詞在一篇文章(一個句子)中出現的頻率。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tf</span>(<span class=\"params\">method=<span class=\"string\">&quot;log&quot;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;term frequency: how frequent a word appears in a doc&quot;&quot;&quot;</span></span><br><span class=\"line\">    _tf = np.zeros((<span class=\"built_in\">len</span>(vocab), <span class=\"built_in\">len</span>(docs)), dtype=np.float64)  <span class=\"comment\"># [n_vocab, n_doc]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, d <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(docs_words):</span><br><span class=\"line\">        counter = Counter(d)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> counter.keys():</span><br><span class=\"line\">            _tf[v2i[v], i] = counter[v] / counter.most_common(<span class=\"number\">1</span>)[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    weighted_tf = tf_methods.get(method, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> weighted_tf <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> weighted_tf(_tf)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>先建一個2維矩陣 <code>_tf = [詞數, 句子數]</code></li>\n<li>依序填入<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula.png\" alt=\"formula\"><br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/tf_.png\" alt=\"tf_\"></li>\n<li>每個欄位都取自然對數<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/tf.png\" alt=\"tf\"><blockquote>\n<p><strong>why 取對數?</strong><br><a href=\"https://www.itread01.com/content/1543225745.html\">處理資料時，對資料取對數的意義</a><br>log 以 e 為底的圖<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/log.png\" alt=\"log\"><br>取log優點</p>\n<ul>\n<li>縮小資料的絕對數值，方便計算。</li>\n<li>對數值小的部分差異的敏感程度比數值大的部分的差異敏感程度更高。</li>\n<li>取對數之後不會改變資料的性質和相關關係，但壓縮了變數的尺度，資料更加平穩</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"算-IDF\"><a href=\"#算-IDF\" class=\"headerlink\" title=\"算 IDF\"></a>算 IDF</h1><ul>\n<li>DF（文件頻率）：是指一個詞出現在幾個句子中。</li>\n<li>IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。</li>\n</ul>\n<h2 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_idf</span>(<span class=\"params\">method=<span class=\"string\">&quot;log&quot;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;df: document frequency&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;inverse document frequency: low idf for a word appears in more docs, mean less important&quot;&quot;&quot;</span></span><br><span class=\"line\">    df = np.zeros((<span class=\"built_in\">len</span>(i2v), <span class=\"number\">1</span>))  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(i2v)):</span><br><span class=\"line\">        d_count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> docs_words:</span><br><span class=\"line\">            d_count += <span class=\"number\">1</span> <span class=\"keyword\">if</span> i2v[i] <span class=\"keyword\">in</span> d <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        df[i, <span class=\"number\">0</span>] = d_count</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\ndf samples:\\n&quot;</span>, df)</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;print df to a csv file&quot;&quot;&quot;</span></span><br><span class=\"line\">        csv_writer = CsvWriter(<span class=\"string\">&quot;df&quot;</span>)</span><br><span class=\"line\">        csv_writer.write_head(<span class=\"built_in\">list</span>(v2i))</span><br><span class=\"line\">        csv_writer.write_row(df)</span><br><span class=\"line\"></span><br><span class=\"line\">    idf_fn = idf_methods.get(method, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> idf_fn <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\">    <span class=\"keyword\">return</span> idf_fn(df)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步驟-1\"><a href=\"#步驟-1\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>先算 df<ol>\n<li>建一個2維矩陣 <code>df = [n_vocab, 1]</code></li>\n<li>依序填入<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula1.png\" alt=\"formula1\"></li>\n</ol>\n</li>\n<li>轉成 idf<ol>\n<li>逐一帶入公式<br>  <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula2.png\" alt=\"formula2\"><blockquote>\n<p>如果詞語不在資料中，就導致分母為零，因此分母通常會加一<br>— from wiki <a href=\"https://zh.wikipedia.org/wiki/Tf-idf\">https://zh.wikipedia.org/wiki/Tf-idf</a></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p>注意觀察兩張圖，在 df 的數字越大，在 idf<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/df.png\" alt=\"df\"><br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/idf.png\" alt=\"idf\"></p>\n<h1 id=\"算-TF-IDF\"><a href=\"#算-TF-IDF\" class=\"headerlink\" title=\"算 TF-IDF\"></a>算 TF-IDF</h1><p>TF-IDF 其實就是將 TF 加權 IDF 後的結果。</p>\n<p>公式: <code>tf_idf = tf * idf</code></p>\n<p>注意這邊是「乘」，不是矩陣乘法的那個 dot 哦。兩者在 Python 裡的寫法不一樣。</p>\n<p>看個示意圖:<br>a 的第一列都乘以 c 的第一列<br>a 的第二列都乘以 c 的第二列<br>…<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/%E7%A4%BA%E6%84%8F%E5%9C%96.png\" alt=\"示意圖\"></p>\n<p>對應到程式碼裡的幾個陣列，他們的 size 分別是這樣的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf [n_vocab, n_doc]</span><br><span class=\"line\">df [n_vocab, 1]</span><br><span class=\"line\">tf-idf [n_vocab, n_doc]</span><br></pre></td></tr></table></figure>\n\n<p>將 <code>tf</code> * <code>idf</code> 就會等於 <code>tf_idf</code> 囉!</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>到這邊，語料庫模型(<code>tf_idf</code>)就建完了。明天會介紹，當我們接收到一個新句子，要如何比較它和其他句子的相似性。</p>\n<p>好了，明天見！</p>\n","site":{"data":{}},"excerpt":"<p>今天和明天的主題會以講解程式碼為主，其中 TF-IDF 演算法主要來自莫煩 Pythton。<br>莫煩 Python 原版程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a></p>","more":"<p>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<blockquote>\n<p>不確定我改了哪些東西(我也不記得了QQ)，大部分應該只有加上印 log 的部分吧。</p>\n</blockquote>\n<p>很重要，再提醒一次，中文要做 TF-IDF 要先經過斷詞，作法請參考<a href=\"../../26/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-04-%E6%96%B7%E8%A9%9E%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BC%83-Jieba-vs-CKIP/\">前天的文章</a>。 今天的 code 建議大家可以搭配 debug 模式使用，一行一行執行可以更清楚運作的步驟唷。</p>\n<h1 id=\"預處理\"><a href=\"#預處理\" class=\"headerlink\" title=\"預處理\"></a>預處理</h1><ol>\n<li>讀檔</li>\n<li>斷詞</li>\n<li>將詞做成 set <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v2i &#x3D; &#123;&#39;word&#39;: index&#125;</span><br><span class=\"line\">i2v &#x3D; &#123;index: &#39;word&#39;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"計算-TF-Term-Frequency\"><a href=\"#計算-TF-Term-Frequency\" class=\"headerlink\" title=\"計算 TF(Term Frequency)\"></a>計算 TF(Term Frequency)</h1><p>代表一個詞在一篇文章(一個句子)中出現的頻率。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tf</span>(<span class=\"params\">method=<span class=\"string\">&quot;log&quot;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;term frequency: how frequent a word appears in a doc&quot;&quot;&quot;</span></span><br><span class=\"line\">    _tf = np.zeros((<span class=\"built_in\">len</span>(vocab), <span class=\"built_in\">len</span>(docs)), dtype=np.float64)  <span class=\"comment\"># [n_vocab, n_doc]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, d <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(docs_words):</span><br><span class=\"line\">        counter = Counter(d)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> counter.keys():</span><br><span class=\"line\">            _tf[v2i[v], i] = counter[v] / counter.most_common(<span class=\"number\">1</span>)[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    weighted_tf = tf_methods.get(method, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> weighted_tf <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> weighted_tf(_tf)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>先建一個2維矩陣 <code>_tf = [詞數, 句子數]</code></li>\n<li>依序填入<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula.png\" alt=\"formula\"><br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/tf_.png\" alt=\"tf_\"></li>\n<li>每個欄位都取自然對數<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/tf.png\" alt=\"tf\"><blockquote>\n<p><strong>why 取對數?</strong><br><a href=\"https://www.itread01.com/content/1543225745.html\">處理資料時，對資料取對數的意義</a><br>log 以 e 為底的圖<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/log.png\" alt=\"log\"><br>取log優點</p>\n<ul>\n<li>縮小資料的絕對數值，方便計算。</li>\n<li>對數值小的部分差異的敏感程度比數值大的部分的差異敏感程度更高。</li>\n<li>取對數之後不會改變資料的性質和相關關係，但壓縮了變數的尺度，資料更加平穩</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"算-IDF\"><a href=\"#算-IDF\" class=\"headerlink\" title=\"算 IDF\"></a>算 IDF</h1><ul>\n<li>DF（文件頻率）：是指一個詞出現在幾個句子中。</li>\n<li>IDF（逆向文件頻率）： IDF便是將DF經過轉換，IDF 越低的表示這個詞越不重要，反之亦然。</li>\n</ul>\n<h2 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_idf</span>(<span class=\"params\">method=<span class=\"string\">&quot;log&quot;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;df: document frequency&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;inverse document frequency: low idf for a word appears in more docs, mean less important&quot;&quot;&quot;</span></span><br><span class=\"line\">    df = np.zeros((<span class=\"built_in\">len</span>(i2v), <span class=\"number\">1</span>))  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(i2v)):</span><br><span class=\"line\">        d_count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> docs_words:</span><br><span class=\"line\">            d_count += <span class=\"number\">1</span> <span class=\"keyword\">if</span> i2v[i] <span class=\"keyword\">in</span> d <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        df[i, <span class=\"number\">0</span>] = d_count</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\ndf samples:\\n&quot;</span>, df)</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;print df to a csv file&quot;&quot;&quot;</span></span><br><span class=\"line\">        csv_writer = CsvWriter(<span class=\"string\">&quot;df&quot;</span>)</span><br><span class=\"line\">        csv_writer.write_head(<span class=\"built_in\">list</span>(v2i))</span><br><span class=\"line\">        csv_writer.write_row(df)</span><br><span class=\"line\"></span><br><span class=\"line\">    idf_fn = idf_methods.get(method, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> idf_fn <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\">    <span class=\"keyword\">return</span> idf_fn(df)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步驟-1\"><a href=\"#步驟-1\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>先算 df<ol>\n<li>建一個2維矩陣 <code>df = [n_vocab, 1]</code></li>\n<li>依序填入<br> <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula1.png\" alt=\"formula1\"></li>\n</ol>\n</li>\n<li>轉成 idf<ol>\n<li>逐一帶入公式<br>  <img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/formula2.png\" alt=\"formula2\"><blockquote>\n<p>如果詞語不在資料中，就導致分母為零，因此分母通常會加一<br>— from wiki <a href=\"https://zh.wikipedia.org/wiki/Tf-idf\">https://zh.wikipedia.org/wiki/Tf-idf</a></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p>注意觀察兩張圖，在 df 的數字越大，在 idf<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/df.png\" alt=\"df\"><br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/idf.png\" alt=\"idf\"></p>\n<h1 id=\"算-TF-IDF\"><a href=\"#算-TF-IDF\" class=\"headerlink\" title=\"算 TF-IDF\"></a>算 TF-IDF</h1><p>TF-IDF 其實就是將 TF 加權 IDF 後的結果。</p>\n<p>公式: <code>tf_idf = tf * idf</code></p>\n<p>注意這邊是「乘」，不是矩陣乘法的那個 dot 哦。兩者在 Python 裡的寫法不一樣。</p>\n<p>看個示意圖:<br>a 的第一列都乘以 c 的第一列<br>a 的第二列都乘以 c 的第二列<br>…<br><img src=\"/2021/09/28/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-06-%E7%A8%8B%E5%BC%8F%E7%A2%BC-TF%E3%80%81IDF%E3%80%81TF-IDF/%E7%A4%BA%E6%84%8F%E5%9C%96.png\" alt=\"示意圖\"></p>\n<p>對應到程式碼裡的幾個陣列，他們的 size 分別是這樣的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf [n_vocab, n_doc]</span><br><span class=\"line\">df [n_vocab, 1]</span><br><span class=\"line\">tf-idf [n_vocab, n_doc]</span><br></pre></td></tr></table></figure>\n\n<p>將 <code>tf</code> * <code>idf</code> 就會等於 <code>tf_idf</code> 囉!</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>到這邊，語料庫模型(<code>tf_idf</code>)就建完了。明天會介紹，當我們接收到一個新句子，要如何比較它和其他句子的相似性。</p>\n<p>好了，明天見！</p>"},{"title":"[語料庫模型] 07-程式碼: 餘弦相似性","date":"2021-09-30T17:11:12.000Z","_content":"\n嗨，昨天語料庫模型建好了，下一步要如何使用呢? 我們要如何比對輸入的句子與語料庫中的哪一句最相似呢?\n<!-- more -->\n\n# 相似度計算方式\n計算兩個點之間存在的差異大小，主要有兩種方式，歐式距離與餘弦相似度。 \n詳細的介紹參考: [歐氏距離與餘弦相似度的比較](https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b)\n\n## 歐式距離\n\n主要計算空間中點與點之間的距離。\n距離越大，相似性越低，反之亦然。\n\n![歐式距離](歐式距離.png)\n\n## 餘弦相似度\n\n主要計算向量間的夾角大小。\n夾角越大，相似性越低，反之亦然。\n\n![餘弦相似度](餘弦相似度.png)\n\n而餘弦相似度的公式由「內積公式」推導而來。\n\n![formula](formula.png)\n\n餘弦相似度無關乎向量大小，重點是向量之間的方向。\n- 方向一致時餘弦值為 1\n- 直角時餘弦相似度的值為 0\n- 方向相反時餘弦值為 -1\n\n# 詞向量\n\n此段參考 [机器是这样理解语言 - 词向量 | 莫煩Python](https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/)\n\n![比較](比較.png)\n\n大部分時候，我們注重的不一定是點與點之間的距離，更重要的是兩個向量的方向是否接近。這時候，餘弦相似度就比歐式距離適合。\n\n# 程式碼\n莫煩 Python 的程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n## 執行\n\n```python\n\"\"\"test\"\"\"\nq = sys.argv[1]\n# q = \"拐杖去哪裡申請\"\n# q = \"I like kitty\"\nif CUT_METHOD == \"ckip\":\n    tmp_q = [q]\n    q = tmp_q\n\nscores = docs_score(q)\nd_ids = scores.argsort()[-3:][::-1]\nif LOG:\n    print(\"\\n[{}] top 3 docs for '{}':\\n{}\".format(CUT_METHOD, (q if CUT_METHOD != \"ckip\" else q[0]), [docs[i] for i in d_ids]))\n```\n\n第一句 `q` 是讀入要比較的句子，`sys.argv[1]` 就是用來讀取執行程式碼時輸入的參數，過幾天的文章會寫到。我如果還記得，再回來補連結...\n第一個 if 那邊是因為 CKIP 和 Jieba 轉換完的格式不一樣，需要做個轉換，統一一下。\n`docs_score(q)` 計算 `q` 和其他所有句子的餘弦相似性。\n\n> Python List 操作方式\n> ```\n> a = [1, 2, 3, 4, 5]\n> a[::-1] #[::-1] 是倒置，輸出: [5, 4, 3, 2, 1]\n> a[-3] #[-3] 是倒數第 3 個，輸出: 3\n> a[-3:] #[-3:] 是從倒數第三個到最後一個，輸出: [3, 4, 5]\n> a[-3:][::-1] #輸出: [5, 4, 3]\n> ```\n\n## 計算分數(餘弦相似度)\n\n```python\ndef docs_score(query, len_norm=False):\n    \"\"\"斷詞\"\"\"\n    if CUT_METHOD == \"jieba\":\n        q_words = CutSentence.cut_jeiba(re.sub('[?？()（）「」,，、。:：_“”→]', ' ', query), log=LOG)  # use jieba\n    elif CUT_METHOD == \"ckip\":\n        q_words = CutSentence.cut_ckip(query, log=LOG)  # use ckip\n        temp_arr = np.array(q_words)\n        temp_arr = temp_arr.reshape(len(q_words[0]))\n        q_words = temp_arr\n    else:\n        q_words = query.replace(\",\", \"\").split(\" \")\n\n    \"\"\"label\"\"\"\n    if LABEL:\n        q_words = add_label(q_words)\n\n    \"\"\"add unknown words\"\"\"\n    unknown_v = 0\n    for v in set(q_words):\n        if v not in v2i:\n            v2i[v] = len(v2i)\n            i2v[len(v2i) - 1] = v\n            unknown_v += 1\n    if unknown_v > 0:\n        _idf = np.concatenate((idf, np.zeros((unknown_v, 1), dtype=np.float)), axis=0)\n        _tf_idf = np.concatenate((tf_idf, np.zeros((unknown_v, tf_idf.shape[1]), dtype=np.float)), axis=0)\n    else:\n        _idf, _tf_idf = idf, tf_idf\n    counter = Counter(q_words)\n    q_tf = np.zeros((len(_idf), 1), dtype=np.float)  # [n_vocab, 1]\n    for v in counter.keys():\n        q_tf[v2i[v], 0] = counter[v]\n    q_vec = q_tf * _idf  # [n_vocab, 1]\n\n    q_scores = cosine_similarity(q_vec, _tf_idf)  # 拿q的向量和所有向量比對\n    if len_norm:\n        len_docs = [len(d) for d in docs_words]\n        q_scores = q_scores / np.array(len_docs)\n    return q_scores\n```\n\n一個新拿到的 `q` (這個 function 中叫 `query`)，進行比較前，也要經過段詞、加 label，再檢查 `query` 有沒有新的詞，有的話就要加到 `v2i` 和 `i2v` 裡面。將 `query` 轉換成向量 `q_vec` 後才能算相似性唷。\n\n最後 `q_scores = cosine_similarity(q_vec, _tf_idf)` 計算 query 與每個句子的相似性。\n\n# 結語\n終於寫完了，這篇應該本系列是最難的一篇了，我早上還先複習了數學呢。\n\n# 參考資料\n- [歐氏距離與餘弦相似度的比較](https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b)\n- [机器是这样理解语言 - 词向量 | 莫煩Python](https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/)","source":"_posts/語料庫模型-07-程式碼-餘弦相似性.md","raw":"---\ntitle: '[語料庫模型] 07-程式碼: 餘弦相似性'\ndate: 2021-10-01 01:11:12\ntags:\n- 語料庫\n- 聊天機器人\n- 13th鐵人賽\n- 餘弦相似性\n---\n\n嗨，昨天語料庫模型建好了，下一步要如何使用呢? 我們要如何比對輸入的句子與語料庫中的哪一句最相似呢?\n<!-- more -->\n\n# 相似度計算方式\n計算兩個點之間存在的差異大小，主要有兩種方式，歐式距離與餘弦相似度。 \n詳細的介紹參考: [歐氏距離與餘弦相似度的比較](https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b)\n\n## 歐式距離\n\n主要計算空間中點與點之間的距離。\n距離越大，相似性越低，反之亦然。\n\n![歐式距離](歐式距離.png)\n\n## 餘弦相似度\n\n主要計算向量間的夾角大小。\n夾角越大，相似性越低，反之亦然。\n\n![餘弦相似度](餘弦相似度.png)\n\n而餘弦相似度的公式由「內積公式」推導而來。\n\n![formula](formula.png)\n\n餘弦相似度無關乎向量大小，重點是向量之間的方向。\n- 方向一致時餘弦值為 1\n- 直角時餘弦相似度的值為 0\n- 方向相反時餘弦值為 -1\n\n# 詞向量\n\n此段參考 [机器是这样理解语言 - 词向量 | 莫煩Python](https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/)\n\n![比較](比較.png)\n\n大部分時候，我們注重的不一定是點與點之間的距離，更重要的是兩個向量的方向是否接近。這時候，餘弦相似度就比歐式距離適合。\n\n# 程式碼\n莫煩 Python 的程式碼: https://github.com/MorvanZhou/NLP-Tutorials\n我修改過的版本: https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\n\n## 執行\n\n```python\n\"\"\"test\"\"\"\nq = sys.argv[1]\n# q = \"拐杖去哪裡申請\"\n# q = \"I like kitty\"\nif CUT_METHOD == \"ckip\":\n    tmp_q = [q]\n    q = tmp_q\n\nscores = docs_score(q)\nd_ids = scores.argsort()[-3:][::-1]\nif LOG:\n    print(\"\\n[{}] top 3 docs for '{}':\\n{}\".format(CUT_METHOD, (q if CUT_METHOD != \"ckip\" else q[0]), [docs[i] for i in d_ids]))\n```\n\n第一句 `q` 是讀入要比較的句子，`sys.argv[1]` 就是用來讀取執行程式碼時輸入的參數，過幾天的文章會寫到。我如果還記得，再回來補連結...\n第一個 if 那邊是因為 CKIP 和 Jieba 轉換完的格式不一樣，需要做個轉換，統一一下。\n`docs_score(q)` 計算 `q` 和其他所有句子的餘弦相似性。\n\n> Python List 操作方式\n> ```\n> a = [1, 2, 3, 4, 5]\n> a[::-1] #[::-1] 是倒置，輸出: [5, 4, 3, 2, 1]\n> a[-3] #[-3] 是倒數第 3 個，輸出: 3\n> a[-3:] #[-3:] 是從倒數第三個到最後一個，輸出: [3, 4, 5]\n> a[-3:][::-1] #輸出: [5, 4, 3]\n> ```\n\n## 計算分數(餘弦相似度)\n\n```python\ndef docs_score(query, len_norm=False):\n    \"\"\"斷詞\"\"\"\n    if CUT_METHOD == \"jieba\":\n        q_words = CutSentence.cut_jeiba(re.sub('[?？()（）「」,，、。:：_“”→]', ' ', query), log=LOG)  # use jieba\n    elif CUT_METHOD == \"ckip\":\n        q_words = CutSentence.cut_ckip(query, log=LOG)  # use ckip\n        temp_arr = np.array(q_words)\n        temp_arr = temp_arr.reshape(len(q_words[0]))\n        q_words = temp_arr\n    else:\n        q_words = query.replace(\",\", \"\").split(\" \")\n\n    \"\"\"label\"\"\"\n    if LABEL:\n        q_words = add_label(q_words)\n\n    \"\"\"add unknown words\"\"\"\n    unknown_v = 0\n    for v in set(q_words):\n        if v not in v2i:\n            v2i[v] = len(v2i)\n            i2v[len(v2i) - 1] = v\n            unknown_v += 1\n    if unknown_v > 0:\n        _idf = np.concatenate((idf, np.zeros((unknown_v, 1), dtype=np.float)), axis=0)\n        _tf_idf = np.concatenate((tf_idf, np.zeros((unknown_v, tf_idf.shape[1]), dtype=np.float)), axis=0)\n    else:\n        _idf, _tf_idf = idf, tf_idf\n    counter = Counter(q_words)\n    q_tf = np.zeros((len(_idf), 1), dtype=np.float)  # [n_vocab, 1]\n    for v in counter.keys():\n        q_tf[v2i[v], 0] = counter[v]\n    q_vec = q_tf * _idf  # [n_vocab, 1]\n\n    q_scores = cosine_similarity(q_vec, _tf_idf)  # 拿q的向量和所有向量比對\n    if len_norm:\n        len_docs = [len(d) for d in docs_words]\n        q_scores = q_scores / np.array(len_docs)\n    return q_scores\n```\n\n一個新拿到的 `q` (這個 function 中叫 `query`)，進行比較前，也要經過段詞、加 label，再檢查 `query` 有沒有新的詞，有的話就要加到 `v2i` 和 `i2v` 裡面。將 `query` 轉換成向量 `q_vec` 後才能算相似性唷。\n\n最後 `q_scores = cosine_similarity(q_vec, _tf_idf)` 計算 query 與每個句子的相似性。\n\n# 結語\n終於寫完了，這篇應該本系列是最難的一篇了，我早上還先複習了數學呢。\n\n# 參考資料\n- [歐氏距離與餘弦相似度的比較](https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b)\n- [机器是这样理解语言 - 词向量 | 莫煩Python](https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/)","slug":"語料庫模型-07-程式碼-餘弦相似性","published":1,"updated":"2024-02-24T08:06:01.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myij001vk0jf5ls6d77a","content":"<p>嗨，昨天語料庫模型建好了，下一步要如何使用呢? 我們要如何比對輸入的句子與語料庫中的哪一句最相似呢?</p>\n<span id=\"more\"></span>\n\n<h1 id=\"相似度計算方式\"><a href=\"#相似度計算方式\" class=\"headerlink\" title=\"相似度計算方式\"></a>相似度計算方式</h1><p>計算兩個點之間存在的差異大小，主要有兩種方式，歐式距離與餘弦相似度。<br>詳細的介紹參考: <a href=\"https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b\">歐氏距離與餘弦相似度的比較</a></p>\n<h2 id=\"歐式距離\"><a href=\"#歐式距離\" class=\"headerlink\" title=\"歐式距離\"></a>歐式距離</h2><p>主要計算空間中點與點之間的距離。<br>距離越大，相似性越低，反之亦然。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E6%AD%90%E5%BC%8F%E8%B7%9D%E9%9B%A2.png\" alt=\"歐式距離\"></p>\n<h2 id=\"餘弦相似度\"><a href=\"#餘弦相似度\" class=\"headerlink\" title=\"餘弦相似度\"></a>餘弦相似度</h2><p>主要計算向量間的夾角大小。<br>夾角越大，相似性越低，反之亦然。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6.png\" alt=\"餘弦相似度\"></p>\n<p>而餘弦相似度的公式由「內積公式」推導而來。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/formula.png\" alt=\"formula\"></p>\n<p>餘弦相似度無關乎向量大小，重點是向量之間的方向。</p>\n<ul>\n<li>方向一致時餘弦值為 1</li>\n<li>直角時餘弦相似度的值為 0</li>\n<li>方向相反時餘弦值為 -1</li>\n</ul>\n<h1 id=\"詞向量\"><a href=\"#詞向量\" class=\"headerlink\" title=\"詞向量\"></a>詞向量</h1><p>此段參考 <a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/\">机器是这样理解语言 - 词向量 | 莫煩Python</a></p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E6%AF%94%E8%BC%83.png\" alt=\"比較\"></p>\n<p>大部分時候，我們注重的不一定是點與點之間的距離，更重要的是兩個向量的方向是否接近。這時候，餘弦相似度就比歐式距離適合。</p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>莫煩 Python 的程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a><br>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;test&quot;&quot;&quot;</span></span><br><span class=\"line\">q = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># q = &quot;拐杖去哪裡申請&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># q = &quot;I like kitty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> CUT_METHOD == <span class=\"string\">&quot;ckip&quot;</span>:</span><br><span class=\"line\">    tmp_q = [q]</span><br><span class=\"line\">    q = tmp_q</span><br><span class=\"line\"></span><br><span class=\"line\">scores = docs_score(q)</span><br><span class=\"line\">d_ids = scores.argsort()[-<span class=\"number\">3</span>:][::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n[&#123;&#125;] top 3 docs for &#x27;&#123;&#125;&#x27;:\\n&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(CUT_METHOD, (q <span class=\"keyword\">if</span> CUT_METHOD != <span class=\"string\">&quot;ckip&quot;</span> <span class=\"keyword\">else</span> q[<span class=\"number\">0</span>]), [docs[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> d_ids]))</span><br></pre></td></tr></table></figure>\n\n<p>第一句 <code>q</code> 是讀入要比較的句子，<code>sys.argv[1]</code> 就是用來讀取執行程式碼時輸入的參數，過幾天的文章會寫到。我如果還記得，再回來補連結…<br>第一個 if 那邊是因為 CKIP 和 Jieba 轉換完的格式不一樣，需要做個轉換，統一一下。<br><code>docs_score(q)</code> 計算 <code>q</code> 和其他所有句子的餘弦相似性。</p>\n<blockquote>\n<p>Python List 操作方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; [1, 2, 3, 4, 5]</span><br><span class=\"line\">a[::-1] #[::-1] 是倒置，輸出: [5, 4, 3, 2, 1]</span><br><span class=\"line\">a[-3] #[-3] 是倒數第 3 個，輸出: 3</span><br><span class=\"line\">a[-3:] #[-3:] 是從倒數第三個到最後一個，輸出: [3, 4, 5]</span><br><span class=\"line\">a[-3:][::-1] #輸出: [5, 4, 3]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"計算分數-餘弦相似度\"><a href=\"#計算分數-餘弦相似度\" class=\"headerlink\" title=\"計算分數(餘弦相似度)\"></a>計算分數(餘弦相似度)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">docs_score</span>(<span class=\"params\">query, len_norm=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;斷詞&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> CUT_METHOD == <span class=\"string\">&quot;jieba&quot;</span>:</span><br><span class=\"line\">        q_words = CutSentence.cut_jeiba(re.sub(<span class=\"string\">&#x27;[?？()（）「」,，、。:：_“”→]&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, query), log=LOG)  <span class=\"comment\"># use jieba</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> CUT_METHOD == <span class=\"string\">&quot;ckip&quot;</span>:</span><br><span class=\"line\">        q_words = CutSentence.cut_ckip(query, log=LOG)  <span class=\"comment\"># use ckip</span></span><br><span class=\"line\">        temp_arr = np.array(q_words)</span><br><span class=\"line\">        temp_arr = temp_arr.reshape(<span class=\"built_in\">len</span>(q_words[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        q_words = temp_arr</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        q_words = query.replace(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&quot;</span>).split(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;label&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> LABEL:</span><br><span class=\"line\">        q_words = add_label(q_words)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;add unknown words&quot;&quot;&quot;</span></span><br><span class=\"line\">    unknown_v = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(q_words):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> v2i:</span><br><span class=\"line\">            v2i[v] = <span class=\"built_in\">len</span>(v2i)</span><br><span class=\"line\">            i2v[<span class=\"built_in\">len</span>(v2i) - <span class=\"number\">1</span>] = v</span><br><span class=\"line\">            unknown_v += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> unknown_v &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        _idf = np.concatenate((idf, np.zeros((unknown_v, <span class=\"number\">1</span>), dtype=np.<span class=\"built_in\">float</span>)), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">        _tf_idf = np.concatenate((tf_idf, np.zeros((unknown_v, tf_idf.shape[<span class=\"number\">1</span>]), dtype=np.<span class=\"built_in\">float</span>)), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        _idf, _tf_idf = idf, tf_idf</span><br><span class=\"line\">    counter = Counter(q_words)</span><br><span class=\"line\">    q_tf = np.zeros((<span class=\"built_in\">len</span>(_idf), <span class=\"number\">1</span>), dtype=np.<span class=\"built_in\">float</span>)  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> counter.keys():</span><br><span class=\"line\">        q_tf[v2i[v], <span class=\"number\">0</span>] = counter[v]</span><br><span class=\"line\">    q_vec = q_tf * _idf  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    q_scores = cosine_similarity(q_vec, _tf_idf)  <span class=\"comment\"># 拿q的向量和所有向量比對</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len_norm:</span><br><span class=\"line\">        len_docs = [<span class=\"built_in\">len</span>(d) <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> docs_words]</span><br><span class=\"line\">        q_scores = q_scores / np.array(len_docs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> q_scores</span><br></pre></td></tr></table></figure>\n\n<p>一個新拿到的 <code>q</code> (這個 function 中叫 <code>query</code>)，進行比較前，也要經過段詞、加 label，再檢查 <code>query</code> 有沒有新的詞，有的話就要加到 <code>v2i</code> 和 <code>i2v</code> 裡面。將 <code>query</code> 轉換成向量 <code>q_vec</code> 後才能算相似性唷。</p>\n<p>最後 <code>q_scores = cosine_similarity(q_vec, _tf_idf)</code> 計算 query 與每個句子的相似性。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>終於寫完了，這篇應該本系列是最難的一篇了，我早上還先複習了數學呢。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b\">歐氏距離與餘弦相似度的比較</a></li>\n<li><a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/\">机器是这样理解语言 - 词向量 | 莫煩Python</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>嗨，昨天語料庫模型建好了，下一步要如何使用呢? 我們要如何比對輸入的句子與語料庫中的哪一句最相似呢?</p>","more":"<h1 id=\"相似度計算方式\"><a href=\"#相似度計算方式\" class=\"headerlink\" title=\"相似度計算方式\"></a>相似度計算方式</h1><p>計算兩個點之間存在的差異大小，主要有兩種方式，歐式距離與餘弦相似度。<br>詳細的介紹參考: <a href=\"https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b\">歐氏距離與餘弦相似度的比較</a></p>\n<h2 id=\"歐式距離\"><a href=\"#歐式距離\" class=\"headerlink\" title=\"歐式距離\"></a>歐式距離</h2><p>主要計算空間中點與點之間的距離。<br>距離越大，相似性越低，反之亦然。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E6%AD%90%E5%BC%8F%E8%B7%9D%E9%9B%A2.png\" alt=\"歐式距離\"></p>\n<h2 id=\"餘弦相似度\"><a href=\"#餘弦相似度\" class=\"headerlink\" title=\"餘弦相似度\"></a>餘弦相似度</h2><p>主要計算向量間的夾角大小。<br>夾角越大，相似性越低，反之亦然。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6.png\" alt=\"餘弦相似度\"></p>\n<p>而餘弦相似度的公式由「內積公式」推導而來。</p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/formula.png\" alt=\"formula\"></p>\n<p>餘弦相似度無關乎向量大小，重點是向量之間的方向。</p>\n<ul>\n<li>方向一致時餘弦值為 1</li>\n<li>直角時餘弦相似度的值為 0</li>\n<li>方向相反時餘弦值為 -1</li>\n</ul>\n<h1 id=\"詞向量\"><a href=\"#詞向量\" class=\"headerlink\" title=\"詞向量\"></a>詞向量</h1><p>此段參考 <a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/\">机器是这样理解语言 - 词向量 | 莫煩Python</a></p>\n<p><img src=\"/2021/10/01/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-07-%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/%E6%AF%94%E8%BC%83.png\" alt=\"比較\"></p>\n<p>大部分時候，我們注重的不一定是點與點之間的距離，更重要的是兩個向量的方向是否接近。這時候，餘弦相似度就比歐式距離適合。</p>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>莫煩 Python 的程式碼: <a href=\"https://github.com/MorvanZhou/NLP-Tutorials\">https://github.com/MorvanZhou/NLP-Tutorials</a><br>我修改過的版本: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/main.py</a></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;test&quot;&quot;&quot;</span></span><br><span class=\"line\">q = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># q = &quot;拐杖去哪裡申請&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># q = &quot;I like kitty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> CUT_METHOD == <span class=\"string\">&quot;ckip&quot;</span>:</span><br><span class=\"line\">    tmp_q = [q]</span><br><span class=\"line\">    q = tmp_q</span><br><span class=\"line\"></span><br><span class=\"line\">scores = docs_score(q)</span><br><span class=\"line\">d_ids = scores.argsort()[-<span class=\"number\">3</span>:][::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> LOG:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n[&#123;&#125;] top 3 docs for &#x27;&#123;&#125;&#x27;:\\n&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(CUT_METHOD, (q <span class=\"keyword\">if</span> CUT_METHOD != <span class=\"string\">&quot;ckip&quot;</span> <span class=\"keyword\">else</span> q[<span class=\"number\">0</span>]), [docs[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> d_ids]))</span><br></pre></td></tr></table></figure>\n\n<p>第一句 <code>q</code> 是讀入要比較的句子，<code>sys.argv[1]</code> 就是用來讀取執行程式碼時輸入的參數，過幾天的文章會寫到。我如果還記得，再回來補連結…<br>第一個 if 那邊是因為 CKIP 和 Jieba 轉換完的格式不一樣，需要做個轉換，統一一下。<br><code>docs_score(q)</code> 計算 <code>q</code> 和其他所有句子的餘弦相似性。</p>\n<blockquote>\n<p>Python List 操作方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; [1, 2, 3, 4, 5]</span><br><span class=\"line\">a[::-1] #[::-1] 是倒置，輸出: [5, 4, 3, 2, 1]</span><br><span class=\"line\">a[-3] #[-3] 是倒數第 3 個，輸出: 3</span><br><span class=\"line\">a[-3:] #[-3:] 是從倒數第三個到最後一個，輸出: [3, 4, 5]</span><br><span class=\"line\">a[-3:][::-1] #輸出: [5, 4, 3]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"計算分數-餘弦相似度\"><a href=\"#計算分數-餘弦相似度\" class=\"headerlink\" title=\"計算分數(餘弦相似度)\"></a>計算分數(餘弦相似度)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">docs_score</span>(<span class=\"params\">query, len_norm=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;斷詞&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> CUT_METHOD == <span class=\"string\">&quot;jieba&quot;</span>:</span><br><span class=\"line\">        q_words = CutSentence.cut_jeiba(re.sub(<span class=\"string\">&#x27;[?？()（）「」,，、。:：_“”→]&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, query), log=LOG)  <span class=\"comment\"># use jieba</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> CUT_METHOD == <span class=\"string\">&quot;ckip&quot;</span>:</span><br><span class=\"line\">        q_words = CutSentence.cut_ckip(query, log=LOG)  <span class=\"comment\"># use ckip</span></span><br><span class=\"line\">        temp_arr = np.array(q_words)</span><br><span class=\"line\">        temp_arr = temp_arr.reshape(<span class=\"built_in\">len</span>(q_words[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        q_words = temp_arr</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        q_words = query.replace(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&quot;</span>).split(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;label&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> LABEL:</span><br><span class=\"line\">        q_words = add_label(q_words)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;add unknown words&quot;&quot;&quot;</span></span><br><span class=\"line\">    unknown_v = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(q_words):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> v2i:</span><br><span class=\"line\">            v2i[v] = <span class=\"built_in\">len</span>(v2i)</span><br><span class=\"line\">            i2v[<span class=\"built_in\">len</span>(v2i) - <span class=\"number\">1</span>] = v</span><br><span class=\"line\">            unknown_v += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> unknown_v &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        _idf = np.concatenate((idf, np.zeros((unknown_v, <span class=\"number\">1</span>), dtype=np.<span class=\"built_in\">float</span>)), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">        _tf_idf = np.concatenate((tf_idf, np.zeros((unknown_v, tf_idf.shape[<span class=\"number\">1</span>]), dtype=np.<span class=\"built_in\">float</span>)), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        _idf, _tf_idf = idf, tf_idf</span><br><span class=\"line\">    counter = Counter(q_words)</span><br><span class=\"line\">    q_tf = np.zeros((<span class=\"built_in\">len</span>(_idf), <span class=\"number\">1</span>), dtype=np.<span class=\"built_in\">float</span>)  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> counter.keys():</span><br><span class=\"line\">        q_tf[v2i[v], <span class=\"number\">0</span>] = counter[v]</span><br><span class=\"line\">    q_vec = q_tf * _idf  <span class=\"comment\"># [n_vocab, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    q_scores = cosine_similarity(q_vec, _tf_idf)  <span class=\"comment\"># 拿q的向量和所有向量比對</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len_norm:</span><br><span class=\"line\">        len_docs = [<span class=\"built_in\">len</span>(d) <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> docs_words]</span><br><span class=\"line\">        q_scores = q_scores / np.array(len_docs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> q_scores</span><br></pre></td></tr></table></figure>\n\n<p>一個新拿到的 <code>q</code> (這個 function 中叫 <code>query</code>)，進行比較前，也要經過段詞、加 label，再檢查 <code>query</code> 有沒有新的詞，有的話就要加到 <code>v2i</code> 和 <code>i2v</code> 裡面。將 <code>query</code> 轉換成向量 <code>q_vec</code> 後才能算相似性唷。</p>\n<p>最後 <code>q_scores = cosine_similarity(q_vec, _tf_idf)</code> 計算 query 與每個句子的相似性。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>終於寫完了，這篇應該本系列是最難的一篇了，我早上還先複習了數學呢。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://medium.com/qiubingcheng/%E6%AD%90%E6%B0%8F%E8%B7%9D%E9%9B%A2%E8%88%87%E9%A4%98%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BC%83-c78163ad51b\">歐氏距離與餘弦相似度的比較</a></li>\n<li><a href=\"https://mofanpy.com/tutorials/machine-learning/nlp/intro-w2v/\">机器是这样理解语言 - 词向量 | 莫煩Python</a></li>\n</ul>"},{"title":"[語料庫模型] 09-回饋機制","date":"2021-10-04T15:29:40.000Z","_content":"\n聊天機器人雖有問答集可以回覆大部分常見問題，但難免會有疏漏。因此本研究亦設計回饋機制，若使用者發現機器人的回覆內容不符合想預期，可以直接查看與問句第二和第三相似的問答組合，或是點選「以上皆非」選項，兩種方式系統都會自動記錄相關資訊。後續我們便可整理蒐集到的組合，持續優化聊天機器人與擴增問答集。\n<!-- more -->\n> 「[語料庫模型] 07-程式碼: 餘弦相似性」這篇的程式碼會回傳相似度最高的 3 個問答組合。\n\n![flow](flow.jpg)\n\n回饋紀錄使用與問答集相似的 CSV 格式儲存，方便整理後移植到資料集中。\n- 回饋紀錄的 log\n    連結: https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv\n    ![回饋機制_log](回饋機制_log.png)\n- 問答集(語料庫)\n    連結: https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n    ![部分問答集截圖](部分問答集截圖.png)\n\n比較不同的是，回饋紀錄的 Q 欄位代表的是使用者輸入的語句，A 欄位則會根據使用者的選擇而有不同，主要分為兩種情況。\n- **情況一，點選其他相符的選項**\n    使用者輸入「申請喘息服務」，而機器人一開始回覆的問答組合不符預期，所以使用者點選查看第三相符的問答組合「總則(給付八)_獨居長輩是否能使用喘息服務」，因此可以判斷「使用者輸入的語句」與「第三相符問答組合的答案」較相符，並將此新的問答組合儲存於回饋紀錄中。\n    ![image25](image25.png)\n- **情況二，點選「以上皆非」**\n    使用者輸入「外籍看護來自哪一國」，而機器人回覆的內容都不符合使用者期待，所以他選擇「以上皆非」，代表此問題對我們問答集來說是新問題，因此回饋紀錄就會記錄一筆新的問答組合。\n    ![image26](image26.png)\n\n# 程式碼\n\n程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py\n這部分的程式碼，是為了讓 API 可以將回饋紀錄寫進檔案\n\n## 接收參數\n```python\nparam = sys.argv\nq = param[1] #使用者輸入的問句\nqa_id = param[2] #使用者認為較貼切的問句，若都不符合則傳送 -1 \ncategory_id = param[3] #使用者當下選擇的類別編號\n```\n\n可以接收像是這樣的參數\n```shell\npython3 add_adjustment.py \"申請喘息服務\" 359 0\n```\n\n## 判斷是否為新問題\n\n新問題是指使用者選了「以上皆非」，也就是說使用者認為他的問句和我們提供的都不相似，我們把這種狀況認為是新問題。\n\n```python\nif qa_id == \"-1\":\n    result['new_question'] = True\n    answer = \"\"\n    remark = \"New Question\"\nelse:\n    result['new_question'] = False\n    qa = os.popen(\n        \"/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/get_answer_by_id.py \" + qa_id).read()\n    qa = json.loads(qa)\n    answer = qa['A']\n    remark = \"Origin Question \"+qa['Q']\n```\n\n`result` 是用來記錄狀況，印出最後的 JSON 檔案的。\n`remark` 就是備註，若是新問題，備註就會記錄 \"New Question\"；反之，則紀錄使用者認為更貼近問題。\n`answer` 是針對使用者的問句，若是新問題，就留空，待後續維護人員評估；反之，使用編號 359 查出問答組合，並把答案的部分存到 `answer`。\n\n![359](359.png)\n\n## 將記錄寫入檔案\n```python\nfile_exist = os.path.isfile(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\")\ncsv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"a+\")\nwriter = csv.writer(csv_file, delimiter=',')\n\n'''Add CSV Title'''\nif not file_exist:\n    csv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"w\")\n    writer = csv.writer(csv_file, delimiter=',')\n    writer.writerow(['id', 'Intent ID', 'Q', 'A', 'category', 'source', 'time', 'remark'])\n\n'''Add Row'''\ncsv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"a+\")\nwriter = csv.writer(csv_file, delimiter=',')\nnew_row = ['', '', q, answer, category_id, 'User Input', str(datetime.datetime.now()), remark]\n```\n\n首先檢查 adjustments.csv 檔案是否存在，若不存在，就開個新檔，並把欄位名稱寫進去。\n檔案已存在，就把紀錄直接寫到檔案的最後一筆。\n> w: 開新檔 & 寫入\n> a+: 用附加方式打開(資料會加在檔案最後，不會把前面的內容洗掉) & 可讀寫\n\n## 檢查寫檔是否成功\n```python\nsuccess = writer.writerow(new_row)\n\nif success > 6:\n    '''\n    new_row = ['', '', '', '', '']\n    because len(new_raw) is 6\n    '''\n    result['success'] = 1\nelse:\n    result['success'] = -1\n```\n\n這部分可能沒寫很好，未來可以再修正寫法。\n主要是想以 new_row 的長度來決定是否有新增成功，判斷的時候又遇到一些問題，不太了解為何 `len(['', '', '', '', ''])` 的結果是 6，就先將錯就錯，若是長度有大於 5 個空字串的 list，就算他成功吧。\n\n## 印出 JSON\n```python\nprint(json.dumps(result, ensure_ascii=False))\n```\n\n印出剛剛準備的 `result`，回饋機制的 API 就完成了!\n```json\n{\n    \"new_question\": true, \n    \"success\": 1 \n}\n```\n","source":"_posts/語料庫模型-09-回饋機制.md","raw":"---\ntitle: '[語料庫模型] 09-回饋機制'\ndate: 2021-10-04 23:29:40\ntags:\n- 13th鐵人賽\n- 語料庫\n- 回饋機制\n---\n\n聊天機器人雖有問答集可以回覆大部分常見問題，但難免會有疏漏。因此本研究亦設計回饋機制，若使用者發現機器人的回覆內容不符合想預期，可以直接查看與問句第二和第三相似的問答組合，或是點選「以上皆非」選項，兩種方式系統都會自動記錄相關資訊。後續我們便可整理蒐集到的組合，持續優化聊天機器人與擴增問答集。\n<!-- more -->\n> 「[語料庫模型] 07-程式碼: 餘弦相似性」這篇的程式碼會回傳相似度最高的 3 個問答組合。\n\n![flow](flow.jpg)\n\n回饋紀錄使用與問答集相似的 CSV 格式儲存，方便整理後移植到資料集中。\n- 回饋紀錄的 log\n    連結: https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv\n    ![回饋機制_log](回饋機制_log.png)\n- 問答集(語料庫)\n    連結: https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\n    ![部分問答集截圖](部分問答集截圖.png)\n\n比較不同的是，回饋紀錄的 Q 欄位代表的是使用者輸入的語句，A 欄位則會根據使用者的選擇而有不同，主要分為兩種情況。\n- **情況一，點選其他相符的選項**\n    使用者輸入「申請喘息服務」，而機器人一開始回覆的問答組合不符預期，所以使用者點選查看第三相符的問答組合「總則(給付八)_獨居長輩是否能使用喘息服務」，因此可以判斷「使用者輸入的語句」與「第三相符問答組合的答案」較相符，並將此新的問答組合儲存於回饋紀錄中。\n    ![image25](image25.png)\n- **情況二，點選「以上皆非」**\n    使用者輸入「外籍看護來自哪一國」，而機器人回覆的內容都不符合使用者期待，所以他選擇「以上皆非」，代表此問題對我們問答集來說是新問題，因此回饋紀錄就會記錄一筆新的問答組合。\n    ![image26](image26.png)\n\n# 程式碼\n\n程式碼: https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py\n這部分的程式碼，是為了讓 API 可以將回饋紀錄寫進檔案\n\n## 接收參數\n```python\nparam = sys.argv\nq = param[1] #使用者輸入的問句\nqa_id = param[2] #使用者認為較貼切的問句，若都不符合則傳送 -1 \ncategory_id = param[3] #使用者當下選擇的類別編號\n```\n\n可以接收像是這樣的參數\n```shell\npython3 add_adjustment.py \"申請喘息服務\" 359 0\n```\n\n## 判斷是否為新問題\n\n新問題是指使用者選了「以上皆非」，也就是說使用者認為他的問句和我們提供的都不相似，我們把這種狀況認為是新問題。\n\n```python\nif qa_id == \"-1\":\n    result['new_question'] = True\n    answer = \"\"\n    remark = \"New Question\"\nelse:\n    result['new_question'] = False\n    qa = os.popen(\n        \"/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/get_answer_by_id.py \" + qa_id).read()\n    qa = json.loads(qa)\n    answer = qa['A']\n    remark = \"Origin Question \"+qa['Q']\n```\n\n`result` 是用來記錄狀況，印出最後的 JSON 檔案的。\n`remark` 就是備註，若是新問題，備註就會記錄 \"New Question\"；反之，則紀錄使用者認為更貼近問題。\n`answer` 是針對使用者的問句，若是新問題，就留空，待後續維護人員評估；反之，使用編號 359 查出問答組合，並把答案的部分存到 `answer`。\n\n![359](359.png)\n\n## 將記錄寫入檔案\n```python\nfile_exist = os.path.isfile(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\")\ncsv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"a+\")\nwriter = csv.writer(csv_file, delimiter=',')\n\n'''Add CSV Title'''\nif not file_exist:\n    csv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"w\")\n    writer = csv.writer(csv_file, delimiter=',')\n    writer.writerow(['id', 'Intent ID', 'Q', 'A', 'category', 'source', 'time', 'remark'])\n\n'''Add Row'''\ncsv_file = open(\"/home/yr/PycharmProjects/nlp/output/adjustments.csv\", \"a+\")\nwriter = csv.writer(csv_file, delimiter=',')\nnew_row = ['', '', q, answer, category_id, 'User Input', str(datetime.datetime.now()), remark]\n```\n\n首先檢查 adjustments.csv 檔案是否存在，若不存在，就開個新檔，並把欄位名稱寫進去。\n檔案已存在，就把紀錄直接寫到檔案的最後一筆。\n> w: 開新檔 & 寫入\n> a+: 用附加方式打開(資料會加在檔案最後，不會把前面的內容洗掉) & 可讀寫\n\n## 檢查寫檔是否成功\n```python\nsuccess = writer.writerow(new_row)\n\nif success > 6:\n    '''\n    new_row = ['', '', '', '', '']\n    because len(new_raw) is 6\n    '''\n    result['success'] = 1\nelse:\n    result['success'] = -1\n```\n\n這部分可能沒寫很好，未來可以再修正寫法。\n主要是想以 new_row 的長度來決定是否有新增成功，判斷的時候又遇到一些問題，不太了解為何 `len(['', '', '', '', ''])` 的結果是 6，就先將錯就錯，若是長度有大於 5 個空字串的 list，就算他成功吧。\n\n## 印出 JSON\n```python\nprint(json.dumps(result, ensure_ascii=False))\n```\n\n印出剛剛準備的 `result`，回饋機制的 API 就完成了!\n```json\n{\n    \"new_question\": true, \n    \"success\": 1 \n}\n```\n","slug":"語料庫模型-09-回饋機制","published":1,"updated":"2024-02-24T08:06:01.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myij001xk0jfc1sreii5","content":"<p>聊天機器人雖有問答集可以回覆大部分常見問題，但難免會有疏漏。因此本研究亦設計回饋機制，若使用者發現機器人的回覆內容不符合想預期，可以直接查看與問句第二和第三相似的問答組合，或是點選「以上皆非」選項，兩種方式系統都會自動記錄相關資訊。後續我們便可整理蒐集到的組合，持續優化聊天機器人與擴增問答集。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>「[語料庫模型] 07-程式碼: 餘弦相似性」這篇的程式碼會回傳相似度最高的 3 個問答組合。</p>\n</blockquote>\n<p><img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/flow.jpg\" alt=\"flow\"></p>\n<p>回饋紀錄使用與問答集相似的 CSV 格式儲存，方便整理後移植到資料集中。</p>\n<ul>\n<li>回饋紀錄的 log<br>  連結: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6_log.png\" alt=\"回饋機制_log\"></li>\n<li>問答集(語料庫)<br>  連結: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/%E9%83%A8%E5%88%86%E5%95%8F%E7%AD%94%E9%9B%86%E6%88%AA%E5%9C%96.png\" alt=\"部分問答集截圖\"></li>\n</ul>\n<p>比較不同的是，回饋紀錄的 Q 欄位代表的是使用者輸入的語句，A 欄位則會根據使用者的選擇而有不同，主要分為兩種情況。</p>\n<ul>\n<li><strong>情況一，點選其他相符的選項</strong><br>  使用者輸入「申請喘息服務」，而機器人一開始回覆的問答組合不符預期，所以使用者點選查看第三相符的問答組合「總則(給付八)_獨居長輩是否能使用喘息服務」，因此可以判斷「使用者輸入的語句」與「第三相符問答組合的答案」較相符，並將此新的問答組合儲存於回饋紀錄中。<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/image25.png\" alt=\"image25\"></li>\n<li><strong>情況二，點選「以上皆非」</strong><br>  使用者輸入「外籍看護來自哪一國」，而機器人回覆的內容都不符合使用者期待，所以他選擇「以上皆非」，代表此問題對我們問答集來說是新問題，因此回饋紀錄就會記錄一筆新的問答組合。<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/image26.png\" alt=\"image26\"></li>\n</ul>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py</a><br>這部分的程式碼，是為了讓 API 可以將回饋紀錄寫進檔案</p>\n<h2 id=\"接收參數\"><a href=\"#接收參數\" class=\"headerlink\" title=\"接收參數\"></a>接收參數</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param = sys.argv</span><br><span class=\"line\">q = param[<span class=\"number\">1</span>] <span class=\"comment\">#使用者輸入的問句</span></span><br><span class=\"line\">qa_id = param[<span class=\"number\">2</span>] <span class=\"comment\">#使用者認為較貼切的問句，若都不符合則傳送 -1 </span></span><br><span class=\"line\">category_id = param[<span class=\"number\">3</span>] <span class=\"comment\">#使用者當下選擇的類別編號</span></span><br></pre></td></tr></table></figure>\n\n<p>可以接收像是這樣的參數</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 add_adjustment.py &quot;申請喘息服務&quot; 359 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判斷是否為新問題\"><a href=\"#判斷是否為新問題\" class=\"headerlink\" title=\"判斷是否為新問題\"></a>判斷是否為新問題</h2><p>新問題是指使用者選了「以上皆非」，也就是說使用者認為他的問句和我們提供的都不相似，我們把這種狀況認為是新問題。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> qa_id == <span class=\"string\">&quot;-1&quot;</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;new_question&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    answer = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    remark = <span class=\"string\">&quot;New Question&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;new_question&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\">    qa = os.popen(</span><br><span class=\"line\">        <span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/get_answer_by_id.py &quot;</span> + qa_id).read()</span><br><span class=\"line\">    qa = json.loads(qa)</span><br><span class=\"line\">    answer = qa[<span class=\"string\">&#x27;A&#x27;</span>]</span><br><span class=\"line\">    remark = <span class=\"string\">&quot;Origin Question &quot;</span>+qa[<span class=\"string\">&#x27;Q&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>result</code> 是用來記錄狀況，印出最後的 JSON 檔案的。<br><code>remark</code> 就是備註，若是新問題，備註就會記錄 “New Question”；反之，則紀錄使用者認為更貼近問題。<br><code>answer</code> 是針對使用者的問句，若是新問題，就留空，待後續維護人員評估；反之，使用編號 359 查出問答組合，並把答案的部分存到 <code>answer</code>。</p>\n<p><img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/359.png\" alt=\"359\"></p>\n<h2 id=\"將記錄寫入檔案\"><a href=\"#將記錄寫入檔案\" class=\"headerlink\" title=\"將記錄寫入檔案\"></a>將記錄寫入檔案</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file_exist = os.path.isfile(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>)</span><br><span class=\"line\">csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;Add CSV Title&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file_exist:</span><br><span class=\"line\">    csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;Intent ID&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;category&#x27;</span>, <span class=\"string\">&#x27;source&#x27;</span>, <span class=\"string\">&#x27;time&#x27;</span>, <span class=\"string\">&#x27;remark&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;Add Row&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">new_row = [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, q, answer, category_id, <span class=\"string\">&#x27;User Input&#x27;</span>, <span class=\"built_in\">str</span>(datetime.datetime.now()), remark]</span><br></pre></td></tr></table></figure>\n\n<p>首先檢查 adjustments.csv 檔案是否存在，若不存在，就開個新檔，並把欄位名稱寫進去。<br>檔案已存在，就把紀錄直接寫到檔案的最後一筆。</p>\n<blockquote>\n<p>w: 開新檔 &amp; 寫入<br>a+: 用附加方式打開(資料會加在檔案最後，不會把前面的內容洗掉) &amp; 可讀寫</p>\n</blockquote>\n<h2 id=\"檢查寫檔是否成功\"><a href=\"#檢查寫檔是否成功\" class=\"headerlink\" title=\"檢查寫檔是否成功\"></a>檢查寫檔是否成功</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">success = writer.writerow(new_row)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> success &gt; <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    new_row = [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">    because len(new_raw) is 6</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    result[<span class=\"string\">&#x27;success&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;success&#x27;</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>這部分可能沒寫很好，未來可以再修正寫法。<br>主要是想以 new_row 的長度來決定是否有新增成功，判斷的時候又遇到一些問題，不太了解為何 <code>len([&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;])</code> 的結果是 6，就先將錯就錯，若是長度有大於 5 個空字串的 list，就算他成功吧。</p>\n<h2 id=\"印出-JSON\"><a href=\"#印出-JSON\" class=\"headerlink\" title=\"印出 JSON\"></a>印出 JSON</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(json.dumps(result, ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n\n<p>印出剛剛準備的 <code>result</code>，回饋機制的 API 就完成了!</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;new_question&quot;</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;success&quot;</span>: <span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>聊天機器人雖有問答集可以回覆大部分常見問題，但難免會有疏漏。因此本研究亦設計回饋機制，若使用者發現機器人的回覆內容不符合想預期，可以直接查看與問句第二和第三相似的問答組合，或是點選「以上皆非」選項，兩種方式系統都會自動記錄相關資訊。後續我們便可整理蒐集到的組合，持續優化聊天機器人與擴增問答集。</p>","more":"<blockquote>\n<p>「[語料庫模型] 07-程式碼: 餘弦相似性」這篇的程式碼會回傳相似度最高的 3 個問答組合。</p>\n</blockquote>\n<p><img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/flow.jpg\" alt=\"flow\"></p>\n<p>回饋紀錄使用與問答集相似的 CSV 格式儲存，方便整理後移植到資料集中。</p>\n<ul>\n<li>回饋紀錄的 log<br>  連結: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/output/adjustments.bk.csv</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6_log.png\" alt=\"回饋機制_log\"></li>\n<li>問答集(語料庫)<br>  連結: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/docs/fixed_file_1622789141_remove_duplicate_labeled_renumber.csv</a><br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/%E9%83%A8%E5%88%86%E5%95%8F%E7%AD%94%E9%9B%86%E6%88%AA%E5%9C%96.png\" alt=\"部分問答集截圖\"></li>\n</ul>\n<p>比較不同的是，回饋紀錄的 Q 欄位代表的是使用者輸入的語句，A 欄位則會根據使用者的選擇而有不同，主要分為兩種情況。</p>\n<ul>\n<li><strong>情況一，點選其他相符的選項</strong><br>  使用者輸入「申請喘息服務」，而機器人一開始回覆的問答組合不符預期，所以使用者點選查看第三相符的問答組合「總則(給付八)_獨居長輩是否能使用喘息服務」，因此可以判斷「使用者輸入的語句」與「第三相符問答組合的答案」較相符，並將此新的問答組合儲存於回饋紀錄中。<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/image25.png\" alt=\"image25\"></li>\n<li><strong>情況二，點選「以上皆非」</strong><br>  使用者輸入「外籍看護來自哪一國」，而機器人回覆的內容都不符合使用者期待，所以他選擇「以上皆非」，代表此問題對我們問答集來說是新問題，因此回饋紀錄就會記錄一筆新的問答組合。<br>  <img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/image26.png\" alt=\"image26\"></li>\n</ul>\n<h1 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h1><p>程式碼: <a href=\"https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py\">https://gitlab.com/graduate_lab415/nlp/-/blob/master/add_adjustment.py</a><br>這部分的程式碼，是為了讓 API 可以將回饋紀錄寫進檔案</p>\n<h2 id=\"接收參數\"><a href=\"#接收參數\" class=\"headerlink\" title=\"接收參數\"></a>接收參數</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param = sys.argv</span><br><span class=\"line\">q = param[<span class=\"number\">1</span>] <span class=\"comment\">#使用者輸入的問句</span></span><br><span class=\"line\">qa_id = param[<span class=\"number\">2</span>] <span class=\"comment\">#使用者認為較貼切的問句，若都不符合則傳送 -1 </span></span><br><span class=\"line\">category_id = param[<span class=\"number\">3</span>] <span class=\"comment\">#使用者當下選擇的類別編號</span></span><br></pre></td></tr></table></figure>\n\n<p>可以接收像是這樣的參數</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 add_adjustment.py &quot;申請喘息服務&quot; 359 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判斷是否為新問題\"><a href=\"#判斷是否為新問題\" class=\"headerlink\" title=\"判斷是否為新問題\"></a>判斷是否為新問題</h2><p>新問題是指使用者選了「以上皆非」，也就是說使用者認為他的問句和我們提供的都不相似，我們把這種狀況認為是新問題。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> qa_id == <span class=\"string\">&quot;-1&quot;</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;new_question&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    answer = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    remark = <span class=\"string\">&quot;New Question&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;new_question&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\">    qa = os.popen(</span><br><span class=\"line\">        <span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/venv/bin/python3 /home/yr/PycharmProjects/nlp/get_answer_by_id.py &quot;</span> + qa_id).read()</span><br><span class=\"line\">    qa = json.loads(qa)</span><br><span class=\"line\">    answer = qa[<span class=\"string\">&#x27;A&#x27;</span>]</span><br><span class=\"line\">    remark = <span class=\"string\">&quot;Origin Question &quot;</span>+qa[<span class=\"string\">&#x27;Q&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>result</code> 是用來記錄狀況，印出最後的 JSON 檔案的。<br><code>remark</code> 就是備註，若是新問題，備註就會記錄 “New Question”；反之，則紀錄使用者認為更貼近問題。<br><code>answer</code> 是針對使用者的問句，若是新問題，就留空，待後續維護人員評估；反之，使用編號 359 查出問答組合，並把答案的部分存到 <code>answer</code>。</p>\n<p><img src=\"/2021/10/04/%E8%AA%9E%E6%96%99%E5%BA%AB%E6%A8%A1%E5%9E%8B-09-%E5%9B%9E%E9%A5%8B%E6%A9%9F%E5%88%B6/359.png\" alt=\"359\"></p>\n<h2 id=\"將記錄寫入檔案\"><a href=\"#將記錄寫入檔案\" class=\"headerlink\" title=\"將記錄寫入檔案\"></a>將記錄寫入檔案</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file_exist = os.path.isfile(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>)</span><br><span class=\"line\">csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;Add CSV Title&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file_exist:</span><br><span class=\"line\">    csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;Intent ID&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;category&#x27;</span>, <span class=\"string\">&#x27;source&#x27;</span>, <span class=\"string\">&#x27;time&#x27;</span>, <span class=\"string\">&#x27;remark&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;Add Row&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csv_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/home/yr/PycharmProjects/nlp/output/adjustments.csv&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">writer = csv.writer(csv_file, delimiter=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">new_row = [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, q, answer, category_id, <span class=\"string\">&#x27;User Input&#x27;</span>, <span class=\"built_in\">str</span>(datetime.datetime.now()), remark]</span><br></pre></td></tr></table></figure>\n\n<p>首先檢查 adjustments.csv 檔案是否存在，若不存在，就開個新檔，並把欄位名稱寫進去。<br>檔案已存在，就把紀錄直接寫到檔案的最後一筆。</p>\n<blockquote>\n<p>w: 開新檔 &amp; 寫入<br>a+: 用附加方式打開(資料會加在檔案最後，不會把前面的內容洗掉) &amp; 可讀寫</p>\n</blockquote>\n<h2 id=\"檢查寫檔是否成功\"><a href=\"#檢查寫檔是否成功\" class=\"headerlink\" title=\"檢查寫檔是否成功\"></a>檢查寫檔是否成功</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">success = writer.writerow(new_row)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> success &gt; <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    new_row = [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">    because len(new_raw) is 6</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    result[<span class=\"string\">&#x27;success&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    result[<span class=\"string\">&#x27;success&#x27;</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>這部分可能沒寫很好，未來可以再修正寫法。<br>主要是想以 new_row 的長度來決定是否有新增成功，判斷的時候又遇到一些問題，不太了解為何 <code>len([&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;])</code> 的結果是 6，就先將錯就錯，若是長度有大於 5 個空字串的 list，就算他成功吧。</p>\n<h2 id=\"印出-JSON\"><a href=\"#印出-JSON\" class=\"headerlink\" title=\"印出 JSON\"></a>印出 JSON</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(json.dumps(result, ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n\n<p>印出剛剛準備的 <code>result</code>，回饋機制的 API 就完成了!</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;new_question&quot;</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;success&quot;</span>: <span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"轉移 OneNote 筆記到其他帳號","date":"2021-07-14T09:39:16.000Z","_content":"\n先簡單介紹一下我平常作筆記的狀況好了~\n\n我習慣把老師上課的 PPT 先印下來，在課堂上寫筆記，雖然已經盡量節省(每面 4 張投影片，印雙面，等於一張紙有 8 張投影片)，但還是覺得很不環保。自從疫情開始，學校改為遠距上課，有天剛好看到家裡的平板，想說，不然來試試看用平板作筆記。\n<!-- more -->\n我使用 OneNote 的時間也不過短短 2 個月而已吧，卻覺得相見恨晚。其實大概 2、3 年前，我就知道這個軟體了，但那時候只有筆電，不懂他的強大，只覺打字沒有寫字快，而且得滑鼠又不好畫線，難用。因為平板有附觸控筆，我可以先用電腦把 PPT 匯入，同步後就能用平板作筆記了。觸控筆寫起來其實還滿順手的，我後來的筆記都改到 OneNote 上了。(~~怎麼看起來好像在業配😂~~)\n\n缺點來了！通常我在選擇要不要使用一個軟體最重要的一點就是，一定要可以跨裝置存取。關於這點 OneNote 只能算勉強達標，他有同步筆記本的功能，但好像沒那麼即時，有時候匯入 PPT ，同步還要多按幾下才會有資料。或是在平板端明明就已經把筆跡擦掉，但電腦還是看的到。雖然影響不大，但就是覺得有那麼一點不順手。\n\n要畢業了，以後要用 Office 就要自己買了🙁。因此趁教育版帳號還沒被刪除前，我要趕快把資料備份出來。本來想跟 Google 一樣，直接轉移所有權，但 OneDrive 好像沒有這樣的功能，摸索了一番才找到這條半手動的路，紀錄一下，若以後還有人遇到相同問題可以參考。\n\n## 兩個 Microsoft 帳號\n首先你需要兩個 Microsoft 帳號，edu 的帳號是學校的，畢業後會被停用，gmail 的是個人帳號。\n\n> 轉移檔案: edu -> gmail\n\n要先在 OneNote 裡登入兩個帳號方便等下切換。\n![需要兩個帳號](需要兩個帳號.png)\n\n## 匯出筆記本\n沒辦法直接轉移只好手動匯出，再手動匯入了。\n\n先開好要匯出的筆記本，選擇左上的`檔案`>`匯出`。\n匯出目前的`筆記本`，格式是`OneNote 套件 (*.onepkg)`。\n![匯出筆記本](匯出筆記本.png)\n\n可以暫時存到桌面或其他方便找的地方。\n\n## 匯入筆記本\n點擊剛剛匯出好的檔案，可以為匯入的筆記本重新命名，為了怕搞混，我在本來的名稱後加了些字\n![名字改一下](名字改一下.png)\n\n目前這個新匯入的筆記本還只是在本地端，還沒上傳到 OneDrive。\n\n## 上傳到個人雲端\n現在要把新匯入的筆記本上傳到個人雲端。\n\n先切換帳號。\n![切換帳號](切換帳號.png)\n\n再設定一下，讓檔案上傳到 OneDrive。\n![儲存到個人雲端](儲存到個人雲端.png)\n\n這裡的「共用」只是把檔案上傳到雲端而已，不會把檔案公開。\n\n如果有這個畫面應該就算上傳成功了。\n![出現這個畫面就算成功了](出現這個畫面就算成功了.png)\n\n確認一下雲端也有這個檔案了。\n![出現這個畫面就算成功了](出現這個畫面就算成功了.png)\n\n最後平板端就可以登出 edu 帳號，關掉 edu 的筆記本，登入 gmail 帳號，開啟重新匯入的筆記本囉。\n","source":"_posts/轉移-OneNote-筆記到其他帳號.md","raw":"---\ntitle: 轉移 OneNote 筆記到其他帳號\ndate: 2021-07-14 17:39:16\ntags:\n- OneNote\n---\n\n先簡單介紹一下我平常作筆記的狀況好了~\n\n我習慣把老師上課的 PPT 先印下來，在課堂上寫筆記，雖然已經盡量節省(每面 4 張投影片，印雙面，等於一張紙有 8 張投影片)，但還是覺得很不環保。自從疫情開始，學校改為遠距上課，有天剛好看到家裡的平板，想說，不然來試試看用平板作筆記。\n<!-- more -->\n我使用 OneNote 的時間也不過短短 2 個月而已吧，卻覺得相見恨晚。其實大概 2、3 年前，我就知道這個軟體了，但那時候只有筆電，不懂他的強大，只覺打字沒有寫字快，而且得滑鼠又不好畫線，難用。因為平板有附觸控筆，我可以先用電腦把 PPT 匯入，同步後就能用平板作筆記了。觸控筆寫起來其實還滿順手的，我後來的筆記都改到 OneNote 上了。(~~怎麼看起來好像在業配😂~~)\n\n缺點來了！通常我在選擇要不要使用一個軟體最重要的一點就是，一定要可以跨裝置存取。關於這點 OneNote 只能算勉強達標，他有同步筆記本的功能，但好像沒那麼即時，有時候匯入 PPT ，同步還要多按幾下才會有資料。或是在平板端明明就已經把筆跡擦掉，但電腦還是看的到。雖然影響不大，但就是覺得有那麼一點不順手。\n\n要畢業了，以後要用 Office 就要自己買了🙁。因此趁教育版帳號還沒被刪除前，我要趕快把資料備份出來。本來想跟 Google 一樣，直接轉移所有權，但 OneDrive 好像沒有這樣的功能，摸索了一番才找到這條半手動的路，紀錄一下，若以後還有人遇到相同問題可以參考。\n\n## 兩個 Microsoft 帳號\n首先你需要兩個 Microsoft 帳號，edu 的帳號是學校的，畢業後會被停用，gmail 的是個人帳號。\n\n> 轉移檔案: edu -> gmail\n\n要先在 OneNote 裡登入兩個帳號方便等下切換。\n![需要兩個帳號](需要兩個帳號.png)\n\n## 匯出筆記本\n沒辦法直接轉移只好手動匯出，再手動匯入了。\n\n先開好要匯出的筆記本，選擇左上的`檔案`>`匯出`。\n匯出目前的`筆記本`，格式是`OneNote 套件 (*.onepkg)`。\n![匯出筆記本](匯出筆記本.png)\n\n可以暫時存到桌面或其他方便找的地方。\n\n## 匯入筆記本\n點擊剛剛匯出好的檔案，可以為匯入的筆記本重新命名，為了怕搞混，我在本來的名稱後加了些字\n![名字改一下](名字改一下.png)\n\n目前這個新匯入的筆記本還只是在本地端，還沒上傳到 OneDrive。\n\n## 上傳到個人雲端\n現在要把新匯入的筆記本上傳到個人雲端。\n\n先切換帳號。\n![切換帳號](切換帳號.png)\n\n再設定一下，讓檔案上傳到 OneDrive。\n![儲存到個人雲端](儲存到個人雲端.png)\n\n這裡的「共用」只是把檔案上傳到雲端而已，不會把檔案公開。\n\n如果有這個畫面應該就算上傳成功了。\n![出現這個畫面就算成功了](出現這個畫面就算成功了.png)\n\n確認一下雲端也有這個檔案了。\n![出現這個畫面就算成功了](出現這個畫面就算成功了.png)\n\n最後平板端就可以登出 edu 帳號，關掉 edu 的筆記本，登入 gmail 帳號，開啟重新匯入的筆記本囉。\n","slug":"轉移-OneNote-筆記到其他帳號","published":1,"updated":"2024-02-24T08:06:01.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myij001zk0jfd7qaa95d","content":"<p>先簡單介紹一下我平常作筆記的狀況好了~</p>\n<p>我習慣把老師上課的 PPT 先印下來，在課堂上寫筆記，雖然已經盡量節省(每面 4 張投影片，印雙面，等於一張紙有 8 張投影片)，但還是覺得很不環保。自從疫情開始，學校改為遠距上課，有天剛好看到家裡的平板，想說，不然來試試看用平板作筆記。</p>\n<span id=\"more\"></span>\n<p>我使用 OneNote 的時間也不過短短 2 個月而已吧，卻覺得相見恨晚。其實大概 2、3 年前，我就知道這個軟體了，但那時候只有筆電，不懂他的強大，只覺打字沒有寫字快，而且得滑鼠又不好畫線，難用。因為平板有附觸控筆，我可以先用電腦把 PPT 匯入，同步後就能用平板作筆記了。觸控筆寫起來其實還滿順手的，我後來的筆記都改到 OneNote 上了。(<del>怎麼看起來好像在業配😂</del>)</p>\n<p>缺點來了！通常我在選擇要不要使用一個軟體最重要的一點就是，一定要可以跨裝置存取。關於這點 OneNote 只能算勉強達標，他有同步筆記本的功能，但好像沒那麼即時，有時候匯入 PPT ，同步還要多按幾下才會有資料。或是在平板端明明就已經把筆跡擦掉，但電腦還是看的到。雖然影響不大，但就是覺得有那麼一點不順手。</p>\n<p>要畢業了，以後要用 Office 就要自己買了🙁。因此趁教育版帳號還沒被刪除前，我要趕快把資料備份出來。本來想跟 Google 一樣，直接轉移所有權，但 OneDrive 好像沒有這樣的功能，摸索了一番才找到這條半手動的路，紀錄一下，若以後還有人遇到相同問題可以參考。</p>\n<h2 id=\"兩個-Microsoft-帳號\"><a href=\"#兩個-Microsoft-帳號\" class=\"headerlink\" title=\"兩個 Microsoft 帳號\"></a>兩個 Microsoft 帳號</h2><p>首先你需要兩個 Microsoft 帳號，edu 的帳號是學校的，畢業後會被停用，gmail 的是個人帳號。</p>\n<blockquote>\n<p>轉移檔案: edu -&gt; gmail</p>\n</blockquote>\n<p>要先在 OneNote 裡登入兩個帳號方便等下切換。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E9%9C%80%E8%A6%81%E5%85%A9%E5%80%8B%E5%B8%B3%E8%99%9F.png\" alt=\"需要兩個帳號\"></p>\n<h2 id=\"匯出筆記本\"><a href=\"#匯出筆記本\" class=\"headerlink\" title=\"匯出筆記本\"></a>匯出筆記本</h2><p>沒辦法直接轉移只好手動匯出，再手動匯入了。</p>\n<p>先開好要匯出的筆記本，選擇左上的<code>檔案</code>&gt;<code>匯出</code>。<br>匯出目前的<code>筆記本</code>，格式是<code>OneNote 套件 (*.onepkg)</code>。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%8C%AF%E5%87%BA%E7%AD%86%E8%A8%98%E6%9C%AC.png\" alt=\"匯出筆記本\"></p>\n<p>可以暫時存到桌面或其他方便找的地方。</p>\n<h2 id=\"匯入筆記本\"><a href=\"#匯入筆記本\" class=\"headerlink\" title=\"匯入筆記本\"></a>匯入筆記本</h2><p>點擊剛剛匯出好的檔案，可以為匯入的筆記本重新命名，為了怕搞混，我在本來的名稱後加了些字<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%90%8D%E5%AD%97%E6%94%B9%E4%B8%80%E4%B8%8B.png\" alt=\"名字改一下\"></p>\n<p>目前這個新匯入的筆記本還只是在本地端，還沒上傳到 OneDrive。</p>\n<h2 id=\"上傳到個人雲端\"><a href=\"#上傳到個人雲端\" class=\"headerlink\" title=\"上傳到個人雲端\"></a>上傳到個人雲端</h2><p>現在要把新匯入的筆記本上傳到個人雲端。</p>\n<p>先切換帳號。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%88%87%E6%8F%9B%E5%B8%B3%E8%99%9F.png\" alt=\"切換帳號\"></p>\n<p>再設定一下，讓檔案上傳到 OneDrive。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%84%B2%E5%AD%98%E5%88%B0%E5%80%8B%E4%BA%BA%E9%9B%B2%E7%AB%AF.png\" alt=\"儲存到個人雲端\"></p>\n<p>這裡的「共用」只是把檔案上傳到雲端而已，不會把檔案公開。</p>\n<p>如果有這個畫面應該就算上傳成功了。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%87%BA%E7%8F%BE%E9%80%99%E5%80%8B%E7%95%AB%E9%9D%A2%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F%E4%BA%86.png\" alt=\"出現這個畫面就算成功了\"></p>\n<p>確認一下雲端也有這個檔案了。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%87%BA%E7%8F%BE%E9%80%99%E5%80%8B%E7%95%AB%E9%9D%A2%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F%E4%BA%86.png\" alt=\"出現這個畫面就算成功了\"></p>\n<p>最後平板端就可以登出 edu 帳號，關掉 edu 的筆記本，登入 gmail 帳號，開啟重新匯入的筆記本囉。</p>\n","site":{"data":{}},"excerpt":"<p>先簡單介紹一下我平常作筆記的狀況好了~</p>\n<p>我習慣把老師上課的 PPT 先印下來，在課堂上寫筆記，雖然已經盡量節省(每面 4 張投影片，印雙面，等於一張紙有 8 張投影片)，但還是覺得很不環保。自從疫情開始，學校改為遠距上課，有天剛好看到家裡的平板，想說，不然來試試看用平板作筆記。</p>","more":"<p>我使用 OneNote 的時間也不過短短 2 個月而已吧，卻覺得相見恨晚。其實大概 2、3 年前，我就知道這個軟體了，但那時候只有筆電，不懂他的強大，只覺打字沒有寫字快，而且得滑鼠又不好畫線，難用。因為平板有附觸控筆，我可以先用電腦把 PPT 匯入，同步後就能用平板作筆記了。觸控筆寫起來其實還滿順手的，我後來的筆記都改到 OneNote 上了。(<del>怎麼看起來好像在業配😂</del>)</p>\n<p>缺點來了！通常我在選擇要不要使用一個軟體最重要的一點就是，一定要可以跨裝置存取。關於這點 OneNote 只能算勉強達標，他有同步筆記本的功能，但好像沒那麼即時，有時候匯入 PPT ，同步還要多按幾下才會有資料。或是在平板端明明就已經把筆跡擦掉，但電腦還是看的到。雖然影響不大，但就是覺得有那麼一點不順手。</p>\n<p>要畢業了，以後要用 Office 就要自己買了🙁。因此趁教育版帳號還沒被刪除前，我要趕快把資料備份出來。本來想跟 Google 一樣，直接轉移所有權，但 OneDrive 好像沒有這樣的功能，摸索了一番才找到這條半手動的路，紀錄一下，若以後還有人遇到相同問題可以參考。</p>\n<h2 id=\"兩個-Microsoft-帳號\"><a href=\"#兩個-Microsoft-帳號\" class=\"headerlink\" title=\"兩個 Microsoft 帳號\"></a>兩個 Microsoft 帳號</h2><p>首先你需要兩個 Microsoft 帳號，edu 的帳號是學校的，畢業後會被停用，gmail 的是個人帳號。</p>\n<blockquote>\n<p>轉移檔案: edu -&gt; gmail</p>\n</blockquote>\n<p>要先在 OneNote 裡登入兩個帳號方便等下切換。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E9%9C%80%E8%A6%81%E5%85%A9%E5%80%8B%E5%B8%B3%E8%99%9F.png\" alt=\"需要兩個帳號\"></p>\n<h2 id=\"匯出筆記本\"><a href=\"#匯出筆記本\" class=\"headerlink\" title=\"匯出筆記本\"></a>匯出筆記本</h2><p>沒辦法直接轉移只好手動匯出，再手動匯入了。</p>\n<p>先開好要匯出的筆記本，選擇左上的<code>檔案</code>&gt;<code>匯出</code>。<br>匯出目前的<code>筆記本</code>，格式是<code>OneNote 套件 (*.onepkg)</code>。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%8C%AF%E5%87%BA%E7%AD%86%E8%A8%98%E6%9C%AC.png\" alt=\"匯出筆記本\"></p>\n<p>可以暫時存到桌面或其他方便找的地方。</p>\n<h2 id=\"匯入筆記本\"><a href=\"#匯入筆記本\" class=\"headerlink\" title=\"匯入筆記本\"></a>匯入筆記本</h2><p>點擊剛剛匯出好的檔案，可以為匯入的筆記本重新命名，為了怕搞混，我在本來的名稱後加了些字<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%90%8D%E5%AD%97%E6%94%B9%E4%B8%80%E4%B8%8B.png\" alt=\"名字改一下\"></p>\n<p>目前這個新匯入的筆記本還只是在本地端，還沒上傳到 OneDrive。</p>\n<h2 id=\"上傳到個人雲端\"><a href=\"#上傳到個人雲端\" class=\"headerlink\" title=\"上傳到個人雲端\"></a>上傳到個人雲端</h2><p>現在要把新匯入的筆記本上傳到個人雲端。</p>\n<p>先切換帳號。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%88%87%E6%8F%9B%E5%B8%B3%E8%99%9F.png\" alt=\"切換帳號\"></p>\n<p>再設定一下，讓檔案上傳到 OneDrive。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%84%B2%E5%AD%98%E5%88%B0%E5%80%8B%E4%BA%BA%E9%9B%B2%E7%AB%AF.png\" alt=\"儲存到個人雲端\"></p>\n<p>這裡的「共用」只是把檔案上傳到雲端而已，不會把檔案公開。</p>\n<p>如果有這個畫面應該就算上傳成功了。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%87%BA%E7%8F%BE%E9%80%99%E5%80%8B%E7%95%AB%E9%9D%A2%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F%E4%BA%86.png\" alt=\"出現這個畫面就算成功了\"></p>\n<p>確認一下雲端也有這個檔案了。<br><img src=\"/2021/07/14/%E8%BD%89%E7%A7%BB-OneNote-%E7%AD%86%E8%A8%98%E5%88%B0%E5%85%B6%E4%BB%96%E5%B8%B3%E8%99%9F/%E5%87%BA%E7%8F%BE%E9%80%99%E5%80%8B%E7%95%AB%E9%9D%A2%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F%E4%BA%86.png\" alt=\"出現這個畫面就算成功了\"></p>\n<p>最後平板端就可以登出 edu 帳號，關掉 edu 的筆記本，登入 gmail 帳號，開啟重新匯入的筆記本囉。</p>"},{"title":"逆向工程-反編譯APK","date":"2018-01-25T16:32:15.000Z","_content":"\n* 本文曾發佈在 [https://hackmd.io/@yrw/BJeYauKdBz](https://hackmd.io/@yrw/BJeYauKdBz)\n\n> **編輯紀錄**:\n> 2020/09/24\n> 補齊dex2jar詳細步驟、加入jd-gui\n\n<!-- more -->\n# 環境&材料\n- 一台 Kali Linux\n- 一個 APK\n\n# 1. 解壓縮Apk檔\n\n```shell=\n$ unzip OOXX.apk\n```\n得到 `classes.dex`\n![classes](classes.png) \n\n# 2. Dex to Jar\n\n## 下載\nhttps://sourceforge.net/projects/dex2jar/\n\n## 解壓縮\n解壓縮後，要讓裡面的程式都「可執行」\n```shell=\nunzip dex2jar-2.0.zip\ncd dex2jar-2.0/\nchmod +x d*\n```\n![unzip](unzip.png)\n\n## 執行\n轉檔成jar格式\n\n```shell=\n$ ./d2j-dex2jar.sh classes.dex\n```\n\n得到`classes-dex2jar.jar`\n\n![classes-dex2jar](classes-dex2jar.png)\n\n# 3. Jar to Java\n\n有 gui 和 cmd 兩種版本，依需求取用\ngui 可以 trace code 可能方便一些\n\n## jd-gui\n\n### 下載\nhttp://java-decompiler.github.io/\n![jd-gui](jd-gui.png)\n\n### 執行\nkali 預先有安裝 java 了，省略安裝步驟\n```shell=\njava -jar jd-gui-1.6.6.jar\n```\n開啟剛反編譯完的 `classes-dex2jar.jar`\n![open-file](open-file.png)\n\n就能看到java程式碼\n![result](result.png)\n\n## jd-cmd\nhttps://github.com/kwart/jd-cmd\n\n### 下載 \n\n```shell=\n$ git clone https://github.com/kwart/jd-cmd.git\n```\n\n### 安裝\n\n下載後，可以在資料夾中找找到`hackingOnJdCmd.md`，裡面有安裝步驟\n\n1. 首先要安裝Maven工具\n```shell=\n$ sudo apt-get install maven\n```\n> https://www.facebook.com/teacherchi/posts/830539233634000\n> Maven 是一個「軟體開發流程」的「自動化工具」，一般人會撰寫時下一些指令、編譯時下另外一些指令、測試／除錯／版本維護又是下另外一些指令。\n> Maven 可以讓你把每個流程輸入的指令，分門別類地記錄下來（當然，第一次還是要你用手工把它 Key 進去）。等於它有能力「模仿」你、把你每個流程打入的指令無限次「重現」。以後你只要一聲令下，就能把這一大堆指令，一口氣執行完畢。更棒的是，呼叫 Maven 時，可以從外部下一些小指令，客製化這些「每個流程要輸入的指令」的執行順序。因為軟體開發流程的「撰寫 --> 編譯 --> 測試 --> 除錯 --> 原始碼版本維護 --> ...」並非永遠依照固定順序執行、一成不變的。正因 Maven 可以彈性調整組合軟體開發過程中那一大堆鬼畫符般的指令，讓你不必背誦，它才會那麼受歡迎。\n> **Maven之於Java，相當於Makefile之於C**\n2. 安裝jd-cmd\n```shell=\n$ cd jd-cmd\n$ mvn clean package\n```\n\n### 使用\n\n1. 測試\n```shell=\n$ java -jar jd-cli/target/jd-cli.jar\n```\n2. 建立一個存放反編譯結果的資料夾\n```shell=\n$ mkdir ~/dex2jarTest/apk/OOXX/decompile \n```\n3. 反編譯!\n```shell=\n$ java -jar jd-cli/target/jd-cli.jar [.jar路徑] -od [輸出路徑]\n$ java -jar jd-cli/target/jd-cli.jar ~/dex2jarTest/apk/OOXX/classes-dex2jar.jar -od ~/dex2jarTest/apk/OOXX/decompile/\n```\n接著在decompile資料夾裡就可以看到反編譯完的結果囉~\n","source":"_posts/逆向工程-反編譯APK.md","raw":"---\ntitle: 逆向工程-反編譯APK\ndate: 2018-01-26 00:32:15\ntags:\n- 反編譯\n- 資安\n- 逆向工程\n- APK\n---\n\n* 本文曾發佈在 [https://hackmd.io/@yrw/BJeYauKdBz](https://hackmd.io/@yrw/BJeYauKdBz)\n\n> **編輯紀錄**:\n> 2020/09/24\n> 補齊dex2jar詳細步驟、加入jd-gui\n\n<!-- more -->\n# 環境&材料\n- 一台 Kali Linux\n- 一個 APK\n\n# 1. 解壓縮Apk檔\n\n```shell=\n$ unzip OOXX.apk\n```\n得到 `classes.dex`\n![classes](classes.png) \n\n# 2. Dex to Jar\n\n## 下載\nhttps://sourceforge.net/projects/dex2jar/\n\n## 解壓縮\n解壓縮後，要讓裡面的程式都「可執行」\n```shell=\nunzip dex2jar-2.0.zip\ncd dex2jar-2.0/\nchmod +x d*\n```\n![unzip](unzip.png)\n\n## 執行\n轉檔成jar格式\n\n```shell=\n$ ./d2j-dex2jar.sh classes.dex\n```\n\n得到`classes-dex2jar.jar`\n\n![classes-dex2jar](classes-dex2jar.png)\n\n# 3. Jar to Java\n\n有 gui 和 cmd 兩種版本，依需求取用\ngui 可以 trace code 可能方便一些\n\n## jd-gui\n\n### 下載\nhttp://java-decompiler.github.io/\n![jd-gui](jd-gui.png)\n\n### 執行\nkali 預先有安裝 java 了，省略安裝步驟\n```shell=\njava -jar jd-gui-1.6.6.jar\n```\n開啟剛反編譯完的 `classes-dex2jar.jar`\n![open-file](open-file.png)\n\n就能看到java程式碼\n![result](result.png)\n\n## jd-cmd\nhttps://github.com/kwart/jd-cmd\n\n### 下載 \n\n```shell=\n$ git clone https://github.com/kwart/jd-cmd.git\n```\n\n### 安裝\n\n下載後，可以在資料夾中找找到`hackingOnJdCmd.md`，裡面有安裝步驟\n\n1. 首先要安裝Maven工具\n```shell=\n$ sudo apt-get install maven\n```\n> https://www.facebook.com/teacherchi/posts/830539233634000\n> Maven 是一個「軟體開發流程」的「自動化工具」，一般人會撰寫時下一些指令、編譯時下另外一些指令、測試／除錯／版本維護又是下另外一些指令。\n> Maven 可以讓你把每個流程輸入的指令，分門別類地記錄下來（當然，第一次還是要你用手工把它 Key 進去）。等於它有能力「模仿」你、把你每個流程打入的指令無限次「重現」。以後你只要一聲令下，就能把這一大堆指令，一口氣執行完畢。更棒的是，呼叫 Maven 時，可以從外部下一些小指令，客製化這些「每個流程要輸入的指令」的執行順序。因為軟體開發流程的「撰寫 --> 編譯 --> 測試 --> 除錯 --> 原始碼版本維護 --> ...」並非永遠依照固定順序執行、一成不變的。正因 Maven 可以彈性調整組合軟體開發過程中那一大堆鬼畫符般的指令，讓你不必背誦，它才會那麼受歡迎。\n> **Maven之於Java，相當於Makefile之於C**\n2. 安裝jd-cmd\n```shell=\n$ cd jd-cmd\n$ mvn clean package\n```\n\n### 使用\n\n1. 測試\n```shell=\n$ java -jar jd-cli/target/jd-cli.jar\n```\n2. 建立一個存放反編譯結果的資料夾\n```shell=\n$ mkdir ~/dex2jarTest/apk/OOXX/decompile \n```\n3. 反編譯!\n```shell=\n$ java -jar jd-cli/target/jd-cli.jar [.jar路徑] -od [輸出路徑]\n$ java -jar jd-cli/target/jd-cli.jar ~/dex2jarTest/apk/OOXX/classes-dex2jar.jar -od ~/dex2jarTest/apk/OOXX/decompile/\n```\n接著在decompile資料夾裡就可以看到反編譯完的結果囉~\n","slug":"逆向工程-反編譯APK","published":1,"updated":"2024-02-24T08:06:01.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myik0022k0jf9w85hx60","content":"<ul>\n<li>本文曾發佈在 <a href=\"https://hackmd.io/@yrw/BJeYauKdBz\">https://hackmd.io/@yrw/BJeYauKdBz</a></li>\n</ul>\n<blockquote>\n<p><strong>編輯紀錄</strong>:<br>2020/09/24<br>補齊dex2jar詳細步驟、加入jd-gui</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"環境-amp-材料\"><a href=\"#環境-amp-材料\" class=\"headerlink\" title=\"環境&amp;材料\"></a>環境&amp;材料</h1><ul>\n<li>一台 Kali Linux</li>\n<li>一個 APK</li>\n</ul>\n<h1 id=\"1-解壓縮Apk檔\"><a href=\"#1-解壓縮Apk檔\" class=\"headerlink\" title=\"1. 解壓縮Apk檔\"></a>1. 解壓縮Apk檔</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> unzip OOXX.apk</span></span><br></pre></td></tr></table></figure>\n<p>得到 <code>classes.dex</code><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/classes.png\" alt=\"classes\"> </p>\n<h1 id=\"2-Dex-to-Jar\"><a href=\"#2-Dex-to-Jar\" class=\"headerlink\" title=\"2. Dex to Jar\"></a>2. Dex to Jar</h1><h2 id=\"下載\"><a href=\"#下載\" class=\"headerlink\" title=\"下載\"></a>下載</h2><p><a href=\"https://sourceforge.net/projects/dex2jar/\">https://sourceforge.net/projects/dex2jar/</a></p>\n<h2 id=\"解壓縮\"><a href=\"#解壓縮\" class=\"headerlink\" title=\"解壓縮\"></a>解壓縮</h2><p>解壓縮後，要讓裡面的程式都「可執行」</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip dex2jar-2.0.zip</span><br><span class=\"line\">cd dex2jar-2.0/</span><br><span class=\"line\">chmod +x d*</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/unzip.png\" alt=\"unzip\"></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><p>轉檔成jar格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./d2j-dex2jar.sh classes.dex</span></span><br></pre></td></tr></table></figure>\n\n<p>得到<code>classes-dex2jar.jar</code></p>\n<p><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/classes-dex2jar.png\" alt=\"classes-dex2jar\"></p>\n<h1 id=\"3-Jar-to-Java\"><a href=\"#3-Jar-to-Java\" class=\"headerlink\" title=\"3. Jar to Java\"></a>3. Jar to Java</h1><p>有 gui 和 cmd 兩種版本，依需求取用<br>gui 可以 trace code 可能方便一些</p>\n<h2 id=\"jd-gui\"><a href=\"#jd-gui\" class=\"headerlink\" title=\"jd-gui\"></a>jd-gui</h2><h3 id=\"下載-1\"><a href=\"#下載-1\" class=\"headerlink\" title=\"下載\"></a>下載</h3><p><a href=\"http://java-decompiler.github.io/\">http://java-decompiler.github.io/</a><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/jd-gui.png\" alt=\"jd-gui\"></p>\n<h3 id=\"執行-1\"><a href=\"#執行-1\" class=\"headerlink\" title=\"執行\"></a>執行</h3><p>kali 預先有安裝 java 了，省略安裝步驟</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jd-gui-1.6.6.jar</span><br></pre></td></tr></table></figure>\n<p>開啟剛反編譯完的 <code>classes-dex2jar.jar</code><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/open-file.png\" alt=\"open-file\"></p>\n<p>就能看到java程式碼<br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/result.png\" alt=\"result\"></p>\n<h2 id=\"jd-cmd\"><a href=\"#jd-cmd\" class=\"headerlink\" title=\"jd-cmd\"></a>jd-cmd</h2><p><a href=\"https://github.com/kwart/jd-cmd\">https://github.com/kwart/jd-cmd</a></p>\n<h3 id=\"下載-2\"><a href=\"#下載-2\" class=\"headerlink\" title=\"下載\"></a>下載</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/kwart/jd-cmd.git</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><p>下載後，可以在資料夾中找找到<code>hackingOnJdCmd.md</code>，裡面有安裝步驟</p>\n<ol>\n<li>首先要安裝Maven工具<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install maven</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.facebook.com/teacherchi/posts/830539233634000\">https://www.facebook.com/teacherchi/posts/830539233634000</a><br>Maven 是一個「軟體開發流程」的「自動化工具」，一般人會撰寫時下一些指令、編譯時下另外一些指令、測試／除錯／版本維護又是下另外一些指令。<br>Maven 可以讓你把每個流程輸入的指令，分門別類地記錄下來（當然，第一次還是要你用手工把它 Key 進去）。等於它有能力「模仿」你、把你每個流程打入的指令無限次「重現」。以後你只要一聲令下，就能把這一大堆指令，一口氣執行完畢。更棒的是，呼叫 Maven 時，可以從外部下一些小指令，客製化這些「每個流程要輸入的指令」的執行順序。因為軟體開發流程的「撰寫 –&gt; 編譯 –&gt; 測試 –&gt; 除錯 –&gt; 原始碼版本維護 –&gt; …」並非永遠依照固定順序執行、一成不變的。正因 Maven 可以彈性調整組合軟體開發過程中那一大堆鬼畫符般的指令，讓你不必背誦，它才會那麼受歡迎。<br><strong>Maven之於Java，相當於Makefile之於C</strong></p>\n</blockquote>\n</li>\n<li>安裝jd-cmd<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> jd-cmd</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mvn clean package</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li>測試<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar</span></span><br></pre></td></tr></table></figure></li>\n<li>建立一個存放反編譯結果的資料夾<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir ~/dex2jarTest/apk/OOXX/decompile</span> </span><br></pre></td></tr></table></figure></li>\n<li>反編譯!<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar [.jar路徑] -od [輸出路徑]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar ~/dex2jarTest/apk/OOXX/classes-dex2jar.jar -od ~/dex2jarTest/apk/OOXX/decompile/</span></span><br></pre></td></tr></table></figure>\n接著在decompile資料夾裡就可以看到反編譯完的結果囉~</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ul>\n<li>本文曾發佈在 <a href=\"https://hackmd.io/@yrw/BJeYauKdBz\">https://hackmd.io/@yrw/BJeYauKdBz</a></li>\n</ul>\n<blockquote>\n<p><strong>編輯紀錄</strong>:<br>2020/09/24<br>補齊dex2jar詳細步驟、加入jd-gui</p>\n</blockquote>","more":"<h1 id=\"環境-amp-材料\"><a href=\"#環境-amp-材料\" class=\"headerlink\" title=\"環境&amp;材料\"></a>環境&amp;材料</h1><ul>\n<li>一台 Kali Linux</li>\n<li>一個 APK</li>\n</ul>\n<h1 id=\"1-解壓縮Apk檔\"><a href=\"#1-解壓縮Apk檔\" class=\"headerlink\" title=\"1. 解壓縮Apk檔\"></a>1. 解壓縮Apk檔</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> unzip OOXX.apk</span></span><br></pre></td></tr></table></figure>\n<p>得到 <code>classes.dex</code><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/classes.png\" alt=\"classes\"> </p>\n<h1 id=\"2-Dex-to-Jar\"><a href=\"#2-Dex-to-Jar\" class=\"headerlink\" title=\"2. Dex to Jar\"></a>2. Dex to Jar</h1><h2 id=\"下載\"><a href=\"#下載\" class=\"headerlink\" title=\"下載\"></a>下載</h2><p><a href=\"https://sourceforge.net/projects/dex2jar/\">https://sourceforge.net/projects/dex2jar/</a></p>\n<h2 id=\"解壓縮\"><a href=\"#解壓縮\" class=\"headerlink\" title=\"解壓縮\"></a>解壓縮</h2><p>解壓縮後，要讓裡面的程式都「可執行」</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip dex2jar-2.0.zip</span><br><span class=\"line\">cd dex2jar-2.0/</span><br><span class=\"line\">chmod +x d*</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/unzip.png\" alt=\"unzip\"></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><p>轉檔成jar格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./d2j-dex2jar.sh classes.dex</span></span><br></pre></td></tr></table></figure>\n\n<p>得到<code>classes-dex2jar.jar</code></p>\n<p><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/classes-dex2jar.png\" alt=\"classes-dex2jar\"></p>\n<h1 id=\"3-Jar-to-Java\"><a href=\"#3-Jar-to-Java\" class=\"headerlink\" title=\"3. Jar to Java\"></a>3. Jar to Java</h1><p>有 gui 和 cmd 兩種版本，依需求取用<br>gui 可以 trace code 可能方便一些</p>\n<h2 id=\"jd-gui\"><a href=\"#jd-gui\" class=\"headerlink\" title=\"jd-gui\"></a>jd-gui</h2><h3 id=\"下載-1\"><a href=\"#下載-1\" class=\"headerlink\" title=\"下載\"></a>下載</h3><p><a href=\"http://java-decompiler.github.io/\">http://java-decompiler.github.io/</a><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/jd-gui.png\" alt=\"jd-gui\"></p>\n<h3 id=\"執行-1\"><a href=\"#執行-1\" class=\"headerlink\" title=\"執行\"></a>執行</h3><p>kali 預先有安裝 java 了，省略安裝步驟</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jd-gui-1.6.6.jar</span><br></pre></td></tr></table></figure>\n<p>開啟剛反編譯完的 <code>classes-dex2jar.jar</code><br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/open-file.png\" alt=\"open-file\"></p>\n<p>就能看到java程式碼<br><img src=\"/2018/01/26/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E5%8F%8D%E7%B7%A8%E8%AD%AFAPK/result.png\" alt=\"result\"></p>\n<h2 id=\"jd-cmd\"><a href=\"#jd-cmd\" class=\"headerlink\" title=\"jd-cmd\"></a>jd-cmd</h2><p><a href=\"https://github.com/kwart/jd-cmd\">https://github.com/kwart/jd-cmd</a></p>\n<h3 id=\"下載-2\"><a href=\"#下載-2\" class=\"headerlink\" title=\"下載\"></a>下載</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/kwart/jd-cmd.git</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><p>下載後，可以在資料夾中找找到<code>hackingOnJdCmd.md</code>，裡面有安裝步驟</p>\n<ol>\n<li>首先要安裝Maven工具<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install maven</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.facebook.com/teacherchi/posts/830539233634000\">https://www.facebook.com/teacherchi/posts/830539233634000</a><br>Maven 是一個「軟體開發流程」的「自動化工具」，一般人會撰寫時下一些指令、編譯時下另外一些指令、測試／除錯／版本維護又是下另外一些指令。<br>Maven 可以讓你把每個流程輸入的指令，分門別類地記錄下來（當然，第一次還是要你用手工把它 Key 進去）。等於它有能力「模仿」你、把你每個流程打入的指令無限次「重現」。以後你只要一聲令下，就能把這一大堆指令，一口氣執行完畢。更棒的是，呼叫 Maven 時，可以從外部下一些小指令，客製化這些「每個流程要輸入的指令」的執行順序。因為軟體開發流程的「撰寫 –&gt; 編譯 –&gt; 測試 –&gt; 除錯 –&gt; 原始碼版本維護 –&gt; …」並非永遠依照固定順序執行、一成不變的。正因 Maven 可以彈性調整組合軟體開發過程中那一大堆鬼畫符般的指令，讓你不必背誦，它才會那麼受歡迎。<br><strong>Maven之於Java，相當於Makefile之於C</strong></p>\n</blockquote>\n</li>\n<li>安裝jd-cmd<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> jd-cmd</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mvn clean package</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li>測試<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar</span></span><br></pre></td></tr></table></figure></li>\n<li>建立一個存放反編譯結果的資料夾<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir ~/dex2jarTest/apk/OOXX/decompile</span> </span><br></pre></td></tr></table></figure></li>\n<li>反編譯!<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar [.jar路徑] -od [輸出路徑]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar jd-cli/target/jd-cli.jar ~/dex2jarTest/apk/OOXX/classes-dex2jar.jar -od ~/dex2jarTest/apk/OOXX/decompile/</span></span><br></pre></td></tr></table></figure>\n接著在decompile資料夾裡就可以看到反編譯完的結果囉~</li>\n</ol>"},{"title":"[鐵人賽] 完賽心得","date":"2021-10-15T15:10:11.000Z","_content":"\n之前就有好幾次想參加鐵人賽，但不知道自己有什麼可以寫30天的主題。剛好近期完成了碩論，既然研究做了、論文寫了、Code 也好了，乾脆整理成 30 天的文章吧。研究的過程有好多踩雷的經驗，是沒辦法寫在論文中的，但讓筆記就這麼躺在 Notion 裡也是可惜，剛好就藉這個機會逼自己再把筆記和 Code 整理複習一遍囉!\n\n歷經 30 天，終於完賽了，賽前囤了 10 幾天的文章，本來以為後面的文可以慢慢寫。沒想到，突然要到北部工作，又是體檢、開戶、找房子的，那幾天根本沒空好好寫文章，一天一天這樣過了，庫存也要見底了，後半段就是真的下班後一天一篇寫完的。\n\n很感謝我戰友們，找我一起參賽，還有每天晚上 10 點，在群組互相提醒、鼓勵。我們完賽了，大家好好休息吧。有機會明年鐵賽再見~\n","source":"_posts/鐵人賽-完賽心得.md","raw":"---\ntitle: '[鐵人賽] 完賽心得'\ndate: 2021-10-15 23:10:11\ntags:\n- 13th鐵人賽\n---\n\n之前就有好幾次想參加鐵人賽，但不知道自己有什麼可以寫30天的主題。剛好近期完成了碩論，既然研究做了、論文寫了、Code 也好了，乾脆整理成 30 天的文章吧。研究的過程有好多踩雷的經驗，是沒辦法寫在論文中的，但讓筆記就這麼躺在 Notion 裡也是可惜，剛好就藉這個機會逼自己再把筆記和 Code 整理複習一遍囉!\n\n歷經 30 天，終於完賽了，賽前囤了 10 幾天的文章，本來以為後面的文可以慢慢寫。沒想到，突然要到北部工作，又是體檢、開戶、找房子的，那幾天根本沒空好好寫文章，一天一天這樣過了，庫存也要見底了，後半段就是真的下班後一天一篇寫完的。\n\n很感謝我戰友們，找我一起參賽，還有每天晚上 10 點，在群組互相提醒、鼓勵。我們完賽了，大家好好休息吧。有機會明年鐵賽再見~\n","slug":"鐵人賽-完賽心得","published":1,"updated":"2024-02-24T08:06:01.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myik0024k0jfgmn65hra","content":"<p>之前就有好幾次想參加鐵人賽，但不知道自己有什麼可以寫30天的主題。剛好近期完成了碩論，既然研究做了、論文寫了、Code 也好了，乾脆整理成 30 天的文章吧。研究的過程有好多踩雷的經驗，是沒辦法寫在論文中的，但讓筆記就這麼躺在 Notion 裡也是可惜，剛好就藉這個機會逼自己再把筆記和 Code 整理複習一遍囉!</p>\n<p>歷經 30 天，終於完賽了，賽前囤了 10 幾天的文章，本來以為後面的文可以慢慢寫。沒想到，突然要到北部工作，又是體檢、開戶、找房子的，那幾天根本沒空好好寫文章，一天一天這樣過了，庫存也要見底了，後半段就是真的下班後一天一篇寫完的。</p>\n<p>很感謝我戰友們，找我一起參賽，還有每天晚上 10 點，在群組互相提醒、鼓勵。我們完賽了，大家好好休息吧。有機會明年鐵賽再見~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前就有好幾次想參加鐵人賽，但不知道自己有什麼可以寫30天的主題。剛好近期完成了碩論，既然研究做了、論文寫了、Code 也好了，乾脆整理成 30 天的文章吧。研究的過程有好多踩雷的經驗，是沒辦法寫在論文中的，但讓筆記就這麼躺在 Notion 裡也是可惜，剛好就藉這個機會逼自己再把筆記和 Code 整理複習一遍囉!</p>\n<p>歷經 30 天，終於完賽了，賽前囤了 10 幾天的文章，本來以為後面的文可以慢慢寫。沒想到，突然要到北部工作，又是體檢、開戶、找房子的，那幾天根本沒空好好寫文章，一天一天這樣過了，庫存也要見底了，後半段就是真的下班後一天一篇寫完的。</p>\n<p>很感謝我戰友們，找我一起參賽，還有每天晚上 10 點，在群組互相提醒、鼓勵。我們完賽了，大家好好休息吧。有機會明年鐵賽再見~</p>\n"},{"title":"長照小幫手-系統架構簡介","date":"2021-09-04T16:43:42.000Z","_content":"\n演算法與邏輯是一個系統的核心，聊天機器人的重點當然就是如何處理輸入句子與如何回覆。本研究開發一套 Android App 以 Zenbo 為媒介，使用者可以用語音方式詢問 Zenbo 長照相關問題。後端程式比對使用者輸入語句與長照問題集中最相似的問題，回傳相對應的答案，最後再由 Zenbo 以語音方式回答使用者。流程分別是資料蒐集、分類問答組合、選擇適當斷詞方式、實體對應、比對最符合問答組合、回饋機制。每個部份在後續的文章都會有相應的主題。\n<!-- more -->\n\n![系統流程](系統流程.png)\n\n系統架構方面，主要分為前台和後台。前台是和使用者互動的部分，「長照小幫手 APP」是一個裝在 Zenbo 上的 Android APP，使用者可以藉由長照小幫手 APP 發送問題或回饋。後台則是指長照小幫手 APP 接收到使用者送出的問題或回饋時，會自動呼叫相應的 API。若是發送問題，那麼 API 會找到最符合的答案後，再由 Zenbo 唸出來。若是發送回饋，則 API 會將資訊記錄下來，經過整理後，便可加到長照資料庫中，增加內容。\n\n![系統架構](系統架構.png)","source":"_posts/長照小幫手-系統架構簡介.md","raw":"---\ntitle: 長照小幫手-系統架構簡介\ndate: 2021-09-05 00:43:42\ntags:\n- 聊天機器人\n- 13th鐵人賽\n- 系統架構\n---\n\n演算法與邏輯是一個系統的核心，聊天機器人的重點當然就是如何處理輸入句子與如何回覆。本研究開發一套 Android App 以 Zenbo 為媒介，使用者可以用語音方式詢問 Zenbo 長照相關問題。後端程式比對使用者輸入語句與長照問題集中最相似的問題，回傳相對應的答案，最後再由 Zenbo 以語音方式回答使用者。流程分別是資料蒐集、分類問答組合、選擇適當斷詞方式、實體對應、比對最符合問答組合、回饋機制。每個部份在後續的文章都會有相應的主題。\n<!-- more -->\n\n![系統流程](系統流程.png)\n\n系統架構方面，主要分為前台和後台。前台是和使用者互動的部分，「長照小幫手 APP」是一個裝在 Zenbo 上的 Android APP，使用者可以藉由長照小幫手 APP 發送問題或回饋。後台則是指長照小幫手 APP 接收到使用者送出的問題或回饋時，會自動呼叫相應的 API。若是發送問題，那麼 API 會找到最符合的答案後，再由 Zenbo 唸出來。若是發送回饋，則 API 會將資訊記錄下來，經過整理後，便可加到長照資料庫中，增加內容。\n\n![系統架構](系統架構.png)","slug":"長照小幫手-系統架構簡介","published":1,"updated":"2024-02-24T08:06:01.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt03myis007kk0jfa0i5gpld","content":"<p>演算法與邏輯是一個系統的核心，聊天機器人的重點當然就是如何處理輸入句子與如何回覆。本研究開發一套 Android App 以 Zenbo 為媒介，使用者可以用語音方式詢問 Zenbo 長照相關問題。後端程式比對使用者輸入語句與長照問題集中最相似的問題，回傳相對應的答案，最後再由 Zenbo 以語音方式回答使用者。流程分別是資料蒐集、分類問答組合、選擇適當斷詞方式、實體對應、比對最符合問答組合、回饋機制。每個部份在後續的文章都會有相應的主題。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/09/05/%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%B0%A1%E4%BB%8B/%E7%B3%BB%E7%B5%B1%E6%B5%81%E7%A8%8B.png\" alt=\"系統流程\"></p>\n<p>系統架構方面，主要分為前台和後台。前台是和使用者互動的部分，「長照小幫手 APP」是一個裝在 Zenbo 上的 Android APP，使用者可以藉由長照小幫手 APP 發送問題或回饋。後台則是指長照小幫手 APP 接收到使用者送出的問題或回饋時，會自動呼叫相應的 API。若是發送問題，那麼 API 會找到最符合的答案後，再由 Zenbo 唸出來。若是發送回饋，則 API 會將資訊記錄下來，經過整理後，便可加到長照資料庫中，增加內容。</p>\n<p><img src=\"/2021/09/05/%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%B0%A1%E4%BB%8B/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B.png\" alt=\"系統架構\"></p>\n","site":{"data":{}},"excerpt":"<p>演算法與邏輯是一個系統的核心，聊天機器人的重點當然就是如何處理輸入句子與如何回覆。本研究開發一套 Android App 以 Zenbo 為媒介，使用者可以用語音方式詢問 Zenbo 長照相關問題。後端程式比對使用者輸入語句與長照問題集中最相似的問題，回傳相對應的答案，最後再由 Zenbo 以語音方式回答使用者。流程分別是資料蒐集、分類問答組合、選擇適當斷詞方式、實體對應、比對最符合問答組合、回饋機制。每個部份在後續的文章都會有相應的主題。</p>","more":"<p><img src=\"/2021/09/05/%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%B0%A1%E4%BB%8B/%E7%B3%BB%E7%B5%B1%E6%B5%81%E7%A8%8B.png\" alt=\"系統流程\"></p>\n<p>系統架構方面，主要分為前台和後台。前台是和使用者互動的部分，「長照小幫手 APP」是一個裝在 Zenbo 上的 Android APP，使用者可以藉由長照小幫手 APP 發送問題或回饋。後台則是指長照小幫手 APP 接收到使用者送出的問題或回饋時，會自動呼叫相應的 API。若是發送問題，那麼 API 會找到最符合的答案後，再由 Zenbo 唸出來。若是發送回饋，則 API 會將資訊記錄下來，經過整理後，便可加到長照資料庫中，增加內容。</p>\n<p><img src=\"/2021/09/05/%E9%95%B7%E7%85%A7%E5%B0%8F%E5%B9%AB%E6%89%8B-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%B0%A1%E4%BB%8B/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B.png\" alt=\"系統架構\"></p>"}],"PostAsset":[{"_id":"source/_posts/API-使用-PHP-執行-Python-腳本/系統架構.png","post":"clt03myia0002k0jfbi0pblwm","slug":"系統架構.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/final-architecture.png","post":"clt03myib0004k0jfc0367z1z","slug":"final-architecture.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/mvvm.jpg","post":"clt03myib0004k0jfc0367z1z","slug":"mvvm.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-01-架構介紹-MVVM/架構.png","post":"clt03myib0004k0jfc0367z1z","slug":"架構.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-02-界面設計/img1.png","post":"clt03myib0005k0jfepgxb6nv","slug":"img1.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-02-界面設計/img2.png","post":"clt03myib0005k0jfepgxb6nv","slug":"img2.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-03-Android-的-STT-與-TTS/對話頁面.png","post":"clt03myic0006k0jfafmm2mq1","slug":"對話頁面.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-04-MVVM-Repository與API串接/flow.jpg","post":"clt03myic0008k0jf233y0w40","slug":"flow.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ADB-在你的手機上下指令/image1.png","post":"clt03myi90001k0jf54q89ino","slug":"image1.png","modified":1,"renderable":1},{"_id":"source/_posts/ADB-在你的手機上下指令/image2.png","post":"clt03myi90001k0jf54q89ino","slug":"image2.png","modified":1,"renderable":1},{"_id":"source/_posts/ADB-在你的手機上下指令/image3.png","post":"clt03myi90001k0jf54q89ino","slug":"image3.png","modified":1,"renderable":1},{"_id":"source/_posts/ADB-在你的手機上下指令/image4.png","post":"clt03myi90001k0jf54q89ino","slug":"image4.png","modified":1,"renderable":1},{"_id":"source/_posts/ADB-在你的手機上下指令/image5.png","post":"clt03myi90001k0jf54q89ino","slug":"image5.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-05-API與物件/category.png","post":"clt03myic0009k0jfbuszcfw1","slug":"category.png","modified":1,"renderable":1},{"_id":"source/_posts/Android-APP-05-API與物件/chat.png","post":"clt03myic0009k0jfbuszcfw1","slug":"chat.png","modified":1,"renderable":1},{"_id":"source/_posts/Apple-Silicon-晶片不支援-ADB-ARM/err_msg.jpeg","post":"clt03myid000ck0jfblw8cswo","slug":"err_msg.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image1.png","post":"clt03myid000fk0jfgrjw7x2w","slug":"image1.png","modified":1,"renderable":1},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image2.png","post":"clt03myid000fk0jfgrjw7x2w","slug":"image2.png","modified":1,"renderable":1},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image3.png","post":"clt03myid000fk0jfgrjw7x2w","slug":"image3.png","modified":1,"renderable":1},{"_id":"source/_posts/BMI計算器-取得EditText中的字/image4.png","post":"clt03myid000fk0jfgrjw7x2w","slug":"image4.png","modified":1,"renderable":1},{"_id":"source/_posts/Word-新增快捷建/自訂鍵盤.png","post":"clt03myie000jk0jfffmaa3id","slug":"自訂鍵盤.png","modified":1,"renderable":1},{"_id":"source/_posts/CodeIgniter安裝Swagger/dir.png","post":"clt03myie000hk0jfctnues1f","slug":"dir.png","modified":1,"renderable":1},{"_id":"source/_posts/CodeIgniter安裝Swagger/edit.png","post":"clt03myie000hk0jfctnues1f","slug":"edit.png","modified":1,"renderable":1},{"_id":"source/_posts/CodeIgniter安裝Swagger/show.png","post":"clt03myie000hk0jfctnues1f","slug":"show.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/mongodb_內容.png","post":"clt03myie000lk0jf8x9u7vqb","slug":"mongodb_內容.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/services_msc.png","post":"clt03myie000lk0jf8x9u7vqb","slug":"services_msc.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows-停用開機即啟動-MongoDB/服務.png","post":"clt03myie000lk0jf8x9u7vqb","slug":"服務.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/5IqdECc.png","post":"clt03myie000ok0jf26ta511h","slug":"5IqdECc.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/8azZ7hm.png","post":"clt03myie000ok0jf26ta511h","slug":"8azZ7hm.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/DQqIxdO.png","post":"clt03myie000ok0jf26ta511h","slug":"DQqIxdO.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/K8ldhLr.png","post":"clt03myie000ok0jf26ta511h","slug":"K8ldhLr.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/KbWN5Kh.png","post":"clt03myie000ok0jf26ta511h","slug":"KbWN5Kh.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/UeTe6ah.png","post":"clt03myie000ok0jf26ta511h","slug":"UeTe6ah.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/Z1s0ujZ.png","post":"clt03myie000ok0jf26ta511h","slug":"Z1s0ujZ.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/qqFqCG4.png","post":"clt03myie000ok0jf26ta511h","slug":"qqFqCG4.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/rwp2EGF.png","post":"clt03myie000ok0jf26ta511h","slug":"rwp2EGF.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/wUXkrzO.png","post":"clt03myie000ok0jf26ta511h","slug":"wUXkrzO.png","modified":1,"renderable":1},{"_id":"source/_posts/Workshop記錄-Volley與API/x4k4a8r.png","post":"clt03myie000ok0jf26ta511h","slug":"x4k4a8r.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/就是平板.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"就是平板.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/建立新模擬器.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"建立新模擬器.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/建立新硬體外型.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"建立新硬體外型.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/模擬器完成.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"模擬器完成.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/硬體規格.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"硬體規格.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/選擇作業系統版本.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"選擇作業系統版本.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-02-建置與Zenbo規格相同的模擬器/選擇硬體裝置.jpg","post":"clt03myif000sk0jfh7g5b25d","slug":"選擇硬體裝置.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-01-後蓋打開方式、偵錯USB孔位置/Zenbo頭上有USB孔.jpg","post":"clt03myie000qk0jfhtnf9uhe","slug":"Zenbo頭上有USB孔.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE1.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DDE1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE2.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DDE2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DDE3.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DDE3.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF1.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DF1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF2.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DF2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF_entities.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DF_entities.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-03-DDE-Editor-vs-Dialogflow/DF比較強大.png","post":"clt03myif000tk0jf9q7tgn5y","slug":"DF比較強大.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Plans1.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Plans1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Plans2.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Plans2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled1.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled2.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled3.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled3.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled4.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled4.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled5.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled5.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled6.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled6.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled7.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled7.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled8.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled8.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-04-DDE簡介/Untitled9.png","post":"clt03myif000wk0jfb1f6hdbg","slug":"Untitled9.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/csv_excel.png","post":"clt03myig0013k0jfcvh2gjhj","slug":"csv_excel.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/csv_text.png","post":"clt03myig0013k0jfcvh2gjhj","slug":"csv_text.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/get_file.png","post":"clt03myig0013k0jfcvh2gjhj","slug":"get_file.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-02-儲存爬蟲資料-CSV格式/source.jpg","post":"clt03myig0013k0jfcvh2gjhj","slug":"source.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents1.png","post":"clt03myif000yk0jf3x699y91","slug":"Intents1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents2.png","post":"clt03myif000yk0jf3x699y91","slug":"Intents2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents3.png","post":"clt03myif000yk0jf3x699y91","slug":"Intents3.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents4.png","post":"clt03myif000yk0jf3x699y91","slug":"Intents4.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Intents5.png","post":"clt03myif000yk0jf3x699y91","slug":"Intents5.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Plans1.png","post":"clt03myif000yk0jf3x699y91","slug":"Plans1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Plans2.png","post":"clt03myif000yk0jf3x699y91","slug":"Plans2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/TTS.png","post":"clt03myif000yk0jf3x699y91","slug":"TTS.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Test1.png","post":"clt03myif000yk0jf3x699y91","slug":"Test1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/Test2.png","post":"clt03myif000yk0jf3x699y91","slug":"Test2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/concepts1.png","post":"clt03myif000yk0jf3x699y91","slug":"concepts1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/concepts2.png","post":"clt03myif000yk0jf3x699y91","slug":"concepts2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/console_config.png","post":"clt03myif000yk0jf3x699y91","slug":"console_config.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/flow.jpg","post":"clt03myif000yk0jf3x699y91","slug":"flow.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/flow.xml","post":"clt03myif000yk0jf3x699y91","slug":"flow.xml","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/info.png","post":"clt03myif000yk0jf3x699y91","slug":"info.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/input_output_contexts.jpg","post":"clt03myif000yk0jf3x699y91","slug":"input_output_contexts.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/input_output_contexts.xml","post":"clt03myif000yk0jf3x699y91","slug":"input_output_contexts.xml","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/plan_graph.png","post":"clt03myif000yk0jf3x699y91","slug":"plan_graph.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/project_info.png","post":"clt03myif000yk0jf3x699y91","slug":"project_info.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-05-DDE回覆規則設計/publish.png","post":"clt03myif000yk0jf3x699y91","slug":"publish.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/Zenbo-Scratch-語句聽不懂問題的解決方式.pdf","post":"clt03myig0010k0jfapn2b5pr","slug":"Zenbo-Scratch-語句聽不懂問題的解決方式.pdf","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/activity_uuid.png","post":"clt03myig0010k0jfapn2b5pr","slug":"activity_uuid.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/all_uuid.png","post":"clt03myig0010k0jfapn2b5pr","slug":"all_uuid.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/dstools.png","post":"clt03myig0010k0jfapn2b5pr","slug":"dstools.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/launch_activity.png","post":"clt03myig0010k0jfapn2b5pr","slug":"launch_activity.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/manifest_uuid.png","post":"clt03myig0010k0jfapn2b5pr","slug":"manifest_uuid.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-06-安裝DDE語料到Zenbo/project_info.png","post":"clt03myig0010k0jfapn2b5pr","slug":"project_info.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/get_answer.png","post":"clt03myig0015k0jf0y980b40","slug":"get_answer.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/next_page.png","post":"clt03myig0015k0jf0y980b40","slug":"next_page.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/next_tag.png","post":"clt03myig0015k0jf0y980b40","slug":"next_tag.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/no_next.png","post":"clt03myig0015k0jf0y980b40","slug":"no_next.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/qa_list.png","post":"clt03myig0015k0jf0y980b40","slug":"qa_list.png","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/questions_src.jpg","post":"clt03myig0015k0jf0y980b40","slug":"questions_src.jpg","modified":1,"renderable":1},{"_id":"source/_posts/爬蟲-01-蒐集訓練資料-以衛服部長照常見問題為例/questions_src.png","post":"clt03myig0015k0jf0y980b40","slug":"questions_src.png","modified":1,"renderable":1},{"_id":"source/_posts/按鈕監聽器/image.png","post":"clt03myih0018k0jf2b3j2nos","slug":"image.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image1.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image1.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image10.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image10.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image11.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image11.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image12.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image12.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image13.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image13.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image2.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image2.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image3.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image3.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image4.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image4.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image5.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image5.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image6.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image6.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image7.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image7.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image8.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image8.png","modified":1,"renderable":1},{"_id":"source/_posts/第一個-Kotlin-專案/image9.png","post":"clt03myih001ak0jf6oj2g9dp","slug":"image9.png","modified":1,"renderable":1},{"_id":"source/_posts/結論-總整理與建議/摘要心智圖.png","post":"clt03myih0019k0jf6pbj1qiu","slug":"摘要心智圖.png","modified":1,"renderable":1},{"_id":"source/_posts/結論-總整理與建議/鐵人賽.jpg","post":"clt03myih0019k0jf6pbj1qiu","slug":"鐵人賽.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-03-語料讀取-資料格式轉換/csv_excel.png","post":"clt03myih001fk0jf5pdm6m5c","slug":"csv_excel.png","modified":1,"renderable":1},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/不識字人口.png","post":"clt03myih001dk0jf4t68abq1","slug":"不識字人口.png","modified":1,"renderable":1},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/人口老化.png","post":"clt03myih001dk0jf4t68abq1","slug":"人口老化.png","modified":1,"renderable":1},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/未使用網路原因.png","post":"clt03myih001dk0jf4t68abq1","slug":"未使用網路原因.png","modified":1,"renderable":1},{"_id":"source/_posts/緒論-長照小幫手的背景與動機/長者該如何取得長照資訊.png","post":"clt03myih001dk0jf4t68abq1","slug":"長者該如何取得長照資訊.png","modified":1,"renderable":1},{"_id":"source/_posts/聊天機器人的分類與比較/pepper.png","post":"clt03myii001ik0jf8c8z1fg0","slug":"pepper.png","modified":1,"renderable":1},{"_id":"source/_posts/聊天機器人的分類與比較/zenbo.png","post":"clt03myii001ik0jf8c8z1fg0","slug":"zenbo.png","modified":1,"renderable":1},{"_id":"source/_posts/聊天機器人的分類與比較/實體型聊天機器人.png","post":"clt03myii001ik0jf8c8z1fg0","slug":"實體型聊天機器人.png","modified":1,"renderable":1},{"_id":"source/_posts/聊天機器人的分類與比較/平台型聊天機器人.png","post":"clt03myii001ik0jf8c8z1fg0","slug":"平台型聊天機器人.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_DF+IDF.png","post":"clt03myii001jk0jfca9ogdoa","slug":"5例句_DF+IDF.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_TF.png","post":"clt03myii001jk0jfca9ogdoa","slug":"5例句_TF.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_TFIDF.png","post":"clt03myii001jk0jfca9ogdoa","slug":"5例句_TFIDF.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/5例句_WordSet.png","post":"clt03myii001jk0jfca9ogdoa","slug":"5例句_WordSet.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/category3.png","post":"clt03myii001jk0jfca9ogdoa","slug":"category3.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-01-TF-IDF與餘弦相似性/餘弦相似性二維示意圖.png","post":"clt03myii001jk0jfca9ogdoa","slug":"餘弦相似性二維示意圖.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/AzureKmeans_統整.png","post":"clt03myii001lk0jfa7ey3k0k","slug":"AzureKmeans_統整.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/AzureKmeans與人工分類比較.jpg","post":"clt03myii001lk0jfa7ey3k0k","slug":"AzureKmeans與人工分類比較.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/chart.jpg","post":"clt03myii001lk0jfa7ey3k0k","slug":"chart.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-02-問答組合分類方式/why.jpg","post":"clt03myii001lk0jfa7ey3k0k","slug":"why.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-05-實體對應/部分實體對應截圖.png","post":"clt03myii001qk0jfe6gw1fkn","slug":"部分實體對應截圖.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB.png","post":"clt03myif000vk0jf9gzq453h","slug":"AB.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB1.png","post":"clt03myif000vk0jf9gzq453h","slug":"AB1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB2.png","post":"clt03myif000vk0jf9gzq453h","slug":"AB2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB3.png","post":"clt03myif000vk0jf9gzq453h","slug":"AB3.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/AB4.png","post":"clt03myif000vk0jf9gzq453h","slug":"AB4.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/Zenbo-App-Builder-加關鍵字輔助按鈕.zba","post":"clt03myif000vk0jf9gzq453h","slug":"Zenbo-App-Builder-加關鍵字輔助按鈕.zba","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/info.png","post":"clt03myif000vk0jf9gzq453h","slug":"info.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans1.png","post":"clt03myif000vk0jf9gzq453h","slug":"plans1.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans2.png","post":"clt03myif000vk0jf9gzq453h","slug":"plans2.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/plans3.png","post":"clt03myif000vk0jf9gzq453h","slug":"plans3.png","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/project_register.jpg","post":"clt03myif000vk0jf9gzq453h","slug":"project_register.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Zenbo開發系列-07-DDE與App-Builder/save.jpg","post":"clt03myif000vk0jf9gzq453h","slug":"save.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/斷詞與TFIDF.jpg","post":"clt03myii001nk0jfbexm0v2g","slug":"斷詞與TFIDF.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-04-斷詞工具比較-Jieba-vs-CKIP/長照斷詞.jpg","post":"clt03myii001nk0jfbexm0v2g","slug":"長照斷詞.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/df.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"df.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"formula.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula1.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"formula1.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/formula2.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"formula2.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/idf.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"idf.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/log.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"log.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/tf.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"tf.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/tf_.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"tf_.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-06-程式碼-TF、IDF、TF-IDF/示意圖.png","post":"clt03myij001uk0jf8j6z8lk3","slug":"示意圖.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-08-繪製語料庫模型Heatmap圖/category3.png","post":"clt03myij001sk0jfb3encnxr","slug":"category3.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-08-繪製語料庫模型Heatmap圖/tfidf_matrix.png","post":"clt03myij001sk0jfb3encnxr","slug":"tfidf_matrix.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/formula.png","post":"clt03myij001vk0jf5ls6d77a","slug":"formula.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/歐式距離.png","post":"clt03myij001vk0jf5ls6d77a","slug":"歐式距離.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/比較.png","post":"clt03myij001vk0jf5ls6d77a","slug":"比較.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-07-程式碼-餘弦相似性/餘弦相似度.png","post":"clt03myij001vk0jf5ls6d77a","slug":"餘弦相似度.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/儲存到個人雲端.png","post":"clt03myij001zk0jfd7qaa95d","slug":"儲存到個人雲端.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/出現這個畫面就算成功了.png","post":"clt03myij001zk0jfd7qaa95d","slug":"出現這個畫面就算成功了.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/切換帳號.png","post":"clt03myij001zk0jfd7qaa95d","slug":"切換帳號.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/匯出筆記本.png","post":"clt03myij001zk0jfd7qaa95d","slug":"匯出筆記本.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/名字改一下.png","post":"clt03myij001zk0jfd7qaa95d","slug":"名字改一下.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/成功出現在雲端.png","post":"clt03myij001zk0jfd7qaa95d","slug":"成功出現在雲端.png","modified":1,"renderable":1},{"_id":"source/_posts/轉移-OneNote-筆記到其他帳號/需要兩個帳號.png","post":"clt03myij001zk0jfd7qaa95d","slug":"需要兩個帳號.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/359.png","post":"clt03myij001xk0jfc1sreii5","slug":"359.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/flow.jpg","post":"clt03myij001xk0jfc1sreii5","slug":"flow.jpg","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/image25.png","post":"clt03myij001xk0jfc1sreii5","slug":"image25.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/image26.png","post":"clt03myij001xk0jfc1sreii5","slug":"image26.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/回饋機制_log.png","post":"clt03myij001xk0jfc1sreii5","slug":"回饋機制_log.png","modified":1,"renderable":1},{"_id":"source/_posts/語料庫模型-09-回饋機制/部分問答集截圖.png","post":"clt03myij001xk0jfc1sreii5","slug":"部分問答集截圖.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/classes-dex2jar.png","post":"clt03myik0022k0jf9w85hx60","slug":"classes-dex2jar.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/classes.png","post":"clt03myik0022k0jf9w85hx60","slug":"classes.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/jd-gui.png","post":"clt03myik0022k0jf9w85hx60","slug":"jd-gui.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/open-file.png","post":"clt03myik0022k0jf9w85hx60","slug":"open-file.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/result.png","post":"clt03myik0022k0jf9w85hx60","slug":"result.png","modified":1,"renderable":1},{"_id":"source/_posts/逆向工程-反編譯APK/unzip.png","post":"clt03myik0022k0jf9w85hx60","slug":"unzip.png","modified":1,"renderable":1},{"_id":"source/_posts/長照小幫手-系統架構簡介/系統架構.png","post":"clt03myis007kk0jfa0i5gpld","slug":"系統架構.png","modified":1,"renderable":1},{"_id":"source/_posts/長照小幫手-系統架構簡介/系統流程.png","post":"clt03myis007kk0jfa0i5gpld","slug":"系統流程.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"clt03myi90001k0jf54q89ino","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myie000ik0jf6e4f8wu2"},{"post_id":"clt03myi90001k0jf54q89ino","tag_id":"clt03myic0007k0jf63am5zuz","_id":"clt03myie000kk0jf669r31x7"},{"post_id":"clt03myi90001k0jf54q89ino","tag_id":"clt03myic000ak0jf5apo7zm9","_id":"clt03myie000nk0jf9gn08afe"},{"post_id":"clt03myi90001k0jf54q89ino","tag_id":"clt03myid000dk0jf3rib7u3n","_id":"clt03myie000pk0jf4t3w8yi8"},{"post_id":"clt03myia0002k0jfbi0pblwm","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myig000zk0jf7d297v3f"},{"post_id":"clt03myia0002k0jfbi0pblwm","tag_id":"clt03myie000mk0jf7rzb9j4l","_id":"clt03myig0011k0jf0bod8fmm"},{"post_id":"clt03myia0002k0jfbi0pblwm","tag_id":"clt03myif000rk0jf3smk0tkn","_id":"clt03myig0014k0jf11ou22ko"},{"post_id":"clt03myia0002k0jfbi0pblwm","tag_id":"clt03myif000uk0jfcyjr3uig","_id":"clt03myih0016k0jfa22c1fec"},{"post_id":"clt03myib0004k0jfc0367z1z","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myih001ck0jf0vxedlyk"},{"post_id":"clt03myib0004k0jfc0367z1z","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myih001ek0jf22vk8oo9"},{"post_id":"clt03myib0004k0jfc0367z1z","tag_id":"clt03myih0017k0jfflbs4aqc","_id":"clt03myii001hk0jf1xhwf7m2"},{"post_id":"clt03myib0005k0jfepgxb6nv","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myii001mk0jf9afdgg29"},{"post_id":"clt03myib0005k0jfepgxb6nv","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myii001ok0jfej526jxz"},{"post_id":"clt03myib0005k0jfepgxb6nv","tag_id":"clt03myii001gk0jf9j8ggy3b","_id":"clt03myij001rk0jf9utpbezh"},{"post_id":"clt03myic0006k0jfafmm2mq1","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myij001yk0jfebmif1b2"},{"post_id":"clt03myic0006k0jfafmm2mq1","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myij0020k0jf0of2fd3u"},{"post_id":"clt03myic0006k0jfafmm2mq1","tag_id":"clt03myii001pk0jf2etqh7js","_id":"clt03myik0023k0jf7kng4qfk"},{"post_id":"clt03myic0006k0jfafmm2mq1","tag_id":"clt03myij001tk0jfb8gn6au8","_id":"clt03myik0025k0jf43f25vyi"},{"post_id":"clt03myik0024k0jfgmn65hra","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myik0027k0jff7wb7y9m"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myik002bk0jfg3bl13jr"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myik002ck0jf6kh2hz8n"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myij0021k0jf3q3y1fi4","_id":"clt03myik002ek0jfhy8qg8ib"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myih0017k0jfflbs4aqc","_id":"clt03myik002fk0jf4hoj1dh3"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myif000uk0jfcyjr3uig","_id":"clt03myik002hk0jfeads1cdo"},{"post_id":"clt03myic0008k0jf233y0w40","tag_id":"clt03myik0029k0jfdrbxdub7","_id":"clt03myik002ik0jf1af2c1u0"},{"post_id":"clt03myic0009k0jfbuszcfw1","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myil002kk0jfe1wud23z"},{"post_id":"clt03myic0009k0jfbuszcfw1","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myil002lk0jf7m4p6vqm"},{"post_id":"clt03myic0009k0jfbuszcfw1","tag_id":"clt03myif000uk0jfcyjr3uig","_id":"clt03myil002nk0jf7brb9lqq"},{"post_id":"clt03myic0009k0jfbuszcfw1","tag_id":"clt03myik002gk0jf7mi5gjiz","_id":"clt03myil002ok0jf5gey1w7n"},{"post_id":"clt03myid000bk0jfent416ji","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myil002qk0jf8mpt4xkt"},{"post_id":"clt03myid000bk0jfent416ji","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myil002rk0jfcza9gc29"},{"post_id":"clt03myid000bk0jfent416ji","tag_id":"clt03myil002mk0jf0jta883y","_id":"clt03myil002tk0jf52xhb0vl"},{"post_id":"clt03myid000ck0jfblw8cswo","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myil002uk0jfhtan0ibj"},{"post_id":"clt03myid000ck0jfblw8cswo","tag_id":"clt03myil002pk0jf5jxxackm","_id":"clt03myil002wk0jf5dxachnq"},{"post_id":"clt03myid000ek0jf50hv69mr","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myil002zk0jfe2vf9u1w"},{"post_id":"clt03myid000ek0jf50hv69mr","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myim0030k0jf2xmv60dm"},{"post_id":"clt03myid000ek0jf50hv69mr","tag_id":"clt03myil002mk0jf0jta883y","_id":"clt03myim0032k0jf2l0ygsss"},{"post_id":"clt03myid000ek0jf50hv69mr","tag_id":"clt03myih0017k0jfflbs4aqc","_id":"clt03myim0033k0jffacs0mx7"},{"post_id":"clt03myid000fk0jfgrjw7x2w","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myim0035k0jfhhr55qf9"},{"post_id":"clt03myid000fk0jfgrjw7x2w","tag_id":"clt03myil002yk0jf08fj2hsa","_id":"clt03myim0036k0jf7hr09tui"},{"post_id":"clt03myid000fk0jfgrjw7x2w","tag_id":"clt03myid000dk0jf3rib7u3n","_id":"clt03myim0038k0jfdnj4bfyx"},{"post_id":"clt03myie000hk0jfctnues1f","tag_id":"clt03myim0031k0jf35xf1ecn","_id":"clt03myim003ak0jfeqnx063o"},{"post_id":"clt03myie000hk0jfctnues1f","tag_id":"clt03myim0034k0jf2vjz8r80","_id":"clt03myim003bk0jffk5ngoew"},{"post_id":"clt03myie000hk0jfctnues1f","tag_id":"clt03myif000uk0jfcyjr3uig","_id":"clt03myim003dk0jf1g7x1tt5"},{"post_id":"clt03myie000jk0jfffmaa3id","tag_id":"clt03myim0039k0jfffu91fp1","_id":"clt03myim003fk0jf3cd60sk7"},{"post_id":"clt03myie000jk0jfffmaa3id","tag_id":"clt03myim003ck0jf7dn35nc5","_id":"clt03myim003gk0jf8nws58gd"},{"post_id":"clt03myie000lk0jf8x9u7vqb","tag_id":"clt03myim003ek0jf8xq44nii","_id":"clt03myim003ik0jfdtuxgolp"},{"post_id":"clt03myie000ok0jf26ta511h","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myim003mk0jffs5661k3"},{"post_id":"clt03myie000ok0jf26ta511h","tag_id":"clt03myid000dk0jf3rib7u3n","_id":"clt03myim003nk0jf9hew9ysx"},{"post_id":"clt03myie000ok0jf26ta511h","tag_id":"clt03myim003hk0jf6ibw4w4b","_id":"clt03myim003pk0jf2hdl43lh"},{"post_id":"clt03myie000ok0jf26ta511h","tag_id":"clt03myim003jk0jfdrcrfrhv","_id":"clt03myim003qk0jf66pia00r"},{"post_id":"clt03myie000ok0jf26ta511h","tag_id":"clt03myif000uk0jfcyjr3uig","_id":"clt03myim003sk0jf99k4gzm1"},{"post_id":"clt03myie000qk0jfhtnf9uhe","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myin003tk0jf4fyqh8nf"},{"post_id":"clt03myie000qk0jfhtnf9uhe","tag_id":"clt03myim003ok0jfdfn41prx","_id":"clt03myin003vk0jf0dac5x3d"},{"post_id":"clt03myie000qk0jfhtnf9uhe","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myin003wk0jf4k6efoyj"},{"post_id":"clt03myif000sk0jfh7g5b25d","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myin003yk0jf1kxb21df"},{"post_id":"clt03myif000sk0jfh7g5b25d","tag_id":"clt03myin003uk0jf7gnkhjn8","_id":"clt03myin003zk0jf1vtu73sz"},{"post_id":"clt03myif000sk0jfh7g5b25d","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myin0041k0jf12dw078b"},{"post_id":"clt03myif000tk0jf9q7tgn5y","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myin0045k0jf1z1453ks"},{"post_id":"clt03myif000tk0jf9q7tgn5y","tag_id":"clt03myin0040k0jf9chvcb5y","_id":"clt03myin0046k0jf2qkz1m11"},{"post_id":"clt03myif000tk0jf9q7tgn5y","tag_id":"clt03myin0042k0jfd982h7u6","_id":"clt03myin0048k0jf0l19a6oz"},{"post_id":"clt03myif000tk0jf9q7tgn5y","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myin0049k0jfghuw3l55"},{"post_id":"clt03myif000tk0jf9q7tgn5y","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myin004bk0jf3lqo3pex"},{"post_id":"clt03myif000vk0jf9gzq453h","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myin004dk0jf1muwe6xx"},{"post_id":"clt03myif000vk0jf9gzq453h","tag_id":"clt03myin0040k0jf9chvcb5y","_id":"clt03myin004ek0jfhjrp9qnk"},{"post_id":"clt03myif000vk0jf9gzq453h","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myin004gk0jfcd8t2gi7"},{"post_id":"clt03myif000vk0jf9gzq453h","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myin004hk0jf7sd2ec04"},{"post_id":"clt03myif000wk0jfb1f6hdbg","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myin004jk0jfeuqf7lt5"},{"post_id":"clt03myif000wk0jfb1f6hdbg","tag_id":"clt03myin0040k0jf9chvcb5y","_id":"clt03myin004kk0jf81eq5y2w"},{"post_id":"clt03myif000wk0jfb1f6hdbg","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio004mk0jfgz3rh76m"},{"post_id":"clt03myif000yk0jf3x699y91","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myio004ok0jf2hn86681"},{"post_id":"clt03myif000yk0jf3x699y91","tag_id":"clt03myin0040k0jf9chvcb5y","_id":"clt03myio004pk0jf0eoh1do8"},{"post_id":"clt03myif000yk0jf3x699y91","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio004rk0jfaselcivb"},{"post_id":"clt03myig0010k0jfapn2b5pr","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myio004tk0jfcxmo4kh4"},{"post_id":"clt03myig0010k0jfapn2b5pr","tag_id":"clt03myin0040k0jf9chvcb5y","_id":"clt03myio004uk0jf7z1r49yp"},{"post_id":"clt03myig0010k0jfapn2b5pr","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio004wk0jf1cg21dtw"},{"post_id":"clt03myig0013k0jfcvh2gjhj","tag_id":"clt03myif000rk0jf3smk0tkn","_id":"clt03myio004yk0jfb2itczwk"},{"post_id":"clt03myig0013k0jfcvh2gjhj","tag_id":"clt03myio004sk0jfdvi84h24","_id":"clt03myio004zk0jf45cbasa1"},{"post_id":"clt03myig0013k0jfcvh2gjhj","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio0051k0jf4hxm9lr4"},{"post_id":"clt03myig0013k0jfcvh2gjhj","tag_id":"clt03myio004vk0jfgfux4foj","_id":"clt03myio0052k0jf9ktp31bd"},{"post_id":"clt03myig0015k0jf0y980b40","tag_id":"clt03myif000rk0jf3smk0tkn","_id":"clt03myio0054k0jf9iau64oc"},{"post_id":"clt03myig0015k0jf0y980b40","tag_id":"clt03myio004sk0jfdvi84h24","_id":"clt03myio0055k0jf3q0zcime"},{"post_id":"clt03myig0015k0jf0y980b40","tag_id":"clt03myio0050k0jfh8we7wbw","_id":"clt03myio0057k0jfbnp1aevm"},{"post_id":"clt03myig0015k0jf0y980b40","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio0058k0jf5w1f4qd2"},{"post_id":"clt03myih0018k0jf2b3j2nos","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myio005ak0jfa0j61ij5"},{"post_id":"clt03myih0018k0jf2b3j2nos","tag_id":"clt03myio0053k0jf38z9fn9q","_id":"clt03myio005bk0jf9ewn8d88"},{"post_id":"clt03myih0018k0jf2b3j2nos","tag_id":"clt03myid000dk0jf3rib7u3n","_id":"clt03myio005dk0jf1r5w7eso"},{"post_id":"clt03myih0019k0jf6pbj1qiu","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myio005ek0jfguck01nd"},{"post_id":"clt03myih0019k0jf6pbj1qiu","tag_id":"clt03myio0056k0jfe68ocr8m","_id":"clt03myio005gk0jf9vawc3sn"},{"post_id":"clt03myih0019k0jf6pbj1qiu","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myip005hk0jf90fc0yy7"},{"post_id":"clt03myih001ak0jf6oj2g9dp","tag_id":"clt03myio005ck0jf6gf31691","_id":"clt03myip005jk0jfh5gk4nxa"},{"post_id":"clt03myih001ak0jf6oj2g9dp","tag_id":"clt03myia0003k0jfc0hoeonn","_id":"clt03myip005kk0jf5vd5he5c"},{"post_id":"clt03myih001ak0jf6oj2g9dp","tag_id":"clt03myid000dk0jf3rib7u3n","_id":"clt03myip005mk0jf0ru93dgt"},{"post_id":"clt03myih001dk0jf4t68abq1","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myip005nk0jf5hq508hw"},{"post_id":"clt03myih001dk0jf4t68abq1","tag_id":"clt03myio0056k0jfe68ocr8m","_id":"clt03myip005ok0jf58yj28lr"},{"post_id":"clt03myih001dk0jf4t68abq1","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myip005qk0jff0m62icy"},{"post_id":"clt03myih001fk0jf5pdm6m5c","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myip005sk0jfgo5ha2rc"},{"post_id":"clt03myih001fk0jf5pdm6m5c","tag_id":"clt03myip005lk0jf5y28d18r","_id":"clt03myip005tk0jfg5843a12"},{"post_id":"clt03myih001fk0jf5pdm6m5c","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myip005vk0jfg9217a2r"},{"post_id":"clt03myii001ik0jf8c8z1fg0","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myip005yk0jfcqcuhv4d"},{"post_id":"clt03myii001ik0jf8c8z1fg0","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myip005zk0jfguut1lgg"},{"post_id":"clt03myii001ik0jf8c8z1fg0","tag_id":"clt03myim003lk0jf7fhr6enw","_id":"clt03myip0061k0jf4rgj6i1o"},{"post_id":"clt03myii001ik0jf8c8z1fg0","tag_id":"clt03myip005wk0jf9td89t00","_id":"clt03myip0062k0jf2usc98yw"},{"post_id":"clt03myii001jk0jfca9ogdoa","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myip0064k0jf5jf8hjk2"},{"post_id":"clt03myii001jk0jfca9ogdoa","tag_id":"clt03myip005lk0jf5y28d18r","_id":"clt03myip0065k0jff6fifdf9"},{"post_id":"clt03myii001jk0jfca9ogdoa","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myip0067k0jfbh3rbbfc"},{"post_id":"clt03myii001lk0jfa7ey3k0k","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myip0069k0jfgf8naok6"},{"post_id":"clt03myii001lk0jfa7ey3k0k","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myip006ak0jf1rtb9bhy"},{"post_id":"clt03myii001lk0jfa7ey3k0k","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myiq006ck0jf2r5ye23v"},{"post_id":"clt03myii001nk0jfbexm0v2g","tag_id":"clt03myip0068k0jff023gurk","_id":"clt03myiq006gk0jfexfs2t5e"},{"post_id":"clt03myii001nk0jfbexm0v2g","tag_id":"clt03myip006bk0jf82e5fpa3","_id":"clt03myiq006hk0jfcyr5gjwp"},{"post_id":"clt03myii001nk0jfbexm0v2g","tag_id":"clt03myiq006dk0jf1mslhkd0","_id":"clt03myiq006jk0jf3ihhgpe2"},{"post_id":"clt03myii001nk0jfbexm0v2g","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myiq006kk0jf93soa05p"},{"post_id":"clt03myii001nk0jfbexm0v2g","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myiq006mk0jf0mop1m0j"},{"post_id":"clt03myii001qk0jfe6gw1fkn","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myiq006nk0jfhlqv7wbe"},{"post_id":"clt03myii001qk0jfe6gw1fkn","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myiq006pk0jf13bj5yyg"},{"post_id":"clt03myii001qk0jfe6gw1fkn","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myiq006qk0jf0udjcist"},{"post_id":"clt03myij001sk0jfb3encnxr","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myiq006sk0jf1cipby3x"},{"post_id":"clt03myij001sk0jfb3encnxr","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myiq006tk0jfgmop0qb6"},{"post_id":"clt03myij001sk0jfb3encnxr","tag_id":"clt03myiq006ok0jfcq1i8hot","_id":"clt03myiq006vk0jf4urw0x8w"},{"post_id":"clt03myij001uk0jf8j6z8lk3","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myiq006xk0jf4m4g8fct"},{"post_id":"clt03myij001uk0jf8j6z8lk3","tag_id":"clt03myip005lk0jf5y28d18r","_id":"clt03myiq006yk0jfa7sjgkva"},{"post_id":"clt03myij001uk0jf8j6z8lk3","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myiq0070k0jff00sdzzi"},{"post_id":"clt03myij001vk0jf5ls6d77a","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myir0073k0jf3w9a792r"},{"post_id":"clt03myij001vk0jf5ls6d77a","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myir0074k0jfc4m55t68"},{"post_id":"clt03myij001vk0jf5ls6d77a","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myir0076k0jf38zu0aza"},{"post_id":"clt03myij001vk0jf5ls6d77a","tag_id":"clt03myiq0071k0jf5mox2e1m","_id":"clt03myir0077k0jf49sla3t1"},{"post_id":"clt03myij001xk0jfc1sreii5","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myir0079k0jf6izo3cmr"},{"post_id":"clt03myij001xk0jfc1sreii5","tag_id":"clt03myip005pk0jf8w0m4dez","_id":"clt03myir007ak0jf9hff5lc2"},{"post_id":"clt03myij001xk0jfc1sreii5","tag_id":"clt03myir0075k0jfg8uc1k3n","_id":"clt03myir007ck0jfdaxr38h0"},{"post_id":"clt03myij001zk0jfd7qaa95d","tag_id":"clt03myir0078k0jf7jgu52w1","_id":"clt03myir007dk0jf6r92de1y"},{"post_id":"clt03myik0022k0jf9w85hx60","tag_id":"clt03myir007bk0jfcr0974mz","_id":"clt03myir007gk0jf052b5u45"},{"post_id":"clt03myik0022k0jf9w85hx60","tag_id":"clt03myic000ak0jf5apo7zm9","_id":"clt03myir007hk0jfes0hhkr5"},{"post_id":"clt03myik0022k0jf9w85hx60","tag_id":"clt03myir007ek0jf985781k3","_id":"clt03myir007ik0jfhh1t1fhf"},{"post_id":"clt03myik0022k0jf9w85hx60","tag_id":"clt03myir007fk0jfgikq24gb","_id":"clt03myir007jk0jfbbwrfph6"},{"post_id":"clt03myis007kk0jfa0i5gpld","tag_id":"clt03myin0043k0jfbuj0a98b","_id":"clt03myis007mk0jf8prf39p7"},{"post_id":"clt03myis007kk0jfa0i5gpld","tag_id":"clt03myie000gk0jf6lij9dtn","_id":"clt03myis007nk0jf1ujp80ug"},{"post_id":"clt03myis007kk0jfa0i5gpld","tag_id":"clt03myis007lk0jf06q0f6n6","_id":"clt03myis007ok0jf8hflau60"}],"Tag":[{"name":"Android","_id":"clt03myia0003k0jfc0hoeonn"},{"name":"ADB","_id":"clt03myic0007k0jf63am5zuz"},{"name":"資安","_id":"clt03myic000ak0jf5apo7zm9"},{"name":"行雲部落格","_id":"clt03myid000dk0jf3rib7u3n"},{"name":"13th鐵人賽","_id":"clt03myie000gk0jf6lij9dtn"},{"name":"PHP","_id":"clt03myie000mk0jf7rzb9j4l"},{"name":"Python","_id":"clt03myif000rk0jf3smk0tkn"},{"name":"API","_id":"clt03myif000uk0jfcyjr3uig"},{"name":"MVVM","_id":"clt03myih0017k0jfflbs4aqc"},{"name":"介面設計","_id":"clt03myii001gk0jf9j8ggy3b"},{"name":"STT","_id":"clt03myii001pk0jf2etqh7js"},{"name":"TTS","_id":"clt03myij001tk0jfb8gn6au8"},{"name":"Repository","_id":"clt03myij0021k0jf3q3y1fi4"},{"name":"Callback","_id":"clt03myik0029k0jfdrbxdub7"},{"name":"物件","_id":"clt03myik002gk0jf7mi5gjiz"},{"name":"RecyclerView","_id":"clt03myil002mk0jf0jta883y"},{"name":"Apple Silicon","_id":"clt03myil002pk0jf5jxxackm"},{"name":"EditText","_id":"clt03myil002yk0jf08fj2hsa"},{"name":"CodeIgniter","_id":"clt03myim0031k0jf35xf1ecn"},{"name":"Swagger","_id":"clt03myim0034k0jf2vjz8r80"},{"name":"Word","_id":"clt03myim0039k0jfffu91fp1"},{"name":"hotkey","_id":"clt03myim003ck0jf7dn35nc5"},{"name":"MongoDB","_id":"clt03myim003ek0jf8xq44nii"},{"name":"行雲者 Workshop","_id":"clt03myim003hk0jf6ibw4w4b"},{"name":"Volley","_id":"clt03myim003jk0jfdrcrfrhv"},{"name":"Zenbo","_id":"clt03myim003lk0jf7fhr6enw"},{"name":"偵錯","_id":"clt03myim003ok0jfdfn41prx"},{"name":"模擬器","_id":"clt03myin003uk0jf7gnkhjn8"},{"name":"DDE","_id":"clt03myin0040k0jf9chvcb5y"},{"name":"Dialogflow","_id":"clt03myin0042k0jfd982h7u6"},{"name":"聊天機器人","_id":"clt03myin0043k0jfbuj0a98b"},{"name":"爬蟲","_id":"clt03myio004sk0jfdvi84h24"},{"name":"CSV","_id":"clt03myio004vk0jfgfux4foj"},{"name":"BeautifulSoup","_id":"clt03myio0050k0jfh8we7wbw"},{"name":"監聽器","_id":"clt03myio0053k0jf38z9fn9q"},{"name":"長照","_id":"clt03myio0056k0jfe68ocr8m"},{"name":"Kotlin","_id":"clt03myio005ck0jf6gf31691"},{"name":"TF-IDF","_id":"clt03myip005lk0jf5y28d18r"},{"name":"語料庫","_id":"clt03myip005pk0jf8w0m4dez"},{"name":"Pepper","_id":"clt03myip005wk0jf9td89t00"},{"name":"斷詞","_id":"clt03myip0068k0jff023gurk"},{"name":"CKIP","_id":"clt03myip006bk0jf82e5fpa3"},{"name":"Jieba","_id":"clt03myiq006dk0jf1mslhkd0"},{"name":"matplotlib","_id":"clt03myiq006ok0jfcq1i8hot"},{"name":"餘弦相似性","_id":"clt03myiq0071k0jf5mox2e1m"},{"name":"回饋機制","_id":"clt03myir0075k0jfg8uc1k3n"},{"name":"OneNote","_id":"clt03myir0078k0jf7jgu52w1"},{"name":"反編譯","_id":"clt03myir007bk0jfcr0974mz"},{"name":"逆向工程","_id":"clt03myir007ek0jf985781k3"},{"name":"APK","_id":"clt03myir007fk0jfgikq24gb"},{"name":"系統架構","_id":"clt03myis007lk0jf06q0f6n6"}]}}